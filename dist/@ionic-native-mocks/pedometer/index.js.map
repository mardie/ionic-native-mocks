{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/pedometer/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAY7C;IAAmC,iCAAS;IAA5C;;IA4EA,CAAC;IA3EG;;;OAGG;IACH,+CAAuB,GAAvB;QACI,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,2CAAmB,GAAnB;QACI,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,gDAAwB,GAAxB;QACI,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;MAME;IACF,6CAAqB,GAArB;QACK,IAAI,QAAwB,CAAC;QAC9B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,4CAAoB,GAApB;QACI,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;OAOG;IACH,iCAAS,GAAT,UAAU,OAGT;QACG,IAAI,QAAwB,CAAE;QAC9B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,oBAAC;AAAD,CA5EA,AA4EC,CA5EkC,SAAS,GA4E3C","file":"index.js","sourceRoot":"","sourcesContent":["import { Pedometer } from '@ionic-native/pedometer';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport interface IPedometerData {\r\n    startDate?: number;\r\n    endDate?: number;\r\n    numberOfSteps: number;\r\n    distance: number;\r\n    floorsAscended: number;\r\n    floorsDescended: number;\r\n}\r\n\r\nexport class PedometerMock extends Pedometer {\r\n    /**\r\n     * Checks if step counting is available. Only works on iOS.\r\n     * @return {Promise<boolean>} Returns a promise that resolves when feature is supported (true) or not supported (false)\r\n     */\r\n    isStepCountingAvailable(): Promise<boolean> {\r\n        let response: boolean = true;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Distance estimation indicates the ability to use step information to supply the approximate distance travelled by the user.\r\n     * This capability is not supported on all devices, even with iOS 8.\r\n     * Only works on iOS.\r\n     * @return {Promise<boolean>} Returns a promise that resolves when feature is supported (true) or not supported (false)\r\n     */\r\n    isDistanceAvailable(): Promise<boolean> {\r\n        let response: boolean = true;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Floor counting indicates the ability to count the number of floors the user walks up or down using stairs.\r\n     * This capability is not supported on all devices, even with iOS 8.\r\n     * Only works on iOS.\r\n     * @return {Promise<boolean>} Returns a promise that resolves when feature is supported (true) or not supported (false)\r\n     */\r\n    isFloorCountingAvailable(): Promise<boolean> {\r\n        let response: boolean = true;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n    * Starts the delivery of recent pedestrian-related data to your Cordova app.\r\n    *\r\n    * When the app is suspended, the delivery of updates stops temporarily.\r\n    * Upon returning to foreground or background execution, the pedometer object begins updates again.\r\n    * @return {Observable<IPedometerData>} Returns a Observable that recieves repeatly data from pedometer in background.\r\n    */\r\n    startPedometerUpdates(): Observable<IPedometerData> {\r\n         let response: IPedometerData;\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next(response);\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Stops the delivery of recent pedestrian data updates to your Cordova app.\r\n     * @return {Promise<boolean>} Returns a promise that resolves when pedometer watching was stopped\r\n     */\r\n    stopPedometerUpdates(): Promise<any> {\r\n        let response: boolean = true;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Retrieves the data between the specified start and end dates.\r\n     * The startDate and endDate options are required and can be constructed in any valid JavaScript way\r\n     * (e.g. new Date(2015, 4, 1, 15, 20, 00) is also valid, as is milliseconds).\r\n     * Only works on iOS.\r\n     * @param {any} options  start date and en date where you want to get pedometer data\r\n     * @return {Promise<IPedometerData>} Returns a promise that resolves when pedometer data found\r\n     */\r\n    queryData(options: {\r\n        startDate: Date;\r\n        endDate: Date;\r\n    }): Promise<IPedometerData> {\r\n        let response: IPedometerData ;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n}\r\n"]}