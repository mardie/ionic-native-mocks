{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/media/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,KAAK,EAAe,MAAM,qBAAqB,CAAC;AAGzD;;GAEG;AACH;IAMI,yBAAY,eAAoB,EAAE,SAA0B,EAAE,OAAwB,EAAE,cAA+B;QACnH,8DAA8D;IAClE,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,6CAAmB,GAAnB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,4CAAkB,GAAlB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,qCAAW,GAAX;QACI,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IAAA,CAAC;IACF;;OAEG;IACH,8BAAI,GAAJ,UAAK,UAGJ,IAAS,CAAC;IAAA,CAAC;IACZ;;OAEG;IACH,+BAAK,GAAL,cAAe,CAAC;IAAA,CAAC;IACjB;;OAEG;IACH,iCAAO,GAAP,cAAiB,CAAC;IAAA,CAAC;IACnB;;;OAGG;IACH,gCAAM,GAAN,UAAO,YAAoB,IAAS,CAAC;IAAA,CAAC;IACtC;;;OAGG;IACH,mCAAS,GAAT,UAAU,MAAc,IAAS,CAAC;IAAA,CAAC;IACnC;;OAEG;IACH,qCAAW,GAAX,cAAqB,CAAC;IAAA,CAAC;IACvB;;OAEG;IACH,oCAAU,GAAV,cAAoB,CAAC;IAAA,CAAC;IACtB;;OAEG;IACH,qCAAW,GAAX,cAAqB,CAAC;IAAA,CAAC;IACvB;;OAEG;IACH,sCAAY,GAAZ,cAAsB,CAAC;IAAA,CAAC;IACxB;;OAEG;IACH,8BAAI,GAAJ,cAAc,CAAC;IAAA,CAAC;IACpB,sBAAC;AAAD,CA/EA,AA+EC,IAAA;;AAcD;IAA+B,6BAAK;IAApC;;IAiDA,CAAC;IAZG;;;;;;;OAOG;IACH,0BAAM,GAAN,UAAO,GAAW;QACd,IAAI,QAAqB,CAAC;QAC1B,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACN,gBAAC;AAAD,CAjDA,AAiDC,CAjD8B,KAAK,GAiDnC","file":"index.js","sourceRoot":"","sourcesContent":["import { Media, MediaObject } from '@ionic-native/media';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class MediaObjectMock  {\r\n    // private _objectInstance;\r\n    onSuccess: Observable<any>;\r\n    onError: Observable<any>;\r\n    onStatusUpdate: Observable<any> ;\r\n\r\n    constructor(_objectInstance: any, onSuccess: Observable<any>, onError: Observable<any>, onStatusUpdate: Observable<any>) {\r\n        // super(_objectInstance, onSuccess, onError, onStatusUpdate);\r\n    };\r\n    /**\r\n     * Get the current amplitude of the current recording.\r\n     * @returns {Promise<any>} Returns a promise with the amplitude of the current recording\r\n     */\r\n    getCurrentAmplitude(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get the current position within an audio file. Also updates the Media object's position parameter.\r\n     * @returns {Promise<any>} Returns a promise with the position of the current recording\r\n     */\r\n    getCurrentPosition(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get the duration of an audio file in seconds. If the duration is unknown, it returns a value of -1.\r\n     * @returns {number} Returns a promise with the duration of the current recording\r\n     */\r\n    getDuration(): number {\r\n        return 42;\r\n    };\r\n    /**\r\n     * Starts or resumes playing an audio file.\r\n     */\r\n    play(iosOptions?: {\r\n        numberOfLoops?: number;\r\n        playAudioWhenScreenIsLocked?: boolean;\r\n    }): void {};\r\n    /**\r\n     * Pauses playing an audio file.\r\n     */\r\n    pause(): void {};\r\n    /**\r\n     * Releases the underlying operating system's audio resources. This is particularly important for Android, since there are a finite amount of OpenCore instances for media playback. Applications should call the release function for any Media resource that is no longer needed.\r\n     */\r\n    release(): void {};\r\n    /**\r\n     * Sets the current position within an audio file.\r\n     * @param {number} milliseconds The time position you want to set for the current audio file\r\n     */\r\n    seekTo(milliseconds: number): void {};\r\n    /**\r\n     * Set the volume for an audio file.\r\n     * @param volume {number} The volume to set for playback. The value must be within the range of 0.0 to 1.0.\r\n     */\r\n    setVolume(volume: number): void {};\r\n    /**\r\n     * Starts recording an audio file.\r\n     */\r\n    startRecord(): void {};\r\n    /**\r\n     * Stops recording\r\n     */\r\n    stopRecord(): void {};\r\n    /**\r\n     * Pauses recording\r\n     */\r\n    pauseRecord(): void {};\r\n    /**\r\n     * Resumes recording\r\n     */\r\n    resumeRecord(): void {};\r\n    /**\r\n     * Stops playing an audio file.\r\n     */\r\n    stop(): void {};\r\n}\r\nexport declare type MediaStatusUpdateCallback = (statusCode: number) => void;\r\nexport interface MediaError {\r\n    /**\r\n     * Error message\r\n     */\r\n    message: string;\r\n    /**\r\n     * Error code\r\n     */\r\n    code: number;\r\n}\r\nexport declare type MediaErrorCallback = (error: MediaError) => void;\r\n\r\nexport class MediaMock extends Media {\r\n    /**\r\n     * @hidden\r\n     */\r\n    MEDIA_NONE: number;\r\n    /**\r\n     * @hidden\r\n     */\r\n    MEDIA_STARTING: number;\r\n    /**\r\n     * @hidden\r\n     */\r\n    MEDIA_RUNNING: number;\r\n    /**\r\n     * @hidden\r\n     */\r\n    MEDIA_PAUSED: number;\r\n    /**\r\n     * @hidden\r\n     */\r\n    MEDIA_STOPPED: number;\r\n    /**\r\n     * @hidden\r\n     */\r\n    MEDIA_ERR_ABORTED: number;\r\n    /**\r\n     * @hidden\r\n     */\r\n    MEDIA_ERR_NETWORK: number;\r\n    /**\r\n     * @hidden\r\n     */\r\n    MEDIA_ERR_DECODE: number;\r\n    /**\r\n     * @hidden\r\n     */\r\n    MEDIA_ERR_NONE_SUPPORTED: number;\r\n    /**\r\n     * Open a media file\r\n     * @param src {string} A URI containing the audio content.\r\n     * @param [onStatusUpdate] {MediaStatusUpdateCallback} A callback function to be invoked when the status of the file changes\r\n     * @param [onSuccess] {Function} A callback function to be invoked after the current play, record, or stop action is completed\r\n     * @param [onError] {MediaErrorCallback} A callback function is be invoked if an error occurs.\r\n     * @return {MediaObject}\r\n     */\r\n    create(src: string): MediaObject {\r\n        let response: MediaObject;\r\n        return response;\r\n    };\r\n}\r\n"]}