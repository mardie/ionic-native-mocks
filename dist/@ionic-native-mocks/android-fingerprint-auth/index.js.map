{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/android-fingerprint-auth/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,wCAAwC,CAAC;AAiFhF;IAAgD,8CAAsB;IAAtE;;IAuEA,CAAC;IAlDG;;;;OAIG;IACH,4CAAO,GAAP,UAAQ,OAAuB;QAC3B,IAAI,OAA2B,CAAC;QAChC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,4CAAO,GAAP,UAAQ,OAAuB;QAC3B,IAAI,OAA0B,CAAC;QAC/B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,gDAAW,GAAX;QAKI,IAAI,OAAO,GAA2F,EAAE,WAAW,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,uBAAuB,EAAE,IAAI,EAAE,CAAC;QACrL,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,2CAAM,GAAN,UAAO,OAGN;QAGG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,iCAAC;AAAD,CAvEA,AAuEC,CAvE+C,sBAAsB,GAuErE","file":"index.js","sourceRoot":"","sourcesContent":["import { AndroidFingerprintAuth } from '@ionic-native/android-fingerprint-auth';\r\nexport interface AFAAuthOptions {\r\n    /**\r\n     * Required\r\n     * Used as the alias for your key in the Android Key Store.\r\n     */\r\n    clientId: string;\r\n    /**\r\n     * Used to create credential string for encrypted token and as alias to retrieve the cipher.\r\n     */\r\n    username?: string;\r\n    /**\r\n     * Used to create credential string for encrypted token\r\n     */\r\n    password?: string;\r\n    /**\r\n     * Required for decrypt()\r\n     * Encrypted user credentials to decrypt upon successful authentication.\r\n     */\r\n    token?: string;\r\n    /**\r\n     * Set to true to remove the \"USE BACKUP\" button\r\n     */\r\n    disableBackup?: boolean;\r\n    /**\r\n     * Change the language. (en_US or es)\r\n     */\r\n    locale?: string;\r\n    /**\r\n     * The device max is 5 attempts. Set this parameter if you want to allow fewer than 5 attempts.\r\n     */\r\n    maxAttempts?: number;\r\n    /**\r\n     * Require the user to authenticate with a fingerprint to authorize every use of the key.\r\n     * New fingerprint enrollment will invalidate key and require backup authenticate to\r\n     * re-enable the fingerprint authentication dialog.\r\n     */\r\n    userAuthRequired?: boolean;\r\n    /**\r\n     * Set the title of the fingerprint authentication dialog.\r\n     */\r\n    dialogTitle?: string;\r\n    /**\r\n     * Set the message of the fingerprint authentication dialog.\r\n     */\r\n    dialogMessage?: string;\r\n    /**\r\n     * Set the hint displayed by the fingerprint icon on the fingerprint authentication dialog.\r\n     */\r\n    dialogHint?: string;\r\n}\r\nexport interface AFADecryptOptions {\r\n    /**\r\n     * Biometric authentication\r\n     */\r\n    withFingerprint: boolean;\r\n    /**\r\n     * Authentication using backup credential activity\r\n     */\r\n    withBackup: boolean;\r\n    /**\r\n     * FingerprintAuth.CipherMode.DECRYPT\r\n     * Decrypted password\r\n     */\r\n    password: string;\r\n}\r\nexport interface AFAEncryptResponse {\r\n    /**\r\n     * Biometric authentication\r\n     */\r\n    withFingerprint: boolean;\r\n    /**\r\n     * Authentication using backup credential activity\r\n     */\r\n    withBackup: boolean;\r\n    /**\r\n     * base64encoded string representation of user credentials\r\n     */\r\n    token: string;\r\n}\r\n\r\nexport class AndroidFingerprintAuthMock extends AndroidFingerprintAuth {\r\n    ERRORS: {\r\n        BAD_PADDING_EXCEPTION: 'BAD_PADDING_EXCEPTION';\r\n        CERTIFICATE_EXCEPTION: 'CERTIFICATE_EXCEPTION';\r\n        FINGERPRINT_CANCELLED: 'FINGERPRINT_CANCELLED';\r\n        FINGERPRINT_DATA_NOT_DELETED: 'FINGERPRINT_DATA_NOT_DELETED';\r\n        FINGERPRINT_ERROR: 'FINGERPRINT_ERROR';\r\n        FINGERPRINT_NOT_AVAILABLE: 'FINGERPRINT_NOT_AVAILABLE';\r\n        FINGERPRINT_PERMISSION_DENIED: 'FINGERPRINT_PERMISSION_DENIED';\r\n        FINGERPRINT_PERMISSION_DENIED_SHOW_REQUEST: 'FINGERPRINT_PERMISSION_DENIED_SHOW_REQUEST';\r\n        ILLEGAL_BLOCK_SIZE_EXCEPTION: 'ILLEGAL_BLOCK_SIZE_EXCEPTION';\r\n        INIT_CIPHER_FAILED: 'INIT_CIPHER_FAILED';\r\n        INVALID_ALGORITHM_PARAMETER_EXCEPTION: 'INVALID_ALGORITHM_PARAMETER_EXCEPTION';\r\n        IO_EXCEPTION: 'IO_EXCEPTION';\r\n        JSON_EXCEPTION: 'JSON_EXCEPTION';\r\n        MINIMUM_SDK: 'MINIMUM_SDK';\r\n        MISSING_ACTION_PARAMETERS: 'MISSING_ACTION_PARAMETERS';\r\n        MISSING_PARAMETERS: 'MISSING_PARAMETERS';\r\n        NO_SUCH_ALGORITHM_EXCEPTION: 'NO_SUCH_ALGORITHM_EXCEPTION';\r\n        SECURITY_EXCEPTION: 'SECURITY_EXCEPTION';\r\n    };\r\n    /**\r\n     * Opens a native dialog fragment to use the device hardware fingerprint scanner to authenticate against fingerprints registered for the device.\r\n     * @param options {AFAAuthOptions} Options\r\n     * @returns {Promise<any>}\r\n     */\r\n    encrypt(options: AFAAuthOptions): Promise<AFAEncryptResponse> {\r\n        let reponse: AFAEncryptResponse;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(reponse);\r\n        });\r\n    };\r\n    /**\r\n     * Opens a native dialog fragment to use the device hardware fingerprint scanner to authenticate against fingerprints registered for the device.\r\n     * @param options {AFAAuthOptions} Options\r\n     * @returns {Promise<any>}\r\n     */\r\n    decrypt(options: AFAAuthOptions): Promise<AFADecryptOptions> {\r\n        let reponse: AFADecryptOptions;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(reponse);\r\n        });\r\n    };\r\n    /**\r\n     * Check if service is available\r\n     * @returns {Promise<any>} Returns a Promise that resolves if fingerprint auth is available on the device\r\n     */\r\n    isAvailable(): Promise<{\r\n        isAvailable: boolean;\r\n        isHardwareDetected: boolean;\r\n        hasEnrolledFingerprints: boolean;\r\n    }> {\r\n        let reponse: { isAvailable: boolean, isHardwareDetected: boolean, hasEnrolledFingerprints: boolean} = { isAvailable: true, isHardwareDetected: true, hasEnrolledFingerprints: true };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(reponse);\r\n        });\r\n    };\r\n    /**\r\n     * Delete the cipher used for encryption and decryption by username\r\n     * @returns {Promise<any>} Returns a Promise that resolves if the cipher was successfully deleted\r\n     */\r\n    delete(options: {\r\n        clientId: string;\r\n        username: string;\r\n    }): Promise<{\r\n        deleted: boolean;\r\n    }> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve({deleted: true});\r\n        });\r\n    };\r\n}\r\n"]}