{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/keychain/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAElD;IAAkC,gCAAQ;IAA1C;;IAyDA,CAAC;IAxDG;;;;;OAKG;IACH,0BAAG,GAAH,UAAI,GAAW,EAAE,cAAuB;QACpC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,0BAAG,GAAH,UAAI,GAAW,EAAE,KAAgC,EAAE,UAAoB;QACnE,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,8BAAO,GAAP,UAAQ,GAAW,EAAE,cAAuB;QACxC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,8BAAO,GAAP,UAAQ,GAAW,EAAE,GAAQ,EAAE,UAAoB;QAC/C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,6BAAM,GAAN,UAAO,GAAW;QACd,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,mBAAC;AAAD,CAzDA,AAyDC,CAzDiC,QAAQ,GAyDzC","file":"index.js","sourceRoot":"","sourcesContent":["import { Keychain } from '@ionic-native/keychain';\r\n\r\nexport class KeychainMock extends Keychain {\r\n    /**\r\n     * Retrieves a value for a key\r\n     *\r\n     * @param {string} key the key to retrieve\r\n     * @param {string} [touchIDMessage] the message to show underneath the TouchID prompt (if any)\r\n     */\r\n    get(key: string, touchIDMessage?: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Sets a value for a key\r\n     *\r\n     * @param {string} key the key to set\r\n     * @param {string|number|boolean} value the value to set\r\n     * @param {boolean} [useTouchID] whether to store the value with security such that TouchID will be needed to grab it\r\n     */\r\n    set(key: string, value: string | number | boolean, useTouchID?: boolean): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Gets a JSON value for a key\r\n     *\r\n     * @param {string} key the key to retrieve\r\n     * @param {string} touchIDMessage the message to show underneath the TouchID prompt (if any)\r\n     */\r\n    getJson(key: string, touchIDMessage?: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Sets a JSON value for a key\r\n     *\r\n     * @param {string} key the key to set\r\n     * @param {any} obj value the value to set\r\n     * @param {boolean} [useTouchId] Wether to store the value with security such that TouchID will be needed to grab it\r\n     */\r\n    setJson(key: string, obj: any, useTouchId?: boolean): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Removes a value for a key\r\n     *\r\n     * @param {string} key the key to remove\r\n     */\r\n    remove(key: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}