{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/touch-id/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,wBAAwB,CAAC;AAEjD;IAAiC,+BAAO;IAAxC;;IAuDA,CAAC;IAtDG;;;;OAIG;IACH,iCAAW,GAAX;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,uCAAiB,GAAjB,UAAoB,OAAe;QAC/B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,iEAA2C,GAA3C,UAA8C,OAAe;QACzD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,sFAAgE,GAAhE,UAAmE,OAAe,EAAE,kBAA0B;QAC1G,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,kDAA4B,GAA5B;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,kBAAC;AAAD,CAvDA,AAuDC,CAvDgC,OAAO,GAuDvC","file":"index.js","sourceRoot":"","sourcesContent":["import { TouchID } from '@ionic-native/touch-id';\r\n\r\nexport class TouchIDMock extends TouchID {\r\n    /**\r\n     * Checks Whether TouchID is available or not.\r\n     *\r\n     * @returns {Promise<any>} Returns a Promise that resolves if yes, rejects if no.\r\n     */\r\n    isAvailable(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Show TouchID dialog and wait for a fingerprint scan. If user taps 'Enter Password' button, brings up standard system passcode screen.\r\n     *\r\n     * @param {string} message  The message to display\r\n     * @returns {Promise<any>} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).\r\n     */\r\n    verifyFingerprint ( message: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Show TouchID dialog and wait for a fingerprint scan. If user taps 'Enter Password' button, rejects with code '-3' (see above).\r\n     *\r\n     * @param {string} message  The message to display\r\n     * @returns {Promise<any>} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).\r\n     */\r\n    verifyFingerprintWithCustomPasswordFallback ( message: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(true);\r\n        });\r\n    };\r\n    /**\r\n     * Show TouchID dialog with custom 'Enter Password' message and wait for a fingerprint scan. If user taps 'Enter Password' button, rejects with code '-3' (see above).\r\n     *\r\n     * @param {string} message  The message to display\r\n     * @param {string} enterPasswordLabel  Custom text for the 'Enter Password' button\r\n     * @returns {Promise<any>} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).\r\n     */\r\n    verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel ( message: string, enterPasswordLabel: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Checks if the fingerprint database changed.\r\n     *\r\n     * @returns {Promise<any>} Returns a Promise that resolves if yes, rejects if no.\r\n     */\r\n    didFingerprintDatabaseChange (): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}