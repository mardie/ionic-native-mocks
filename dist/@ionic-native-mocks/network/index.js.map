{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/network/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,2BAA2B,CAAC;AAEnC;IAAiC,+BAAO;IAAxC;QAAA,qEA0CC;QAzCG;;;;WAIG;QACH,UAAI,GAAW,UAAU,CAAC;;IAoC9B,CAAC;IA9BG;;;OAGG;IACH,8BAAQ,GAAR;QACI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,kCAAY,GAAZ;QACI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,+BAAS,GAAT;QACI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,kBAAC;AAAD,CA1CA,AA0CC,CA1CgC,OAAO,GA0CvC","file":"index.js","sourceRoot":"","sourcesContent":["import { Network } from '@ionic-native/network';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport 'rxjs/add/observable/merge';\r\n\r\nexport class NetworkMock extends Network {\r\n    /**\r\n     * Connection type \r\n     * The `type` property will return one of the following connection types: `unknown`, `ethernet`, `wifi`, `2g`, `3g`, `4g`, `cellular`, `none`\r\n     * @return {string}\r\n     */\r\n    type: string = 'cellular';\r\n    /**\r\n     * Downlink Max Speed\r\n     * @return {string}\r\n     */\r\n    downlinkMax: string;\r\n    /**\r\n     * Returns an observable to watch connection changes\r\n     * @return {Observable<any>}\r\n     */\r\n    onchange(): Observable<any> {\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Get notified when the device goes offline\r\n     * @returns {Observable<any>} Returns an observable.\r\n     */\r\n    onDisconnect(): Observable<any> {\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Get notified when the device goes online\r\n     * @returns {Observable<any>} Returns an observable.\r\n     */\r\n    onConnect(): Observable<any> {\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n}\r\n"]}