{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/safari-view-controller/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,sCAAsC,CAAC;AAC5E,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAgB7C;IAA8C,4CAAoB;IAAlE;;IA0DA,CAAC;IAzDG;;;OAGG;IACH,8CAAW,GAAX;QACI,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,uCAAI,GAAJ,UAAK,OAAqC;QACtC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;OAEG;IACH,uCAAI,GAAJ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,mDAAgB,GAAhB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,yCAAM,GAAN;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,+CAAY,GAAZ,UAAa,GAAW;QACpB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,+BAAC;AAAD,CA1DA,AA0DC,CA1D6C,oBAAoB,GA0DjE","file":"index.js","sourceRoot":"","sourcesContent":["import { SafariViewController } from '@ionic-native/safari-view-controller';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport interface SafariViewControllerOptions {\r\n    animated?: boolean;\r\n    barColor?: string;\r\n    controlTintColor?: string;\r\n    enterReaderModeIfAvailable?: boolean;\r\n    hidden?: boolean;\r\n    showDefaultShareMenuItem?: boolean;\r\n    tintColor?: string;\r\n    toolbarColor?: string;\r\n    transition?: string;\r\n    url?: string;\r\n}\r\n\r\nexport class SafariViewControllerMock extends SafariViewController {\r\n    /**\r\n     * Checks if SafariViewController is available\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    isAvailable(): Promise<boolean> {\r\n        let response: boolean = true;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Shows Safari View Controller\r\n     * @param options {SafariViewControllerOptions} optional\r\n     * @returns {Observable<any>}\r\n     */\r\n    show(options?: SafariViewControllerOptions): Observable<any> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Hides Safari View Controller\r\n     */\r\n    hide(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Tries to connect to the  Chrome's custom tabs service. you must call this method before calling any of the other methods listed below.\r\n     * @returns {Promise<any>}\r\n     */\r\n    connectToService(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Call this method whenever there's a chance the user will open an external url.\r\n     * @returns {Promise<any>}\r\n     */\r\n    warmUp(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * For even better performance optimization, call this methods if there's more than a 50% chance the user will open a certain URL.\r\n     * @param url{string}\r\n     * @returns {Promise<any>}\r\n     */\r\n    mayLaunchUrl(url: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}