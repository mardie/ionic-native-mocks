{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/device-orientation/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,kCAAkC,CAAC;AACrE,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAiC7C;IAA2C,yCAAiB;IAA5D;;IAuBA,CAAC;IAtBG,iDAAiB,GAAjB;QACI,IAAI,IAAqC,CAAC;QAE1C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACX,CAAC;IAAA,CAAC;IACE;;;;;;OAMG;IACH,4CAAY,GAAZ,UAAa,OAAyC;QAClD,IAAI,IAAqC,CAAC;QAE1C,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,4BAAC;AAAD,CAvBA,AAuBC,CAvB0C,iBAAiB,GAuB3D","file":"index.js","sourceRoot":"","sourcesContent":["import { DeviceOrientation } from '@ionic-native/device-orientation';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport interface DeviceOrientationCompassHeading {\r\n    /**\r\n     * The heading in degrees from 0-359.99 at a single moment in time. (Number)\r\n     */\r\n    magneticHeading: number;\r\n    /**\r\n     * The heading relative to the geographic North Pole in degrees 0-359.99 at a single moment in time. A negative value indicates that the true heading can't be determined. (Number)\r\n     */\r\n    trueHeading: number;\r\n    /**\r\n     * The deviation in degrees between the reported heading and the true heading. (Number)\r\n     */\r\n    headingAccuracy: number;\r\n    /**\r\n     * The time at which this heading was determined. (DOMTimeStamp)\r\n     */\r\n    timestamp: any;\r\n}\r\n\r\nexport interface DeviceOrientationCompassOptions {\r\n    /**\r\n     * How often to retrieve the compass heading in milliseconds. (Number) (Default: 100)\r\n     */\r\n    frequency?: number;\r\n    /**\r\n     * The change in degrees required to initiate a watchHeading success callback. When this value is set, frequency is ignored. (Number)\r\n     */\r\n    filter?: number;\r\n}\r\n\r\nexport class DeviceOrientationMock extends DeviceOrientation {\r\n    getCurrentHeading(): Promise<DeviceOrientationCompassHeading> {\r\n        let data: DeviceOrientationCompassHeading;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            resolve(data);\r\n        });\r\n};\r\n    /**\r\n     * Get the device current heading at a regular interval\r\n     *\r\n     * Stop the watch by unsubscribing from the observable\r\n     * @param {DeviceOrientationCompassOptions} options Options for compass. Frequency and Filter. Optional\r\n     * @returns {Observable<DeviceOrientationCompassHeading>} Returns an observable that contains the compass heading\r\n     */\r\n    watchHeading(options?: DeviceOrientationCompassOptions): Observable<DeviceOrientationCompassHeading> {\r\n        let data: DeviceOrientationCompassHeading;\r\n\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next(data);\r\n            observer.complete();\r\n        });\r\n    };\r\n}\r\n"]}