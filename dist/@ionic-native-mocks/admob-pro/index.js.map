{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/admob-pro/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { AdMobPro } from '@ionic-native/admob-pro';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport declare type AdSize = 'SMART_BANNER' | 'BANNER' | 'MEDIUM_RECTANGLE' | 'FULL_BANNER' | 'LEADERBOARD' | 'SKYSCRAPER' | 'CUSTOM';\r\nexport interface AdMobOptions {\r\n    /**\r\n     * Banner ad ID\r\n     */\r\n    adId?: string;\r\n    /**\r\n     * Banner Ad Size, defaults to `SMART_BANNER`. IT can be: `SMART_BANNER`, `BANNER`, `MEDIUM_RECTANGLE`, `FULL_BANNER`, `LEADERBOARD`, `SKYSCRAPER`, or `CUSTOM`\r\n     */\r\n    adSize?: AdSize;\r\n    /**\r\n     * Banner width, valid when `adSize` is set to `CUSTOM`\r\n     */\r\n    width?: number;\r\n    /**\r\n     * Banner height, valid when `adSize` is set to `CUSTOM`\r\n     */\r\n    height?: number;\r\n    /**\r\n     * Allow banner to overlap webview, or else it will push webview up or down to avoid overlap. Defaults to false.\r\n     */\r\n    overlap?: boolean;\r\n    /**\r\n     * Position of banner ad. Defaults to `TOP_CENTER`. You can use the `AdMob.AD_POSITION` property to select other values.\r\n     */\r\n    position?: number;\r\n    /**\r\n     * X in pixels. Valid when `position` is set to `POS_XY`\r\n     */\r\n    x?: number;\r\n    /**\r\n     * Y in pixels. Valid when `position` is set to `POS_XY`\r\n     */\r\n    y?: number;\r\n    /**\r\n     * Set to true to receive test ad for testing purposes\r\n     */\r\n    isTesting?: boolean;\r\n    /**\r\n     * Auto show interstitial ad when loaded. Set to false if hope to control the show timing with prepareInterstitial/showInterstitial\r\n     */\r\n    autoShow?: boolean;\r\n    /**\r\n     * Re-create the banner on web view orientation change (not screen orientation), or else just move the banner. Default:true.\r\n     */\r\n    orientationRenew?: boolean;\r\n    /**\r\n     * Set extra color style for Ad\r\n     */\r\n    adExtras?: AdExtras;\r\n    /**\r\n     * License key for the plugin\r\n     */\r\n    license?: any;\r\n}\r\nexport interface AdExtras {\r\n    color_bg: string;\r\n    color_bg_top: string;\r\n    color_border: string;\r\n    color_link: string;\r\n    color_text: string;\r\n    color_url: string;\r\n}\r\n\r\nexport class AdMobProMock extends AdMobPro {\r\n    AD_POSITION: {\r\n        NO_CHANGE: number;\r\n        TOP_LEFT: number;\r\n        TOP_CENTER: number;\r\n        TOP_RIGHT: number;\r\n        LEFT: number;\r\n        CENTER: number;\r\n        RIGHT: number;\r\n        BOTTOM_LEFT: number;\r\n        BOTTOM_CENTER: number;\r\n        BOTTOM_RIGHT: number;\r\n        POS_XY: number;\r\n    };\r\n    /**\r\n     * Create a banner\r\n     * @param adIdOrOptions {string | AdMobOptions} Ad ID or Options\r\n     * @returns {Promise<any>} Returns a Promise that resolves when the banner is created\r\n     */\r\n    createBanner(adIdOrOptions: string | AdMobOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Destroy the banner, remove it from screen.\r\n     */\r\n    removeBanner(): void { };\r\n    /**\r\n     * Show banner at position\r\n     * @param position {number} Position. Use `AdMob.AD_POSITION` to set values.\r\n     */\r\n    showBanner(position: number): void { };\r\n    /**\r\n     * Show banner at custom position\r\n     * @param x {number} Offset from screen left.\r\n     * @param y {number} Offset from screen top.\r\n     */\r\n    showBannerAtXY(x: number, y: number): void { };\r\n    /**\r\n     * Hide the banner, remove it from screen, but can show it later\r\n     */\r\n    hideBanner(): void { };\r\n    /**\r\n     * Prepare interstitial banner\r\n     * @param adIdOrOptions {string | AdMobOptions} Ad ID or Options\r\n     * @returns {Promise<any>} Returns a Promise that resolves when interstitial is prepared\r\n     */\r\n    prepareInterstitial(adIdOrOptions: string | AdMobOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Show interstitial ad when it's ready\r\n     */\r\n    showInterstitial(): void { };\r\n    /**\r\n     * Prepare a reward video ad\r\n     * @param adIdOrOptions {string | AdMobOptions} Ad ID or Options\r\n     * @returns {Promise<any>} Returns a Promise that resolves when the ad is prepared\r\n     */\r\n    prepareRewardVideoAd(adIdOrOptions: string | AdMobOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Show a reward video ad\r\n     */\r\n    showRewardVideoAd(): void { };\r\n    /**\r\n     * Sets the values for configuration and targeting\r\n     * @param options {AdMobOptions} Options\r\n     * @returns {Promise<any>} Returns a Promise that resolves when the options have been set\r\n     */\r\n    setOptions(options: AdMobOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get user ad settings\r\n     * @returns {Promise<any>} Returns a promise that resolves with the ad settings\r\n     */\r\n    getAdSettings(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Triggered when failed to receive Ad\r\n     * @returns {Observable<any>}\r\n     */\r\n    onAdFailLoad(): Observable<any> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Triggered when Ad received\r\n     * @returns {Observable<any>}\r\n     */\r\n    onAdLoaded(): Observable<any> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Triggered when Ad will be showed on screen\r\n     * @returns {Observable<any>}\r\n     */\r\n    onAdPresent(): Observable<any> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Triggered when user click the Ad, and will jump out of your App\r\n     * @returns {Observable<any>}\r\n     */\r\n    onAdLeaveApp(): Observable<any> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Triggered when dismiss the Ad and back to your App\r\n     * @returns {Observable<any>}\r\n     */\r\n    onAdDismiss(): Observable<any> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n}\r\n"]}