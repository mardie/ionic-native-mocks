{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/stepcounter/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AAExD;IAAqC,mCAAW;IAAhD;;IAyDA,CAAC;IAxDG;;;;;OAKG;IACH,+BAAK,GAAL,UAAM,cAAsB;QACxB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,8BAAI,GAAJ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,2CAAiB,GAAjB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,sCAAY,GAAZ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,6CAAmB,GAAnB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,oCAAU,GAAV;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,sBAAC;AAAD,CAzDA,AAyDC,CAzDoC,WAAW,GAyD/C","file":"index.js","sourceRoot":"","sourcesContent":["import { Stepcounter } from '@ionic-native/stepcounter';\r\n\r\nexport class StepcounterMock extends Stepcounter {\r\n    /**\r\n     * Start the step counter\r\n     *\r\n     * @param startingOffset {number} will be added to the total steps counted in this session\r\n     * @returns {Promise<any | number>} Returns a Promise that resolves on success or rejects on failure\r\n     */\r\n    start(startingOffset: number): Promise<number | any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Stop the step counter\r\n     * @returns {Promise<any | number>} Returns a Promise that resolves on success with the amount of steps since the start command has been called, or rejects on failure\r\n     */\r\n    stop(): Promise<number | any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get the amount of steps for today (or -1 if it no data given)\r\n     * @returns {Promise<any | number>} Returns a Promise that resolves on success with the amount of steps today, or rejects on failure\r\n     */\r\n    getTodayStepCount(): Promise<number | any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get the amount of steps since the start command has been called\r\n     * @returns {Promise<any | number>} Returns a Promise that resolves on success with the amount of steps since the start command has been called, or rejects on failure\r\n     */\r\n    getStepCount(): Promise<number | any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Returns true/false if Android device is running >API level 19 && has the step counter API available\r\n     * @returns {Promise<any | boolean>} Returns a Promise that resolves on success, or rejects on failure\r\n     */\r\n    deviceCanCountSteps(): Promise<boolean | any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get the step history (JavaScript object)\r\n     * @returns {Promise<any>} Returns a Promise that resolves on success, or rejects on failure\r\n     */\r\n    getHistory(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}