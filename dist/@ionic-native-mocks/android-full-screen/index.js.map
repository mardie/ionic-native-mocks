{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/android-full-screen/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,mCAAmC,CAAC;AAEtE;IAA2C,yCAAiB;IAA5D;;IAqFA,CAAC;IApFG;;;OAGG;IACH,2CAAW,GAAX;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IAEF;;;OAGG;IACH,wDAAwB,GAAxB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,8CAAc,GAAd;QACI,IAAI,QAAgB,CAAC;QACrB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,+CAAe,GAAf;QACI,IAAI,QAAgB,CAAC;QACrB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,wCAAQ,GAAR;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,4CAAY,GAAZ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,kDAAkB,GAAlB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,iDAAiB,GAAjB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,6CAAa,GAAb;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,4BAAC;AAAD,CArFA,AAqFC,CArF0C,iBAAiB,GAqF3D","file":"index.js","sourceRoot":"","sourcesContent":["import { AndroidFullScreen } from '@ionic-native/android-full-screen';\r\n\r\nexport class AndroidFullScreenMock extends AndroidFullScreen {\r\n    /**\r\n     * Is this plugin supported?\r\n     * @return {Promise<any>}\r\n     */\r\n    isSupported(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(null);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Is immersive mode supported?\r\n     * @return {Promise<any>}\r\n     */\r\n    isImmersiveModeSupported(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(null);\r\n        });\r\n    };\r\n    /**\r\n     * The width of the screen in immersive mode.\r\n     * @return {Promise<number>}\r\n     */\r\n    immersiveWidth(): Promise<number> {\r\n        let response: number;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * The height of the screen in immersive mode.\r\n     * @return {Promise<number>}\r\n     */\r\n    immersiveHeight(): Promise<number> {\r\n        let response: number;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Hide system UI until user interacts.\r\n     * @return {Promise<any>}\r\n     */\r\n    leanMode(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(null);\r\n        });\r\n    };\r\n    /**\r\n     * Show system UI.\r\n     * @return {Promise<any>}\r\n     */\r\n    showSystemUI(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(null);\r\n        });\r\n    };\r\n    /**\r\n     * Extend your app underneath the status bar (Android 4.4+ only).\r\n     * @return {Promise<any>}\r\n     */\r\n    showUnderStatusBar(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(null);\r\n        });\r\n    };\r\n    /**\r\n     * Extend your app underneath the system UI (Android 4.4+ only).\r\n     * @return {Promise<any>}\r\n     */\r\n    showUnderSystemUI(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(null);\r\n        });\r\n    };\r\n    /**\r\n     * Hide system UI and keep it hidden (Android 4.4+ only).\r\n     * @return {Promise<any>}\r\n     */\r\n    immersiveMode(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(null);\r\n        });\r\n    };\r\n}\r\n"]}