{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/wheel-selector/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,8BAA8B,CAAC;AAqD7D;IAAuC,qCAAa;IAApD;;IAqBA,CAAC;IApBG;;;;OAIG;IACH,gCAAI,GAAJ,UAAK,OAA6B;QAC9B,IAAI,QAA2B,CAAC;QAC/B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,CAAE,QAAQ,CAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,wCAAY,GAAZ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,wBAAC;AAAD,CArBA,AAqBC,CArBsC,aAAa,GAqBnD","file":"index.js","sourceRoot":"","sourcesContent":["import { WheelSelector } from '@ionic-native/wheel-selector';\r\n\r\nexport interface WheelSelectorItem {\r\n    description?: string;\r\n}\r\nexport interface DefaultItem {\r\n    index: number;\r\n    value: string;\r\n}\r\nexport interface WheelSelectorOptions {\r\n    /**\r\n     * The title of the selector's input box\r\n     */\r\n    title: string;\r\n    /**\r\n     * The items to display (array of items).\r\n     */\r\n    items: Array<Array<WheelSelectorItem>>;\r\n    /**\r\n     * Which items to display by default.\r\n     */\r\n    defaultItems?: Array<DefaultItem>;\r\n    /**\r\n     * The 'ok' button text\r\n     * Default: Done\r\n     */\r\n    positiveButtonText?: string;\r\n    /**\r\n     * The 'cancel' button text\r\n     * Default: Cancel\r\n     */\r\n    negativeButtonText?: string;\r\n    /**\r\n     * Android only - theme color, 'light' or 'dark'.\r\n     * Default: light\r\n     */\r\n    theme?: string;\r\n    /**\r\n     * Whether to have the wheels 'wrap' (Android only)\r\n     * Default: false\r\n     */\r\n    wrapWheelText?: boolean;\r\n    /**\r\n     * The json key to display, by default it is description, this allows for setting any\r\n     * key/value to be displayed\r\n     * Default: description\r\n     */\r\n    displayKey?: string;\r\n}\r\nexport interface WheelSelectorData {\r\n    data: any;\r\n}\r\n\r\nexport class WheelSelectorMock extends WheelSelector {\r\n    /**\r\n     * Shows the wheel selector\r\n     * @param {WheelSelectorOptions} options Options for the wheel selector\r\n     * @returns {Promise<WheelSelectorData>} Returns a promise that resolves with the selected items, or an error.\r\n     */\r\n    show(options: WheelSelectorOptions): Promise<WheelSelectorData> {\r\n        let response: WheelSelectorData;\r\n         return new Promise((resolve, reject) => {\r\n            resolve( response );\r\n        });\r\n    };\r\n    /**\r\n     * Hide the selector\r\n     * @returns {Promise<void>}\r\n     */\r\n    hideSelector(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}