{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/zeroconf/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAkB7C;IAAkC,gCAAQ;IAA1C;;IAgFA,CAAC;IA/EG;;;OAGG;IACH,kCAAW,GAAX;QACI,IAAI,QAAQ,GAAW,EAAE,CAAC;QACzB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;;OAQG;IACH,+BAAQ,GAAR,UAAS,IAAY,EAAE,MAAc,EAAE,IAAY,EAAE,IAAY,EAAE,SAAc;QAC7E,IAAI,QAAwB,CAAC;QAC5B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,iCAAU,GAAV,UAAW,IAAY,EAAE,MAAc,EAAE,IAAY;QAChD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,2BAAI,GAAJ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,4BAAK,GAAL,UAAM,IAAY,EAAE,MAAc;QAC9B,IAAI,QAAwB,CAAC;QAC7B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,8BAAO,GAAP,UAAQ,IAAY,EAAE,MAAc;QAChC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,4BAAK,GAAL;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,mBAAC;AAAD,CAhFA,AAgFC,CAhFiC,QAAQ,GAgFzC","file":"index.js","sourceRoot":"","sourcesContent":["import { Zeroconf } from '@ionic-native/zeroconf';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport interface ZeroconfService {\r\n    domain: string;\r\n    type: string;\r\n    name: string;\r\n    port: number;\r\n    hostname: string;\r\n    ipv4Addresses: Array<string>;\r\n    ipv6Addresses: Array<string>;\r\n    txtRecord: any;\r\n}\r\nexport interface ZeroconfResult {\r\n    action: 'registered' | 'added' | 'removed';\r\n    service: ZeroconfService;\r\n}\r\n\r\nexport class ZeroconfMock extends Zeroconf {\r\n    /**\r\n     * Returns this device's hostname.\r\n     * @return {Promise<string>}\r\n     */\r\n    getHostname(): Promise<string> {\r\n        let response: string = '';\r\n         return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Publishes a new service.\r\n     * @param type {string} Service type name, e.g. \"_http._tcp\".\r\n     * @param domain {string} Domain scope of the service, typically \"local.\".\r\n     * @param name {string} Unqualified service instance name.\r\n     * @param port {number} Local port on which the service runs.\r\n     * @param txtRecord {any} Arbitrary key/value pairs describing the service.\r\n     * @return {Promise<ZeroconfResult>} Returns a Promise that resolves with the registered service.\r\n     */\r\n    register(type: string, domain: string, name: string, port: number, txtRecord: any): Promise<ZeroconfResult> {\r\n        let response: ZeroconfResult;\r\n         return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Unregisters a service.\r\n     * @param type {string} Service type name, e.g. \"_http._tcp\".\r\n     * @param domain {string} Domain scope of the service, typically \"local.\".\r\n     * @param name {string} Unqualified service instance name.\r\n     * @return {Promise<void>}\r\n     */\r\n    unregister(type: string, domain: string, name: string): Promise<any> {\r\n         return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Unregisters all published services.\r\n     * @return {Promise<void>}\r\n     */\r\n    stop(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Starts watching for services of the specified type.\r\n     * @param type {string} Service type name, e.g. \"_http._tcp\".\r\n     * @param domain {string} Domain scope of the service, typically \"local.\".\r\n     * @return {Observable<ZeroconfResult>} Returns an Observable that notifies of each service added or removed.\r\n     */\r\n    watch(type: string, domain: string): Observable<ZeroconfResult> {\r\n        let response: ZeroconfResult;\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next(response);\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Stops watching for services of the specified type.\r\n     * @param type {string} Service type name, e.g. \"_http._tcp\".\r\n     * @param domain {string} Domain scope of the service, typically \"local.\".\r\n     * @return {Promise<void>}\r\n     */\r\n    unwatch(type: string, domain: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Closes the service browser and stops watching.\r\n     * @return {Promise<void>}\r\n     */\r\n    close(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}