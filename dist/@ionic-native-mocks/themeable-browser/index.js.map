{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/themeable-browser/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,gBAAgB,EAAE,sBAAsB,EAAE,MAAM,iCAAiC,CAAC;AAC3F,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AA8D7C;;GAEG;AACH;IAAgD,8CAAsB;IAClE,2BAA2B;IAC3B,oCAAY,GAAW,EAAE,MAAc,EAAE,YAAqC;eAC1E,kBAAM,GAAG,EAAE,MAAM,EAAE,YAAY,CAAC;IACpC,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,yCAAI,GAAJ,cAAc,CAAC;IAAA,CAAC;IAChB;;OAEG;IACH,0CAAK,GAAL,cAAe,CAAC;IAAA,CAAC;IACjB;;OAEG;IACH,2CAAM,GAAN,cAAgB,CAAC;IAAC,CAAC;IACnB;;;;OAIG;IACH,kDAAa,GAAb,UAAc,MAGb;QACG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,8CAAS,GAAT,UAAU,GAGT;QACG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,uCAAE,GAAF,UAAG,KAAa;QACX,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,iCAAC;AAAD,CAxDA,AAwDC,CAxD+C,sBAAsB,GAwDrE;;AAED;IAA0C,wCAAgB;IAA1D;;IAYA,CAAC;IAXG;;;;;;OAMG;IACH,qCAAM,GAAN,UAAO,GAAW,EAAE,MAAc,EAAE,YAAqC;QACrE,IAAI,QAAgC,CAAC;QACrC,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACN,2BAAC;AAAD,CAZA,AAYC,CAZyC,gBAAgB,GAYzD","file":"index.js","sourceRoot":"","sourcesContent":["import { ThemeableBrowser, ThemeableBrowserObject } from '@ionic-native/themeable-browser';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport interface ThemeableBrowserButton {\r\n    wwwImage?: string;\r\n    image?: string;\r\n    wwwImagePressed?: string;\r\n    imagePressed?: string;\r\n    wwwImageDensity?: number;\r\n    align?: string;\r\n    event?: string;\r\n}\r\nexport interface ThemeableBrowserOptions {\r\n    statusbar?: {\r\n        color: string;\r\n    };\r\n    toolbar?: {\r\n        height?: number;\r\n        color?: string;\r\n        image?: string;\r\n    };\r\n    title?: {\r\n        color?: string;\r\n        staticText?: string;\r\n        showPageTitle?: boolean;\r\n    };\r\n    backButton?: ThemeableBrowserButton;\r\n    forwardButton?: ThemeableBrowserButton;\r\n    closeButton?: ThemeableBrowserButton;\r\n    customButtons?: ThemeableBrowserButton[];\r\n    menu?: {\r\n        image?: string;\r\n        imagePressed?: string;\r\n        title?: string;\r\n        cancel?: string;\r\n        align?: string;\r\n        items?: {\r\n            event: string;\r\n            label: string;\r\n        }[];\r\n    };\r\n    backButtonCanClose?: boolean;\r\n    disableAnimation?: boolean;\r\n    location?: string;\r\n    hidden?: string;\r\n    clearcache?: string;\r\n    clearsessioncache?: string;\r\n    zoom?: string;\r\n    hardwareback?: string;\r\n    mediaPlaybackRequiresUserAction?: string;\r\n    shouldPauseOnSuspsend?: string;\r\n    closebuttoncaption?: string;\r\n    disallowoverscroll?: string;\r\n    enableViewportScale?: string;\r\n    allowInlineMediaPlayback?: string;\r\n    keyboardDisplayRequiresUserAction?: string;\r\n    suppressesIncrementalRendering?: string;\r\n    presentationstyle?: string;\r\n    transitionstyle?: string;\r\n    toolbarposition?: string;\r\n    fullscreen?: string;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport class ThemeableBrowserObjectMock extends ThemeableBrowserObject {\r\n    // private _objectInstance;\r\n    constructor(url: string, target: string, styleOptions: ThemeableBrowserOptions) {\r\n        super(url, target, styleOptions);\r\n    };\r\n    /**\r\n     * Displays an browser window that was opened hidden. Calling this has no effect\r\n     * if the browser was already visible.\r\n     */\r\n    show(): void {};\r\n    /**\r\n     * Closes the browser window.\r\n     */\r\n    close(): void {};\r\n    /**\r\n     * Reloads the current page\r\n     */\r\n    reload(): void {} ;\r\n    /**\r\n     * Injects JavaScript code into the browser window.\r\n     * @param script    Details of the script to run, specifying either a file or code key.\r\n     * @returns {Promise<any>}\r\n     */\r\n    executeScript(script: {\r\n        file?: string;\r\n        code?: string;\r\n    }): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Injects CSS into the browser window.\r\n     * @param css       Details of the script to run, specifying either a file or code key.\r\n     * @returns {Promise<any>}\r\n     */\r\n    insertCss(css: {\r\n        file?: string;\r\n        code?: string;\r\n    }): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * A method that allows you to listen to events happening in the browser.\r\n     * Available events are: `ThemeableBrowserError`, `ThemeableBrowserWarning`, `critical`, `loadfail`, `unexpected`, `undefined`\r\n     * @param event Event name\r\n     * @returns {Observable<any>} Returns back an observable that will listen to the event on subscribe, and will stop listening to the event on unsubscribe.\r\n     */\r\n    on(event: string): Observable<any> {\r\n         return Observable.create((observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n}\r\n\r\nexport class ThemeableBrowserMock extends ThemeableBrowser {\r\n    /**\r\n     * Creates a browser instance\r\n     * @param url {string} URL to open\r\n     * @param target {string} Target\r\n     * @param styleOptions {ThemeableBrowserOptions} Themeable browser options\r\n     * @returns {ThemeableBrowserObject}\r\n     */\r\n    create(url: string, target: string, styleOptions: ThemeableBrowserOptions): ThemeableBrowserObject {\r\n        let response: ThemeableBrowserObject;\r\n        return response;\r\n    };\r\n}\r\n"]}