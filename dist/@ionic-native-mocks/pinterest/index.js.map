{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/pinterest/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Pinterest } from '@ionic-native/pinterest';\r\n\r\nexport interface PinterestUser {\r\n    /**\r\n     * The unique string of numbers and letters that identifies the user on Pinterest.\r\n     */\r\n    id?: string;\r\n    /**\r\n     * The user’s Pinterest username.\r\n     */\r\n    username?: string;\r\n    /**\r\n     * The user’s first name.\r\n     */\r\n    first_name?: string;\r\n    /**\r\n     * The user’s last name.\r\n     */\r\n    last_name?: string;\r\n    /**\r\n     * The text in the user’s “About you” section in their profile.\r\n     */\r\n    bio?: string;\r\n    /**\r\n     * The date the user created their account in ISO 8601 format\r\n     */\r\n    created_at?: string;\r\n    /**\r\n     * The user’s stats, including how many Pins, follows, boards and likes they have.\r\n     */\r\n    counts?: any;\r\n    /**\r\n     * The user’s profile image. The response returns the image’s URL, width and height.\r\n     */\r\n    image?: any;\r\n}\r\nexport interface PinterestBoard {\r\n    /**\r\n     * The unique string of numbers and letters that identifies the board on Pinterest.\r\n     */\r\n    id?: string;\r\n    /**\r\n     * The name of the board.\r\n     */\r\n    name?: string;\r\n    /**\r\n     * The link to the board.\r\n     */\r\n    url?: string;\r\n    /**\r\n     * The user-entered description of the board.\r\n     */\r\n    description?: string;\r\n    /**\r\n     * The first and last name, ID and profile URL of the user who created the board.\r\n     */\r\n    creator?: PinterestUser;\r\n    /**\r\n     * The date the user created the board.\r\n     */\r\n    created_at?: string;\r\n    /**\r\n     * The board’s stats, including how many Pins, followers, user's following and collaborators it has.\r\n     */\r\n    counts?: any;\r\n    /**\r\n     * The user’s profile image. The response returns the image’s URL, width and height.\r\n     */\r\n    image?: any;\r\n}\r\nexport interface PinterestPin {\r\n    /**\r\n     * The unique string of numbers and letters that identifies the Pin on Pinterest.\r\n     */\r\n    id?: string;\r\n    /**\r\n     * The URL of the webpage where the Pin was created.\r\n     */\r\n    link?: string;\r\n    /**\r\n     * The URL of the Pin on Pinterest.\r\n     */\r\n    url?: string;\r\n    /**\r\n     * The first and last name, ID and profile URL of the user who created the board.\r\n     */\r\n    creator?: PinterestUser;\r\n    /**\r\n     * The board that the Pin is on.\r\n     */\r\n    board?: PinterestBoard;\r\n    /**\r\n     * The date the Pin was created.\r\n     */\r\n    created_at?: string;\r\n    /**\r\n     * The user-entered description of the Pin.\r\n     */\r\n    note?: string;\r\n    /**\r\n     * The dominant color of the Pin’s image in hex code format.\r\n     */\r\n    color?: string;\r\n    /**\r\n     * The Pin’s stats, including the number of repins, comments and likes.\r\n     */\r\n    counts?: any;\r\n    /**\r\n     * The media type of the Pin (image or video).\r\n     */\r\n    media?: any;\r\n    /**\r\n     * The source data for videos, including the title, URL, provider, author name, author URL and provider name.\r\n     */\r\n    attribution?: any;\r\n    /**\r\n     * The Pin’s image. The default response returns the image’s URL, width and height.\r\n     */\r\n    image?: any;\r\n    /**\r\n     * Extra information about the Pin for Rich Pins. Includes the Pin type (e.g., article, recipe) and related information (e.g., ingredients, author).\r\n     */\r\n    metadata?: any;\r\n}\r\n\r\nexport class PinterestMock extends Pinterest {\r\n    /**\r\n     * Convenience constant for authentication scopes\r\n     */\r\n    SCOPES: {\r\n        READ_PUBLIC: string;\r\n        WRITE_PUBLIC: string;\r\n        READ_RELATIONSHIPS: string;\r\n        WRITE_RELATIONSHIPS: string;\r\n    };\r\n    /**\r\n     * Logs the user in using their Pinterest account.\r\n     * @param scopes {Array<string>} Array of scopes that you need access to. You can use Pinterest.SCOPES constant for convenience.\r\n     * @returns {Promise<any>} The response object will contain the user's profile data, as well as the access token (if you need to use it elsewhere, example: send it to your server and perform actions on behalf of the user).\r\n     */\r\n    login(scopes: string[]): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Gets the authenticated user's profile\r\n     * @param fields {string} Fields to retrieve, separated by commas. Defaults to all available fields.\r\n     * @returns {Promise<PinterestUser>} Returns a promise that resolves with the user's object\r\n     */\r\n    getMe(fields?: string): Promise<PinterestUser> {\r\n        let response: PinterestUser;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param fields {string} Optional fields separated by comma\r\n     * @param limit {number} Optional limit, defaults to 100, maximum is 100.\r\n     * @returns {Promise<Array<PinterestPin>>}\r\n     */\r\n    getMyPins(fields?: string, limit?: number): Promise<Array<PinterestPin>> {\r\n        let response: Array<PinterestPin> = [];\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param fields {string} Optional fields separated by comma\r\n     * @param limit {number} Optional limit, defaults to 100, maximum is 100.\r\n     * @returns {Promise<Array<PinterestBoard>>}\r\n     */\r\n    getMyBoards(fields?: string, limit?: number): Promise<Array<PinterestBoard>> {\r\n        let response: Array<PinterestBoard> = [];\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Get the authenticated user's likes.\r\n     * @param fields {string} Optional fields separated by comma\r\n     * @param limit {number} Optional limit, defaults to 100, maximum is 100.\r\n     * @returns {Promise<Array<PinterestPin>>}\r\n     */\r\n    getMyLikes(fields?: string, limit?: number): Promise<Array<PinterestPin>> {\r\n        let response: Array<PinterestPin> = [];\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Get the authenticated user's followers.\r\n     * @param fields {string} Optional fields separated by comma\r\n     * @param limit {number} Optional limit, defaults to 100, maximum is 100.\r\n     * @returns {Promise<Array<PinterestUser>>}\r\n     */\r\n    getMyFollowers(fields?: string, limit?: number): Promise<Array<PinterestUser>> {\r\n        let response: Array<PinterestUser> = [];\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Get the authenticated user's followed boards.\r\n     * @param fields {string} Optional fields separated by comma\r\n     * @param limit {number} Optional limit, defaults to 100, maximum is 100.\r\n     * @returns {Promise<Array<PinterestBoard>>}\r\n     */\r\n    getMyFollowedBoards(fields?: string, limit?: number): Promise<Array<PinterestBoard>> {\r\n        let response: Array<PinterestBoard> = [];\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Get the authenticated user's followed interests.\r\n     * @param fields {string} Optional fields separated by comma\r\n     * @param limit {number} Optional limit, defaults to 100, maximum is 100.\r\n     * @returns {Promise<any>}\r\n     */\r\n    getMyFollowedInterests(fields?: string, limit?: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get a user's profile.\r\n     * @param username\r\n     * @param fields\r\n     * @returns {Promise<PinterestUser>}\r\n     */\r\n    getUser(username: string, fields?: string): Promise<PinterestUser> {\r\n        let response: PinterestUser;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Get a board's data.\r\n     * @param boardId\r\n     * @param fields\r\n     * @returns {Promise<PinterestBoard>}\r\n     */\r\n    getBoard(boardId: string, fields?: string): Promise<PinterestBoard> {\r\n        let response: PinterestBoard;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Get Pins of a specific board.\r\n     * @param boardId {string} The ID of the board\r\n     * @param fields {string} Optional fields separated by comma\r\n     * @param limit {number} Optional limit, defaults to 100, maximum is 100.\r\n     * @returns {Promise<Array<PinterestPin>>}\r\n     */\r\n    getBoardPins(boardId: string, fields?: string, limit?: number): Promise<Array<PinterestPin>> {\r\n        let response: Array<PinterestPin> = [];\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Delete a board.\r\n     * @param boardId {string} The ID of the board\r\n     * @returns {Promise<PinterestUser>}\r\n     */\r\n    deleteBoard(boardId: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Create a new board for the authenticated user.\r\n     * @param name {string} Name of the board\r\n     * @param desc {string} Optional description of the board\r\n     * @returns {Promise<PinterestBoard>}\r\n     */\r\n    createBoard(name: string, desc?: string): Promise<PinterestBoard> {\r\n         let response: PinterestBoard;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Get a Pin by ID.\r\n     * @param pinId {string} The ID of the Pin\r\n     * @param fields {string} Optional fields separated by comma\r\n     * @returns {Promise<PinterestPin>}\r\n     */\r\n    getPin(pinId: string, fields?: string): Promise<PinterestPin> {\r\n        let response: PinterestPin;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Deletes a pin\r\n     * @param pinId {string} The ID of the pin\r\n     * @returns {Promise<any>}\r\n     */\r\n    deletePin(pinId: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Creates a Pin\r\n     * @param note {string} Note/Description of the pin\r\n     * @param boardId {string} Board ID to put the Pin under\r\n     * @param imageUrl {string} URL of the image to share\r\n     * @param link {string} Optional link to share\r\n     * @returns {Promise<PinterestPin>}\r\n     */\r\n    createPin(note: string, boardId: string, imageUrl: string, link?: string): Promise<PinterestPin> {\r\n        let response: PinterestPin;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n}\r\n"]}