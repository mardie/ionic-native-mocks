{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/paypal/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAE9C;IAAgC,8BAAM;IAAtC;;IAwFA,CAAC;IAvFG;;;OAGG;IACH,4BAAO,GAAP;QACI,IAAI,QAAQ,GAAW,EAAE,CAAC;QAC1B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;;OAQG;IACH,yBAAI,GAAJ,UAAK,wBAA2C;QAC5C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;;OAQG;IACH,oCAAe,GAAf,UAAgB,WAAmB,EAAE,aAAkC;QACnE,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;OAOG;IACH,0CAAqB,GAArB,UAAsB,OAAsB;QACxC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;;;OASG;IACH,qCAAgB,GAAhB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,0CAAqB,GAArB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,2CAAsB,GAAtB,UAAuB,MAAgB;QACnC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,iBAAC;AAAD,CAxFA,AAwFC,CAxF+B,MAAM,GAwFrC","file":"index.js","sourceRoot":"","sourcesContent":["import { PayPal } from '@ionic-native/paypal';\r\n\r\nexport class PayPalMock extends PayPal {\r\n    /**\r\n     * Retrieve the version of the PayPal iOS SDK library. Useful when contacting support.\r\n     * @returns {Promise<string>}\r\n     */\r\n    version(): Promise<string> {\r\n        let response: string = '';\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * You must preconnect to PayPal to prepare the device for processing payments.\r\n     * This improves the user experience, by making the presentation of the\r\n     * UI faster. The preconnect is valid for a limited time, so\r\n     * the recommended time to preconnect is on page load.\r\n     *\r\n     * @param {PayPalEnvironment} clientIdsForEnvironments: set of client ids for environments\r\n     * @returns {Promise<any>}\r\n     */\r\n    init(clientIdsForEnvironments: PayPalEnvironment): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * You must preconnect to PayPal to prepare the device for processing payments.\r\n     * This improves the user experience, by making the presentation of the UI faster.\r\n     * The preconnect is valid for a limited time, so the recommended time to preconnect is on page load.\r\n     *\r\n     * @param {String} environment: available options are \"PayPalEnvironmentNoNetwork\", \"PayPalEnvironmentProduction\" and \"PayPalEnvironmentSandbox\"\r\n     * @param {PayPalConfiguration} configuration: PayPalConfiguration object, for Future Payments merchantName, merchantPrivacyPolicyURL and merchantUserAgreementURL must be set be set\r\n     * @returns {Promise<any>}\r\n     */\r\n    prepareToRender(environment: string, configuration: PayPalConfiguration): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Start PayPal UI to collect payment from the user.\r\n     * See https://developer.paypal.com/webapps/developer/docs/integration/mobile/ios-integration-guide/\r\n     * for more documentation of the params.\r\n     *\r\n     * @param {PayPalPayment} payment PayPalPayment object\r\n     * @returns {Promise<any>}\r\n     */\r\n    renderSinglePaymentUI(payment: PayPalPayment): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Once a user has consented to future payments, when the user subsequently initiates a PayPal payment\r\n     * from their device to be completed by your server, PayPal uses a Correlation ID to verify that the\r\n     * payment is originating from a valid, user-consented device+application.\r\n     * This helps reduce fraud and decrease declines.\r\n     * This method MUST be called prior to initiating a pre-consented payment (a \"future payment\") from a mobile device.\r\n     * Pass the result to your server, to include in the payment request sent to PayPal.\r\n     * Do not otherwise cache or store this value.\r\n     * @returns {Promise<any>}\r\n     */\r\n    clientMetadataID(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Please Read Docs on Future Payments at https://github.com/paypal/PayPal-iOS-SDK#future-payments\r\n     * @returns {Promise<any>}\r\n     */\r\n    renderFuturePaymentUI(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Please Read Docs on Profile Sharing at https://github.com/paypal/PayPal-iOS-SDK#profile-sharing\r\n     *\r\n     * @param {Array<string>} scopes scopes Set of requested scope-values. Accepted scopes are: openid, profile, address, email, phone, futurepayments and paypalattributes\r\n     * See https://developer.paypal.com/docs/integration/direct/identity/attributes/ for more details\r\n     * @returns {Promise<any>}\r\n     */\r\n    renderProfileSharingUI(scopes: string[]): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\nexport interface PayPalEnvironment {\r\n    PayPalEnvironmentProduction: string;\r\n    PayPalEnvironmentSandbox: string;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport declare class PayPalPayment {\r\n    constructor(amount: string, currency: string, shortDescription: string, intent: string, details?: PayPalPaymentDetails);\r\n    /**\r\n     * The amount of the payment.\r\n     */\r\n    amount: string;\r\n    /**\r\n     * The ISO 4217 currency for the payment.\r\n     */\r\n    currency: string;\r\n    /**\r\n     * A short description of the payment.\r\n     */\r\n    shortDescription: string;\r\n    /**\r\n     * \"Sale\" for an immediate payment.\r\n     */\r\n    intent: string;\r\n    /**\r\n     * Optional Build Notation code (\"BN code\"), obtained from partnerprogram@paypal.com,\r\n     * for your tracking purposes.\r\n     */\r\n    bnCode: string;\r\n    /**\r\n     * Optional invoice number, for your tracking purposes. (up to 256 characters)\r\n     */\r\n    invoiceNumber: string;\r\n    /**\r\n     * Optional text, for your tracking purposes. (up to 256 characters)\r\n     */\r\n    custom: string;\r\n    /**\r\n     * Optional text which will appear on the customer's credit card statement. (up to 22 characters)\r\n     */\r\n    softDescriptor: string;\r\n    /**\r\n     * Optional array of PayPalItem objects.\r\n     */\r\n    items: Array<PayPalItem>;\r\n    /**\r\n     * Optional customer shipping address, if your app wishes to provide this to the SDK.\r\n     */\r\n    shippingAddress: string;\r\n    /**\r\n     * Optional PayPalPaymentDetails object\r\n     */\r\n    details: PayPalPaymentDetails;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport declare class PayPalItem {\r\n    /**\r\n     * The PayPalItem class defines an optional itemization for a payment.\r\n     * @see https://developer.paypal.com/docs/api/#item-object for more details.\r\n     * @param {String} name: Name of the item. 127 characters max\r\n     * @param {Number} quantity: Number of units. 10 characters max.\r\n     * @param {String} price: Unit price for this item 10 characters max.\r\n     * May be negative for \"coupon\" etc\r\n     * @param {String} currency: ISO standard currency code.\r\n     * @param {String} sku: The stock keeping unit for this item. 50 characters max (optional)\r\n     */\r\n    constructor(name: string, quantity: number, price: string, currency: string, sku?: string);\r\n    /**\r\n     * Name of the item. 127 characters max\r\n     */\r\n    name: string;\r\n    /**\r\n     * Number of units. 10 characters max.\r\n     */\r\n    quantity: number;\r\n    /**\r\n     * Unit price for this item 10 characters max.\r\n     */\r\n    price: string;\r\n    /**\r\n     * ISO standard currency code.\r\n     */\r\n    currency: string;\r\n    /**\r\n     * The stock keeping unit for this item. 50 characters max (optional)\r\n     */\r\n    sku?: string;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport declare class PayPalPaymentDetails {\r\n    /**\r\n     * The PayPalPaymentDetails class defines optional amount details.\r\n     * @param {String} subtotal: Sub-total (amount) of items being paid for. 10 characters max with support for 2 decimal places.\r\n     * @param {String} shipping: Amount charged for shipping. 10 characters max with support for 2 decimal places.\r\n     * @param {String} tax: Amount charged for tax. 10 characters max with support for 2 decimal places.\r\n     */\r\n    constructor(subtotal: string, shipping: string, tax: string);\r\n    /**\r\n     * Sub-total (amount) of items being paid for. 10 characters max with support for 2 decimal places.\r\n     */\r\n    subtotal: string;\r\n    /**\r\n     * Amount charged for shipping. 10 characters max with support for 2 decimal places.\r\n     */\r\n    shipping: string;\r\n    /**\r\n     * Amount charged for tax. 10 characters max with support for 2 decimal places.\r\n     */\r\n    tax: string;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport interface PayPalConfigurationOptions {\r\n    /**\r\n     * Will be overridden by email used in most recent PayPal login.\r\n     */\r\n    defaultUserEmail?: string;\r\n    /**\r\n     * Will be overridden by phone country code used in most recent PayPal login\r\n     */\r\n    defaultUserPhoneCountryCode?: string;\r\n    /**\r\n     * Will be overridden by phone number used in most recent PayPal login.\r\n     */\r\n    defaultUserPhoneNumber?: string;\r\n    /**\r\n     * Your company name, as it should be displayed to the user when requesting consent via a PayPalFuturePaymentViewController.\r\n     */\r\n    merchantName?: string;\r\n    /**\r\n     * URL of your company's privacy policy, which will be offered to the user when requesting consent via a PayPalFuturePaymentViewController.\r\n     */\r\n    merchantPrivacyPolicyURL?: string;\r\n    /**\r\n     * URL of your company's user agreement, which will be offered to the user when requesting consent via a PayPalFuturePaymentViewController.\r\n     */\r\n    merchantUserAgreementURL?: string;\r\n    /**\r\n     * If set to NO, the SDK will only support paying with PayPal, not with credit cards.\r\n     * This applies only to single payments (via PayPalPaymentViewController).\r\n     * Future payments (via PayPalFuturePaymentViewController) always use PayPal.\r\n     * Defaults to true\r\n     */\r\n    acceptCreditCards?: boolean;\r\n    /**\r\n     * For single payments, options for the shipping address.\r\n     * - 0 - PayPalShippingAddressOptionNone: no shipping address applies.\r\n     * - 1 - PayPalShippingAddressOptionProvided: shipping address will be provided by your app,\r\n     *   in the shippingAddress property of PayPalPayment.\r\n     * - 2 - PayPalShippingAddressOptionPayPal: user will choose from shipping addresses on file\r\n     *   for their PayPal account.\r\n     * - 3 - PayPalShippingAddressOptionBoth: user will choose from the shipping address provided by your app,\r\n     *   in the shippingAddress property of PayPalPayment, plus the shipping addresses on file for the user's PayPal account.\r\n     * Defaults to 0 (PayPalShippingAddressOptionNone).\r\n     */\r\n    payPalShippingAddressOption?: number;\r\n    /**\r\n     * If set to YES, then if the user pays via their PayPal account,\r\n     * the SDK will remember the user's PayPal username or phone number;\r\n     * if the user pays via their credit card, then the SDK will remember\r\n     * the PayPal Vault token representing the user's credit card.\r\n     *\r\n     * If set to NO, then any previously-remembered username, phone number, or\r\n     * credit card token will be erased, and subsequent payment information will\r\n     * not be remembered.\r\n     *\r\n     * Defaults to YES.\r\n     */\r\n    rememberUser?: boolean;\r\n    /**\r\n     * If not set, or if set to nil, defaults to the device's current language setting.\r\n     *\r\n     * Can be specified as a language code (\"en\", \"fr\", \"zh-Hans\", etc.) or as a locale (\"en_AU\", \"fr_FR\", \"zh-Hant_HK\", etc.).\r\n     * If the library does not contain localized strings for a specified locale, then will fall back to the language. E.g., \"es_CO\" -> \"es\".\r\n     * If the library does not contain localized strings for a specified language, then will fall back to American English.\r\n     *\r\n     * If you specify only a language code, and that code matches the device's currently preferred language,\r\n     * then the library will attempt to use the device's current region as well.\r\n     * E.g., specifying \"en\" on a device set to \"English\" and \"United Kingdom\" will result in \"en_GB\".\r\n     */\r\n    languageOrLocale?: string;\r\n    /**\r\n     * Normally, the SDK blurs the screen when the app is backgrounded,\r\n     * to obscure credit card or PayPal account details in the iOS-saved screenshot.\r\n     * If your app already does its own blurring upon backgrounding, you might choose to disable this.\r\n     * Defaults to NO.\r\n     */\r\n    disableBlurWhenBackgrounding?: boolean;\r\n    /**\r\n     * If you will present the SDK's view controller within a popover, then set this property to YES.\r\n     * Defaults to NO. (iOS only)\r\n     */\r\n    presentingInPopover?: boolean;\r\n    /**\r\n     * Sandbox credentials can be difficult to type on a mobile device. Setting this flag to YES will\r\n     * cause the sandboxUserPassword and sandboxUserPin to always be pre-populated into login fields.\r\n     */\r\n    forceDefaultsInSandbox?: boolean;\r\n    /**\r\n     * Password to use for sandbox if 'forceDefaultsInSandbox' is set.\r\n     */\r\n    sandboxUserPassword?: string;\r\n    /**\r\n     * PIN to use for sandbox if 'forceDefaultsInSandbox' is set.\r\n     */\r\n    sandboxUserPin?: string;\r\n    /**\r\n     * @hidden\r\n     */\r\n    [key: string]: any;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport declare class PayPalConfiguration implements PayPalConfigurationOptions {\r\n    /**\r\n     * You use a PayPalConfiguration object to configure many aspects of how the SDK behaves.\r\n     * see defaults for options available\r\n     */\r\n    constructor(options?: PayPalConfigurationOptions);\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport declare class PayPalShippingAddress {\r\n    /**\r\n     * See the documentation of the individual properties for more detail.\r\n     * @param {String} recipientName: Name of the recipient at this address. 50 characters max.\r\n     * @param {String} line1: Line 1 of the address (e.g., Number, street, etc). 100 characters max.\r\n     * @param {String} line2: Line 2 of the address (e.g., Suite, apt #, etc). 100 characters max. Optional.\r\n     * @param {String} city: City name. 50 characters max.\r\n     * @param {String} state: 2-letter code for US states, and the equivalent for other countries. 100 characters max. Required in certain countries.\r\n     * @param {String} postalCode: ZIP code or equivalent is usually required for countries that have them. 20 characters max. Required in certain countries.\r\n     * @param {String} countryCode: 2-letter country code. 2 characters max.\r\n     */\r\n    constructor(recipientName: string, line1: string, line2: string, city: string, state: string, postalCode: string, countryCode: string);\r\n    /**\r\n     * Name of the recipient at this address. 50 characters max.\r\n     */\r\n    recipientName: string;\r\n    /**\r\n     * Line 1 of the address (e.g., Number, street, etc). 100 characters max.\r\n     */\r\n    line1: string;\r\n    /**\r\n     * Line 2 of the address (e.g., Suite, apt #, etc). 100 characters max. Optional.\r\n     */\r\n    line2: string;\r\n    /**\r\n     * City name. 50 characters max.\r\n     */\r\n    city: string;\r\n    /**\r\n     * 2-letter code for US states, and the equivalent for other countries. 100 characters max. Required in certain countries.\r\n     */\r\n    state: string;\r\n    /**\r\n     * ZIP code or equivalent is usually required for countries that have them. 20 characters max. Required in certain countries.\r\n     */\r\n    postalCode: string;\r\n    /**\r\n     * 2-letter country code. 2 characters max.\r\n     */\r\n    countryCode: string;\r\n}\r\n"]}