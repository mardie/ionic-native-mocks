{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/launch-navigator/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,gCAAgC,CAAC;AA+CjE;IAAyC,uCAAe;IAAxD;;IAoHA,CAAC;IAnHG;;;;;OAKG;IACH,sCAAQ,GAAR,UAAS,WAA8B,EAAE,OAAgC;QACrE,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,4CAAc,GAAd,UAAe,GAAW;QACtB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,2CAAa,GAAb;QACI,IAAI,QAAQ,GAAkB,EAAE,CAAC;QACjC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,+CAAiB,GAAjB,UAAkB,GAAW;QACzB,IAAI,QAAQ,GAAW,EAAE,CAAC;QAC1B,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,gDAAkB,GAAlB,UAAmB,QAAgB;QAC/B,IAAI,QAAQ,GAAkB,EAAE,CAAC;QACjC,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,mDAAqB,GAArB,UAAsB,GAAW,EAAE,QAAgB;QAC1C,IAAI,QAAQ,GAAY,IAAI,CAAC;QAClC,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,+CAAiB,GAAjB,UAAkB,GAAW,EAAE,QAAgB;QAC3C,IAAI,QAAQ,GAAkB,EAAE,CAAC;QACjC,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,gDAAkB,GAAlB,UAAmB,GAAW,EAAE,QAAgB;QACvC,IAAI,QAAQ,GAAY,IAAI,CAAC;QAClC,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,2CAAa,GAAb,UAAc,GAAW,EAAE,QAAgB;QAClC,IAAI,QAAQ,GAAY,IAAI,CAAC;QAClC,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,+CAAiB,GAAjB,UAAkB,GAAW,EAAE,QAAgB;QAC3C,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC7B,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,8CAAgB,GAAhB,UAAiB,GAAW,EAAE,QAAgB;QAC1C,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC7B,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,wCAAU,GAAV,UAAW,WAA8B,EAAE,OAA+B,IAAS,CAAC;IAAA,CAAC;IAGzF,0BAAC;AAAD,CApHA,AAoHC,CApHwC,eAAe,GAoHvD","file":"index.js","sourceRoot":"","sourcesContent":["import { LaunchNavigator } from '@ionic-native/launch-navigator';\r\n\r\nexport interface LaunchNavigatorOptions {\r\n    /**\r\n     * name of the navigation app to use for directions. Specify using launchnavigator.APP constants. If not specified, defaults to User Selection.\r\n     */\r\n    app?: string;\r\n    /**\r\n     * nickname to display in app for destination. e.g. \"Bob's House\".\r\n     */\r\n    destinationName?: string;\r\n    /**\r\n     * Start point of the navigation\r\n     */\r\n    start?: string | number[];\r\n    /**\r\n     * nickname to display in app for start . e.g. \"My House\".\r\n     */\r\n    startName?: string;\r\n    /**\r\n     * Transportation mode for navigation: \"driving\", \"walking\" or \"transit\". Defaults to \"driving\" if not specified.\r\n     */\r\n    transportMode?: string;\r\n    /**\r\n     * If true, debug log output will be generated by the plugin. Defaults to false.\r\n     */\r\n    enableDebug?: boolean;\r\n    /**\r\n     * a key/value map of extra app-specific parameters. For example, to tell Google Maps on Android to display Satellite view in \"maps\" launch mode: `{\"t\": \"k\"}`\r\n     */\r\n    extras?: any;\r\n    /**\r\n     * (Android only) mode in which to open Google Maps app: \"maps\" or \"turn-by-turn\". Defaults to \"maps\" if not specified. Specify using launchnavigator.LAUNCH_MODE constants.\r\n     */\r\n    launchMode?: string;\r\n    /**\r\n     * text to display in the native picker which enables user to select which navigation app to launch. Defaults to \"Select app for navigation\" if not specified.\r\n     */\r\n    appSelectionDialogHeader?: string;\r\n    /**\r\n     * text to display for the cancel button in the native picker which enables user to select which navigation app to launch. Defaults to \"Cancel\" if not specified.\r\n     */\r\n    appSelectionCancelButton?: string;\r\n    successCallback?: Function;\r\n    errorCallback?: Function;\r\n}\r\n\r\nexport class LaunchNavigatorMock extends LaunchNavigator {\r\n    /**\r\n     * Launches navigator app\r\n     * @param destination {string|number[]} Location name or coordinates (as string or array)\r\n     * @param options {LaunchNavigatorOptions}\r\n     * @returns {Promise<any>}\r\n     */\r\n    navigate(destination: string | number[], options?: LaunchNavigatorOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Determines if the given app is installed and available on the current device.\r\n     * @param app {string}\r\n     * @returns {Promise<any>}\r\n     */\r\n    isAppAvailable(app: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Returns a list indicating which apps are installed and available on the current device.\r\n     * @returns {Promise<string[]>}\r\n     */\r\n    availableApps(): Promise<string[]> {\r\n        let response: Array<string> = [];\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Returns the display name of the specified app.\r\n     * @param app {string}\r\n     * @returns {string}\r\n     */\r\n    getAppDisplayName(app: string): string {\r\n        let response: string = '';\r\n        return response;\r\n    };\r\n    /**\r\n     * Returns list of supported apps on a given platform.\r\n     * @param platform {string}\r\n     * @returns {string[]}\r\n     */\r\n    getAppsForPlatform(platform: string): string[] {\r\n        let response: Array<string> = [];\r\n        return response;\r\n    };\r\n    /**\r\n     * Indicates if an app on a given platform supports specification of transport mode.\r\n     * @param app {string} specified as a string, you can use one of the constants, e.g `LaunchNavigator.APP.GOOGLE_MAPS`\r\n     * @param platform {string}\r\n     * @returns {boolean}\r\n     */\r\n    supportsTransportMode(app: string, platform: string): boolean {\r\n             let response: boolean = true;\r\n        return response;\r\n    };\r\n    /**\r\n     * Returns the list of transport modes supported by an app on a given platform.\r\n     * @param app {string}\r\n     * @param platform {string}\r\n     * @returns {string[]}\r\n     */\r\n    getTransportModes(app: string, platform: string): string[] {\r\n        let response: Array<string> = [];\r\n        return response;\r\n    };\r\n    /**\r\n     * Indicates if an app on a given platform supports specification of launch mode.\r\n     * Note that currently only Google Maps on Android does.\r\n     * @param app {string}\r\n     * @param platform {string}\r\n     * @returns {boolean}\r\n     */\r\n    supportsLaunchMode(app: string, platform: string): boolean {\r\n             let response: boolean = true;\r\n        return response;\r\n    };\r\n    /**\r\n     * Indicates if an app on a given platform supports specification of start location.\r\n     * @param app {string}\r\n     * @param platform {string}\r\n     * @returns {boolean}\r\n     */\r\n    supportsStart(app: string, platform: string): boolean {\r\n             let response: boolean = true;\r\n        return response;\r\n    };\r\n    /**\r\n     * @param app {string}\r\n     * @param platform {string}\r\n     * @returns {boolean}\r\n     */\r\n    supportsStartName(app: string, platform: string): boolean {\r\n        let response: boolean = true;\r\n        return response;\r\n    };\r\n    /**\r\n     * @param app {string}\r\n     * @param platform {string}\r\n     * @returns {boolean}\r\n     */\r\n    supportsDestName(app: string, platform: string): boolean {\r\n        let response: boolean = true;\r\n        return response;\r\n    };\r\n    /**\r\n     * @param destination {string | number[]}\r\n     * @param options {LaunchNavigatorOptions}\r\n     */\r\n    userSelect(destination: string | number[], options: LaunchNavigatorOptions): void {};\r\n    APP: any;\r\n    TRANSPORT_MODE: any;\r\n}\r\n"]}