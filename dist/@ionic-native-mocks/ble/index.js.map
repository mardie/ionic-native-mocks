{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/ble/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { BLE } from '@ionic-native/ble';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport class BLEMock extends BLE {\r\n  /**\r\n       * Scan and discover BLE peripherals for the specified amount of time.\r\n       *\r\n       * @usage\r\n       * ```\r\n       * BLE.scan([], 5).subscribe(device => {\r\n       *   console.log(JSON.stringify(device));\r\n       * });\r\n       * ```\r\n       * @param {string[]} services  List of service UUIDs to discover, or `[]` to find all devices\r\n       * @param {number} seconds  Number of seconds to run discovery\r\n       * @returns {Observable<any>} Returns an Observable that notifies of each peripheral that is discovered during the specified time.\r\n       */\r\n  scan(services: string[], seconds: number): Observable<any> {\r\n    return Observable.create( (observer: Observer<any>) => {\r\n      observer.next('');\r\n      observer.complete();\r\n    });\r\n  };\r\n  /**\r\n       * Scan and discover BLE peripherals until `stopScan` is called.\r\n       *\r\n       * @usage\r\n       * ```\r\n       * BLE.startScan([]).subscribe(device => {\r\n       *   console.log(JSON.stringify(device));\r\n       * });\r\n       *\r\n       * setTimeout(() => {\r\n       *   BLE.stopScan();\r\n       * }, 5000);\r\n       * ```\r\n       * @param {string[]} services  List of service UUIDs to discover, or `[]` to find all devices\r\n       * @returns {Observable<any>} Returns an Observable that notifies of each peripheral discovered.\r\n       */\r\n\r\n  startScan(services: string[]): Observable<any> {\r\n    return Observable.create(( observer: Observer<any>) => {\r\n      observer.next('');\r\n      observer.complete();\r\n    });\r\n  }\r\n  /**\r\n       * Scans for BLE devices. This function operates similarly to the `startScan` function, but allows you to specify extra options (like allowing duplicate device reports).\r\n       * @param {string[]} services  List of service UUIDs to discover, or `[]` to find all devices\r\n       * @param options {any}\r\n       * @returns {Observable<any>} Returns an Observable that notifies of each peripheral discovered.\r\n       */\r\n  startScanWithOptions(services: string[], options: { reportDuplicates?: boolean; } | any): Observable<any> {\r\n    return Observable.create( (observer: Observer<any>) => {\r\n      observer.next('');\r\n      observer.complete();\r\n    });\r\n  }\r\n  /**\r\n       * Stop a scan started by `startScan`.\r\n       *\r\n       * @usage\r\n       * ```\r\n       * BLE.startScan([]).subscribe(device => {\r\n       *   console.log(JSON.stringify(device));\r\n       * });\r\n       * setTimeout(() => {\r\n       *   BLE.stopScan().then(() => { console.log('scan stopped'); });\r\n       * }, 5000);\r\n       * ```\r\n       * @return returns a Promise.\r\n       */\r\n  stopScan(): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  }\r\n  /**\r\n       * Connect to a peripheral.\r\n       * @usage\r\n       * ```\r\n       *   BLE.connect('12:34:56:78:9A:BC').subscribe(peripheralData => {\r\n       *     console.log(peripheralData);\r\n       *   },\r\n       *   peripheralData => {\r\n       *     console.log('disconnected');\r\n       *   });\r\n       * ```\r\n       * @param deviceId {string}  UUID or MAC address of the peripheral\r\n       * @return Returns an Observable that notifies of connect/disconnect.\r\n       */ /**\r\n  * Disconnect from a peripheral.\r\n  * @usage\r\n  * ```\r\n  *   BLE.disconnect('12:34:56:78:9A:BC').then(() => {\r\n  *     console.log('Disconnected');\r\n  *   });\r\n  * ```\r\n  * @param deviceId {string}  UUID or MAC address of the peripheral\r\n  * @return Returns a Promise\r\n  */\r\n  connect(deviceId: string): Observable<any> {\r\n    return Observable.create( (observer: Observer<any>) => {\r\n      observer.next('');\r\n      observer.complete();\r\n    });\r\n  }\r\n  /**\r\n       * Disconnect from a peripheral.\r\n       * @usage\r\n       * ```\r\n       *   BLE.disconnect('12:34:56:78:9A:BC').then(() => {\r\n       *     console.log('Disconnected');\r\n       *   });\r\n       * ```\r\n       * @param deviceId {string}  UUID or MAC address of the peripheral\r\n       * @return Returns a Promise\r\n       */\r\n  disconnect(deviceId: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  };\r\n  /**\r\n       * Read the value of a characteristic.\r\n       *\r\n       * @param {string} deviceId  UUID or MAC address of the peripheral\r\n       * @param {string} serviceUUID  UUID of the BLE service\r\n       * @param {string} characteristicUUID  UUID of the BLE characteristic\r\n       * @return Returns a Promise\r\n       */\r\n  read(deviceId: string, serviceUUID: string, characteristicUUID: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  };\r\n  /**\r\n      * Write the value of a characteristic.\r\n      * @usage\r\n      * ```\r\n      * // send 1 byte to switch a light on\r\n      * var data = new Uint8Array(1);\r\n      * data[0] = 1;\r\n      * BLE.write(device_id, 'FF10', 'FF11', data.buffer);\r\n      *\r\n      * // send a 3 byte value with RGB color\r\n      * var data = new Uint8Array(3);\r\n      * data[0] = 0xFF;  // red\r\n      * data[0] = 0x00; // green\r\n      * data[0] = 0xFF; // blue\r\n      * BLE.write(device_id, 'ccc0', 'ccc1', data.buffer);\r\n      *\r\n      * // send a 32 bit integer\r\n      * var data = new Uint32Array(1);\r\n      * data[0] = counterInput.value;\r\n      * BLE.write(device_id, SERVICE, CHARACTERISTIC, data.buffer);\r\n      *\r\n      * ```\r\n      * @param {string} deviceId  UUID or MAC address of the peripheral\r\n      * @param {string} serviceUUID  UUID of the BLE service\r\n      * @param {string} characteristicUUID  UUID of the BLE characteristic\r\n      * @param {ArrayBuffer} value  Data to write to the characteristic, as an ArrayBuffer.\r\n      * @return Returns a Promise\r\n      */\r\n  write(deviceId: string, serviceUUID: string, characteristicUUID: string, value: ArrayBuffer): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  }\r\n  /**\r\n       * Write the value of a characteristic without waiting for confirmation from the peripheral.\r\n       *\r\n       * @param {string} deviceId  UUID or MAC address of the peripheral\r\n       * @param {string} serviceUUID  UUID of the BLE service\r\n       * @param {string} characteristicUUID  UUID of the BLE characteristic\r\n       * @param {ArrayBuffer} value  Data to write to the characteristic, as an ArrayBuffer.\r\n       * @return Returns a Promise\r\n       */\r\n  writeWithoutResponse(deviceId: string, serviceUUID: string, characteristicUUID: string, value: ArrayBuffer): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  }\r\n  /**\r\n      * Register to be notified when the value of a characteristic changes.\r\n      *\r\n      * @usage\r\n      * ```\r\n      * BLE.startNotification(device_id, 'FF10', 'FF11').subscribe(buffer => {\r\n      *   console.log(String.fromCharCode.apply(null, new Uint8Array(buffer));\r\n      * });\r\n      * ```\r\n      *\r\n      * @param {string} deviceId  UUID or MAC address of the peripheral\r\n      * @param {string} serviceUUID  UUID of the BLE service\r\n      * @param {string} characteristicUUID  UUID of the BLE characteristic\r\n      * @return Returns an Observable that notifies of characteristic changes.\r\n      */\r\n  startNotification(deviceId: string, serviceUUID: string, characteristicUUID: string): Observable<any> {\r\n    return Observable.create( (observer: Observer<any>) => {\r\n      observer.next('');\r\n      observer.complete();\r\n    });\r\n  }\r\n  /**\r\n      * Stop being notified when the value of a characteristic changes.\r\n      *\r\n      * @param {string} deviceId  UUID or MAC address of the peripheral\r\n      * @param {string} serviceUUID  UUID of the BLE service\r\n      * @param {string} characteristicUUID  UUID of the BLE characteristic\r\n      * @returns {Promise<any>}\r\n      */\r\n  stopNotification(deviceId: string, serviceUUID: string, characteristicUUID: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  }\r\n  /**\r\n      * Report the connection status.\r\n      *\r\n      * @usage\r\n      * ```\r\n      * BLE.isConnected('FFCA0B09-CB1D-4DC0-A1EF-31AFD3EDFB53').then(\r\n      *   () => { console.log('connected'); },\r\n      *   () => { console.log('not connected'); }\r\n      * );\r\n      * ```\r\n      * @param {string} deviceId  UUID or MAC address of the peripheral\r\n      * @returns {Promise<any>}\r\n      */\r\n  isConnected(deviceId: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  }\r\n  /**\r\n       * Report if bluetooth is enabled.\r\n       *\r\n       * @returns {Promise<any>} Returns a Promise that resolves if Bluetooth is enabled, and rejects if disabled.\r\n       */\r\n  isEnabled(): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  }\r\n  /**\r\n      * Open System Bluetooth settings (Android only).\r\n      *\r\n      * @returns {Promise<any>}\r\n      */\r\n  showBluetoothSettings(): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  }\r\n  /**\r\n     * Enable Bluetooth on the device (Android only).\r\n     *\r\n     * @returns {Promise<any>}\r\n     */\r\n  enable(): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  static readRSSI(deviceId: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  }\r\n}\r\n"]}