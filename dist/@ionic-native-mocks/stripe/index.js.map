{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/stripe/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAsB,MAAM,sBAAsB,CAAC;AA+ElE;IAAgC,8BAAM;IAAtC;;IAsFA,CAAC;IArFG;;;;OAIG;IACH,sCAAiB,GAAjB,UAAkB,cAAsB;QACpC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,oCAAe,GAAf,UAAgB,MAA6B;QACzC,IAAI,QAAQ,GAAuB;YAC/B,IAAI,EAAE;gBACF,KAAK,EAAE,EAAE;gBACT,SAAS,EAAE,EAAE;gBACb,QAAQ,EAAE,EAAE;gBACZ,OAAO,EAAE,EAAE;gBACX,KAAK,EAAE,EAAE;aACZ;YACD,OAAO,EAAE,EAAE;YACX,EAAE,EAAE,EAAE;YACN,IAAI,EAAE,EAAE;SACX,CAAC;QACF,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,2CAAsB,GAAtB,UAAuB,MAA+B;QAClD,IAAI,QAAQ,GAAW,EAAE,CAAC;QAC1B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,uCAAkB,GAAlB,UAAmB,UAAkB;QACjC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,gCAAW,GAAX,UAAY,GAAW;QACnB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,uCAAkB,GAAlB,UAAmB,QAAgB,EAAE,OAAe;QAChD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,gCAAW,GAAX,UAAY,UAAkB;QAC1B,IAAI,QAAQ,GAAW,EAAE,CAAC;QAC1B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,iBAAC;AAAD,CAtFA,AAsFC,CAtF+B,MAAM,GAsFrC","file":"index.js","sourceRoot":"","sourcesContent":["import { Stripe, StripeCardTokenRes } from '@ionic-native/stripe';\r\n\r\nexport interface StripeCardTokenParams {\r\n    /**\r\n     * Card number\r\n     */\r\n    number: string;\r\n    /**\r\n     * Expiry month\r\n     */\r\n    expMonth: number;\r\n    /**\r\n     * Expiry year\r\n     */\r\n    expYear: number;\r\n    /**\r\n     * CVC / CVV\r\n     */\r\n    cvc?: string;\r\n    /**\r\n     * Cardholder name\r\n     */\r\n    name?: string;\r\n    /**\r\n     * Address line 1\r\n     */\r\n    address_line1?: string;\r\n    /**\r\n     * Address line 2\r\n     */\r\n    address_line2?: string;\r\n    /**\r\n     * City\r\n     */\r\n    address_city?: string;\r\n    /**\r\n     * State / Province\r\n     */\r\n    address_state?: string;\r\n    /**\r\n     * Country\r\n     */\r\n    address_country?: string;\r\n    /**\r\n     * Postal code / ZIP Code\r\n     */\r\n    postal_code?: string;\r\n    /**\r\n     * 3-letter ISO code for currency\r\n     */\r\n    currency?: string;\r\n}\r\nexport interface StripeBankAccountParams {\r\n    /**\r\n     * Routing number.\r\n     */\r\n    routing_number: string;\r\n    /**\r\n     * Account number.\r\n     */\r\n    account_number: string;\r\n    /**\r\n     * Currency code. Example: `USD`.\r\n     */\r\n    currency: string;\r\n    /**\r\n     * Country code. Example: `US`.\r\n     */\r\n    country: string;\r\n    /**\r\n     * Account holder name.\r\n     */\r\n    account_holder_name?: string;\r\n    /**\r\n     * Account holder type. This can be `individual` or `company`.\r\n     */\r\n    account_holder_type?: string;\r\n}\r\n\r\nexport class StripeMock extends Stripe {\r\n    /**\r\n     * Set publishable key\r\n     * @param publishableKey {string} Publishable key\r\n     * @return {Promise<void>}\r\n     */\r\n    setPublishableKey(publishableKey: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Create Credit Card Token\r\n     * @param params {StripeCardTokenParams} Credit card information\r\n     * @return {Promise<string>} returns a promise that resolves with the token, or rejects with an error\r\n     */\r\n    createCardToken(params: StripeCardTokenParams): Promise<StripeCardTokenRes> {\r\n        let response: StripeCardTokenRes = {\r\n            card: {\r\n                brand: '',\r\n                exp_month: 42,\r\n                exp_year: 42,\r\n                funding: '',\r\n                last4: '',\r\n            },\r\n            created: '',\r\n            id: '',\r\n            type: ''\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Create a bank account token\r\n     * @param params {StripeBankAccountParams} Bank account information\r\n     * @return {Promise<string>} returns a promise that resolves with the token, or rejects with an error\r\n     */\r\n    createBankAccountToken(params: StripeBankAccountParams): Promise<string> {\r\n        let response: string = '';\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Validates a credit card number\r\n     * @param cardNumber {string} Credit card number\r\n     * @return {Promise<any>} returns a promise that resolves if the number is valid, and rejects if it's invalid\r\n     */\r\n    validateCardNumber(cardNumber: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Validates a CVC number\r\n     * @param cvc {string} CVC number\r\n     * @return {Promise<any>} returns a promise that resolves if the number is valid, and rejects if it's invalid\r\n     */\r\n    validateCVC(cvc: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Validates an expiry date\r\n     * @param expMonth {string} expiry month\r\n     * @param expYear {string} expiry year\r\n     * @return {Promise<any>} returns a promise that resolves if the date is valid, and rejects if it's invalid\r\n     */\r\n    validateExpiryDate(expMonth: string, expYear: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get a card type from card number\r\n     * @param cardNumber {string} Card number\r\n     * @return {Promise<string>} returns a promise that resolves with the credit card type\r\n     */\r\n    getCardType(cardNumber: string): Promise<string> {\r\n        let response: string = '';\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n}\r\n"]}