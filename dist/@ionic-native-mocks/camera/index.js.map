{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/camera/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAsF9C;IAAgC,8BAAM;IAAtC;;IAkEA,CAAC;IApBG;;;;OAIG;IACH,+BAAU,GAAV,UAAW,OAAuB;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;OAIG;IACH,4BAAO,GAAP;QACK,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACL,iBAAC;AAAD,CAlEA,AAkEC,CAlE+B,MAAM,GAkErC","file":"index.js","sourceRoot":"","sourcesContent":["import { Camera } from '@ionic-native/camera';\r\n\r\nexport interface CameraOptions {\r\n    /** Picture quality in range 0-100. Default is 50 */\r\n    quality?: number;\r\n    /**\r\n     * Choose the format of the return value.\r\n     * Defined in Camera.DestinationType. Default is FILE_URI.\r\n     *      DATA_URL : 0,   Return image as base64-encoded string,\r\n     *      FILE_URI : 1,   Return image file URI,\r\n     *      NATIVE_URI : 2  Return image native URI\r\n     *          (e.g., assets-library:// on iOS or content:// on Android)\r\n     */\r\n    destinationType?: number;\r\n    /**\r\n     * Set the source of the picture.\r\n     * Defined in Camera.PictureSourceType. Default is CAMERA.\r\n     *      PHOTOLIBRARY : 0,\r\n     *      CAMERA : 1,\r\n     *      SAVEDPHOTOALBUM : 2\r\n     */\r\n    sourceType?: number;\r\n    /** Allow simple editing of image before selection. */\r\n    allowEdit?: boolean;\r\n    /**\r\n     * Choose the returned image file's encoding.\r\n     * Defined in Camera.EncodingType. Default is JPEG\r\n     *      JPEG : 0    Return JPEG encoded image\r\n     *      PNG : 1     Return PNG encoded image\r\n     */\r\n    encodingType?: number;\r\n    /**\r\n     * Width in pixels to scale image. Must be used with targetHeight.\r\n     * Aspect ratio remains constant.\r\n    */\r\n    targetWidth?: number;\r\n    /**\r\n     * Height in pixels to scale image. Must be used with targetWidth.\r\n     * Aspect ratio remains constant.\r\n     */\r\n    targetHeight?: number;\r\n    /**\r\n     * Set the type of media to select from. Only works when PictureSourceType\r\n     * is PHOTOLIBRARY or SAVEDPHOTOALBUM. Defined in Camera.MediaType\r\n     *      PICTURE: 0      allow selection of still pictures only. DEFAULT.\r\n     *          Will return format specified via DestinationType\r\n     *      VIDEO: 1        allow selection of video only, WILL ALWAYS RETURN FILE_URI\r\n     *      ALLMEDIA : 2    allow selection from all media types\r\n     */\r\n    mediaType?: number;\r\n    /** Rotate the image to correct for the orientation of the device during capture. */\r\n    correctOrientation?: boolean;\r\n    /** Save the image to the photo album on the device after capture. */\r\n    saveToPhotoAlbum?: boolean;\r\n    /**\r\n     * Choose the camera to use (front- or back-facing).\r\n     * Defined in Camera.Direction. Default is BACK.\r\n     *      BACK: 0\r\n     *      FRONT: 1\r\n     */\r\n    cameraDirection?: number;\r\n    /** iOS-only options that specify popover location in iPad. Defined in CameraPopoverOptions. */\r\n    popoverOptions?: CameraPopoverOptions;\r\n}\r\n/**\r\n * iOS-only parameters that specify the anchor element location and arrow direction\r\n * of the popover when selecting images from an iPad's library or album.\r\n */\r\nexport interface CameraPopoverOptions {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    /**\r\n     * Direction the arrow on the popover should point. Defined in Camera.PopoverArrowDirection\r\n     * Matches iOS UIPopoverArrowDirection constants.\r\n     *      ARROW_UP : 1,\r\n     *      ARROW_DOWN : 2,\r\n     *      ARROW_LEFT : 4,\r\n     *      ARROW_RIGHT : 8,\r\n     *      ARROW_ANY : 15\r\n     */\r\n    arrowDir: number;\r\n}\r\n\r\n\r\nexport class CameraMock extends Camera {\r\n    DestinationType: {\r\n        DATA_URL: number;\r\n        FILE_URI: number;\r\n        NATIVE_URI: number;\r\n    };\r\n    /**\r\n     * Convenience constant\r\n     */\r\n    EncodingType: {\r\n        JPEG: number;\r\n        PNG: number;\r\n    };\r\n    /**\r\n     * Convenience constant\r\n     */\r\n    MediaType: {\r\n        PICTURE: number;\r\n        VIDEO: number;\r\n        ALLMEDIA: number;\r\n    };\r\n    /**\r\n     * Convenience constant\r\n     */\r\n    PictureSourceType: {\r\n        PHOTOLIBRARY: number;\r\n        CAMERA: number;\r\n        SAVEDPHOTOALBUM: number;\r\n    };\r\n    /**\r\n     * Convenience constant\r\n     */\r\n    PopoverArrowDirection: {\r\n        ARROW_UP: number;\r\n        ARROW_DOWN: number;\r\n        ARROW_LEFT: number;\r\n        ARROW_RIGHT: number;\r\n        ARROW_ANY: number;\r\n    };\r\n    /**\r\n     * Convenience constant\r\n     */\r\n    Direction: {\r\n        BACK: number;\r\n        FRONT: number;\r\n    };\r\n    /**\r\n     * Take a picture or video, or load one from the library.\r\n     * @param {CameraOptions} [options] Options that you want to pass to the camera. Encoding type, quality, etc. Platform-specific quirks are described in the [Cordova plugin docs](https://github.com/apache/cordova-plugin-camera#cameraoptions-errata-).\r\n     * @returns {Promise<any>} Returns a Promise that resolves with Base64 encoding of the image data, or the image file URI, depending on cameraOptions, otherwise rejects with an error.\r\n     */\r\n    getPicture(options?: CameraOptions): Promise<any> {\r\n         return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Remove intermediate image files that are kept in temporary storage after calling camera.getPicture.\r\n     * Applies only when the value of Camera.sourceType equals Camera.PictureSourceType.CAMERA and the Camera.destinationType equals Camera.DestinationType.FILE_URI.\r\n     * @returns {Promise<any>}\r\n     */\r\n    cleanup(): Promise<any> {\r\n         return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n}\r\n"]}