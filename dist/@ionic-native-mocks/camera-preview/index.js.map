{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/camera-preview/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { CameraPreview } from '@ionic-native/camera-preview';\r\n\r\nexport interface CameraPreviewDimensions {\r\n    /** The width of the camera preview, default to window.screen.width */\r\n    width?: number;\r\n    /** The height of the camera preview, default to window.screen.height */\r\n    height?: number;\r\n}\r\nexport interface CameraPreviewOptions {\r\n    /** The left edge in pixels, default 0 */\r\n    x?: number;\r\n    /** The top edge in pixels, default 0 */\r\n    y?: number;\r\n    /** The width in pixels, default window.screen.width */\r\n    width?: number;\r\n    /** The height in pixels, default window.screen.height */\r\n    height?: number;\r\n    /** Choose the camera to use 'front' or 'rear', default 'front' */\r\n    camera?: string;\r\n    /** Tap to take a photo, default true (picture quality by default : 85) */\r\n    tapPhoto?: boolean;\r\n    /** Preview box drag across the screen, default 'false' */\r\n    previewDrag?: boolean;\r\n    /** Preview box to the back of the webview (true => back, false => front) , default false */\r\n    toBack?: boolean;\r\n    /** Alpha channel of the preview box, float, [0,1], default 1 */\r\n    alpha?: number;\r\n}\r\nexport interface CameraPreviewPictureOptions {\r\n    /** The width in pixels, default 0 */\r\n    width?: number;\r\n    /** The height in pixels, default 0 */\r\n    height?: number;\r\n    /** The picture quality, 0 - 100, default 85 */\r\n    quality?: number;\r\n}\r\n\r\nexport class CameraPreviewMock extends CameraPreview {\r\n    FOCUS_MODE: {\r\n        FIXED: string;\r\n        AUTO: string;\r\n        CONTINUOUS: string;\r\n        CONTINUOUS_PICTURE: string;\r\n        CONTINUOUS_VIDEO: string;\r\n        EDOF: string;\r\n        INFINITY: string;\r\n        MACRO: string;\r\n    };\r\n    EXPOSURE_MODE: {\r\n        LOCK: string;\r\n        AUTO: string;\r\n        CONTINUOUS: string;\r\n        CUSTOM: string;\r\n    };\r\n    FLASH_MODE: {\r\n        OFF: string;\r\n        ON: string;\r\n        AUTO: string;\r\n        RED_EYE: string;\r\n        TORCH: string;\r\n    };\r\n    COLOR_EFFECT: {\r\n        AQUA: string;\r\n        BLACKBOARD: string;\r\n        MONO: string;\r\n        NEGATIVE: string;\r\n        NONE: string;\r\n        POSTERIZE: string;\r\n        SEPIA: string;\r\n        SOLARIZE: string;\r\n        WHITEBOARD: string;\r\n    };\r\n    CAMERA_DIRECTION: {\r\n        BACK: string;\r\n        FRONT: string;\r\n    };\r\n    /**\r\n     * Starts the camera preview instance.\r\n     * @param {CameraPreviewOptions} options\r\n     * @return {Promise<any>}\r\n     */\r\n    startCamera(options: CameraPreviewOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Stops the camera preview instance. (iOS & Android)\r\n     * @return {Promise<any>}\r\n     */\r\n    stopCamera(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Switch from the rear camera and front camera, if available.\r\n     * @return {Promise<any>}\r\n     */\r\n    switchCamera(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Hide the camera preview box.\r\n     * @return {Promise<any>}\r\n     */\r\n    hide(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Show the camera preview box.\r\n     * @return {Promise<any>}\r\n     */\r\n    show(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Take the picture (base64)\r\n     * @param [options] {CameraPreviewPictureOptions} size and quality of the picture to take\r\n     * @return {Promise<any>}\r\n     */\r\n    takePicture(options?: CameraPreviewPictureOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * Set camera color effect.\r\n     * @static\r\n     * @param {string} effect name : 'none' (iOS & Android), 'aqua' (Android), 'blackboard' (Android), 'mono' (iOS & Android), 'negative' (iOS & Android), 'posterize' (iOS & Android), 'sepia' (iOS & Android), 'solarize' (Android) or 'whiteboard' (Android)\r\n     * @return {Promise<any>}\r\n     */\r\n    setColorEffect(effect: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Set the zoom (Android)\r\n     * @param [zoom] {number} Zoom value\r\n     * @return {Promise<any>}\r\n     */\r\n    setZoom(zoom?: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n       * Get the maximum zoom (Android)\r\n       * @return {Promise<any>}\r\n       */\r\n    getMaxZoom(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get current zoom (Android)\r\n     * @return {Promise<any>}\r\n     */\r\n    getZoom(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Set the preview Size\r\n     * @param [dimensions] {CameraPreviewDimensions}\r\n     * @return {Promise<any>}\r\n     */\r\n    setPreviewSize(dimensions?: CameraPreviewDimensions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get focus mode\r\n     * @return {Promise<any>}\r\n     */\r\n    getFocusMode(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Set the focus mode\r\n     * @param [focusMode] {string} 'fixed', 'auto', 'continuous-picture', 'continuous-video' (iOS & Android), 'edof', 'infinity', 'macro' (Android Only)\r\n     * @return {Promise<any>}\r\n     */\r\n    setFocusMode(focusMode?: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get supported focus modes\r\n     * @return {Promise<any>}\r\n     */\r\n    getSupportedFocusModes(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get the current flash mode\r\n     * @return {Promise<any>}\r\n     */\r\n    getFlashMode(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Set the flashmode\r\n     * @param [flashMode] {string} 'off' (iOS & Android), 'on' (iOS & Android), 'auto' (iOS & Android), 'torch' (Android)\r\n     * @return {Promise<any>}\r\n     */\r\n    setFlashMode(flashMode?: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get supported flash modes\r\n     * @return {Promise<any>}\r\n     */\r\n    getSupportedFlashModes(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get supported picture sizes\r\n     * @return {Promise<any>}\r\n     */\r\n    getSupportedPictureSizes(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get exposure mode\r\n     * @return {Promise<any>}\r\n     */\r\n    getExposureMode(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get exposure modes\r\n     * @return {Promise<any>}\r\n     */\r\n    getExposureModes(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Set exposure mode\r\n     * @param [lock] {string}\r\n     * @return {Promise<any>}\r\n     */\r\n    setExposureMode(lock?: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get exposure compensation (Android)\r\n     * @return {Promise<any>}\r\n     */\r\n    getExposureCompensation(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Set exposure compensation (Android)\r\n     * @param [exposureCompensation] {number}\r\n     * @return {Promise<any>}\r\n     */\r\n    setExposureCompensation(exposureCompensation?: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get exposure compensation range (Android)\r\n     * @return {Promise<any>}\r\n     */\r\n    getExposureCompensationRange(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Set specific focus point. Note, this assumes the camera is full-screen.\r\n     * @param xPoint {number}\r\n     * @param yPoint {number}\r\n     * @return {Promise<any>}\r\n     */\r\n    tapToFocus(xPoint: number, yPoint: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}