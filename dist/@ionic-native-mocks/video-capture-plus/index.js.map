{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/video-capture-plus/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,kCAAkC,CAAC;AAoFpE;IAA0C,wCAAgB;IAA1D;;IAYA,CAAC;IAXG;;;;OAIG;IACH,2CAAY,GAAZ,UAAa,OAAiC;QAC1C,IAAI,QAAQ,GAAqB,EAAE,CAAC;QACpC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,2BAAC;AAAD,CAZA,AAYC,CAZyC,gBAAgB,GAYzD","file":"index.js","sourceRoot":"","sourcesContent":["import { VideoCapturePlus } from '@ionic-native/video-capture-plus';\r\n\r\nexport interface MediaFile {\r\n    /**\r\n     * The name of the file, without path information.\r\n     */\r\n    name: string;\r\n    /**\r\n     * The full path of the file, including the name.\r\n     */\r\n    fullPath: string;\r\n    /**\r\n     * The file's mime type\r\n     */\r\n    type: string;\r\n    /**\r\n     * The date and time when the file was last modified.\r\n     */\r\n    lastModifiedDate: Date;\r\n    /**\r\n     * The size of the file, in bytes.\r\n     */\r\n    size: number;\r\n    /**\r\n     * Retrieves the format information of the media file.\r\n     * @param {Function} successCallback\r\n     * @param {Function} [errorCallback]\r\n     */\r\n    getFormatData(successCallback: (data: MediaFileData) => any, errorCallback?: (err: any) => any): any;\r\n}\r\nexport interface MediaFileData {\r\n    /**\r\n     * The actual format of the audio and video content.\r\n     */\r\n    codecs: string;\r\n    /**\r\n     * The average bitrate of the content. The value is zero for images.\r\n     */\r\n    bitrate: number;\r\n    /**\r\n     * The height of the image or video in pixels. The value is zero for audio clips.\r\n     */\r\n    height: number;\r\n    /**\r\n     * The width of the image or video in pixels. The value is zero for audio clips.\r\n     */\r\n    width: number;\r\n    /**\r\n     * The length of the video or sound clip in seconds. The value is zero for images.\r\n     */\r\n    duration: number;\r\n}\r\nexport interface VideoCapturePlusOptions {\r\n    /**\r\n    * The number of videos to record, default 1 (on iOS always 1)\r\n    */\r\n    limit?: number;\r\n    /**\r\n    * Max duration in seconds, default 0, which is 'forever'\r\n    */\r\n    duration?: number;\r\n    /**\r\n    * Set to true to override the default low quality setting\r\n    */\r\n    highquality?: boolean;\r\n    /**\r\n    * Set to true to override the default backfacing camera setting.\r\n    * You'll want to sniff the useragent/device and pass the best overlay based on that.. assuming iphone here\r\n    */\r\n    frontcamera?: boolean;\r\n    /**\r\n    * put the png overlay in your assets folder\r\n    */\r\n    portraitOverlay?: string;\r\n    /**\r\n    *  not passing an overlay means no image is shown for the landscape orientation\r\n    */\r\n    landscapeOverlay?: string;\r\n    /**\r\n    * iOS only\r\n    */\r\n    overlayText?: string;\r\n}\r\n\r\nexport class VideoCapturePlusMock extends VideoCapturePlus {\r\n    /**\r\n     * Starts recordings\r\n     * @param [options] {VideoCapturePlusOptions} Configure options\r\n     * @return {Promise<MediaFile[]>}\r\n     */\r\n    captureVideo(options?: VideoCapturePlusOptions): Promise<MediaFile[]> {\r\n        let response: Array<MediaFile> = [];\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n}\r\n"]}