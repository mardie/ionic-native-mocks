{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/file-transfer/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,YAAY,EAAE,kBAAkB,EAAE,MAAM,6BAA6B,CAAC;AA2F/E;IAAsC,oCAAY;IAAlD;;IAyBA,CAAC;IAPG;;;OAGG;IACH,iCAAM,GAAN;QACI,MAAM,CAAC,IAAI,sBAAsB,EAAE,CAAC;IACxC,CAAC;IAAA,CAAC;IACN,uBAAC;AAAD,CAzBA,AAyBC,CAzBqC,YAAY,GAyBjD;;AACD;;GAEG;AACH;IAA4C,0CAAkB;IAC3D,2BAA2B;IAC1B;eACI,iBAAO;IACX,CAAC;IAAA,CAAC;IAEF;;;;;;;;OAQG;IACH,uCAAM,GAAN,UAAO,OAAe,EAAE,GAAW,EAAE,OAA2B,EAAE,aAAuB;QACrF,IAAI,QAA0B,CAAC;QAC/B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;;OAQG;IACH,yCAAQ,GAAR,UAAS,MAAc,EAAE,MAAc,EAAE,aAAuB,EAAE,OAEjE;QACG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,2CAAU,GAAV,UAAW,QAAuC,IAAS,CAAC;IAAA,CAAC;IAC7D;;;OAGG;IACH,sCAAK,GAAL,cAAe,CAAC;IAAA,CAAC;IACrB,6BAAC;AAAD,CA/CA,AA+CC,CA/C2C,kBAAkB,GA+C7D","file":"index.js","sourceRoot":"","sourcesContent":["import { FileTransfer, FileTransferObject } from '@ionic-native/file-transfer';\r\n\r\nexport interface FileUploadOptions {\r\n    /**\r\n     * The name of the form element.\r\n     * Defaults to 'file'.\r\n     */\r\n    fileKey?: string;\r\n    /**\r\n     * The file name to use when saving the file on the server.\r\n     * Defaults to 'image.jpg'.\r\n     */\r\n    fileName?: string;\r\n    /**\r\n     * The HTTP method to use - either PUT or POST.\r\n     * Defaults to POST.\r\n     */\r\n    httpMethod?: string;\r\n    /**\r\n     * The mime type of the data to upload.\r\n     * Defaults to image/jpeg.\r\n     */\r\n    mimeType?: string;\r\n    /**\r\n     * A set of optional key/value pairs to pass in the HTTP request.\r\n     */\r\n    params?: {\r\n        [s: string]: any;\r\n    };\r\n    /**\r\n     * Whether to upload the data in chunked streaming mode.\r\n     * Defaults to true.\r\n     */\r\n    chunkedMode?: boolean;\r\n    /**\r\n     * A map of header name/header values. Use an array to specify more\r\n     * than one value. On iOS, FireOS, and Android, if a header named\r\n     * Content-Type is present, multipart form data will NOT be used.\r\n     */\r\n    headers?: {\r\n        [s: string]: any;\r\n    };\r\n}\r\nexport interface FileUploadResult {\r\n    /**\r\n     * The number of bytes sent to the server as part of the upload.\r\n     */\r\n    bytesSent: number;\r\n    /**\r\n     * The HTTP response code returned by the server.\r\n     */\r\n    responseCode: number;\r\n    /**\r\n     * The HTTP response returned by the server.\r\n     */\r\n    response: string;\r\n    /**\r\n     * The HTTP response headers by the server.\r\n     */\r\n    headers: {\r\n        [s: string]: any;\r\n    };\r\n}\r\nexport interface FileTransferError {\r\n    /**\r\n     * One of the predefined error codes listed below.\r\n     */\r\n    code: number;\r\n    /**\r\n     * URL to the source.\r\n     */\r\n    source: string;\r\n    /**\r\n     * URL to the target.\r\n     */\r\n    target: string;\r\n    /**\r\n     * HTTP status code. This attribute is only available when a response\r\n     * code is received from the HTTP connection.\r\n     */\r\n    http_status: number;\r\n    /**\r\n     * Response body. This attribute is only available when a response is received from the HTTP connection.\r\n     */\r\n    body: string;\r\n    /**\r\n     * Either e.getMessage or e.toString.\r\n     */\r\n    exception: string;\r\n}\r\n\r\nexport class FileTransferMock extends FileTransfer {\r\n    /**\r\n     * Error code rejected from upload with FileTransferError\r\n     * Defined in FileTransferError.\r\n     *      FILE_NOT_FOUND_ERR: 1   Return when file was not found\r\n     *      INVALID_URL_ERR: 2,     Return when url was invalid\r\n     *      CONNECTION_ERR: 3,      Return on connection error\r\n     *      ABORT_ERR: 4,           Return on aborting\r\n     *      NOT_MODIFIED_ERR: 5     Return on '304 Not Modified' HTTP response\r\n     * @enum {number}\r\n     */\r\n    FileTransferErrorCode: {\r\n        FILE_NOT_FOUND_ERR: number;\r\n        INVALID_URL_ERR: number;\r\n        CONNECTION_ERR: number;\r\n        ABORT_ERR: number;\r\n        NOT_MODIFIED_ERR: number;\r\n    };\r\n    /**\r\n     * Creates a new FileTransfer object\r\n     * @return {FileTransferObject}\r\n     */\r\n    create(): FileTransferObjectMock {\r\n        return new FileTransferObjectMock();\r\n    };\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport class FileTransferObjectMock extends FileTransferObject {\r\n   // private _objectInstance;\r\n    constructor() {\r\n        super();\r\n    };\r\n\r\n    /**\r\n     * Sends a file to a server.\r\n     *\r\n     * @param {string} fileUrl  Filesystem URL representing the file on the device or a data URI. For backwards compatibility, this can also be the full path of the file on the device.\r\n     * @param {string} url  URL of the server to receive the file, as encoded by encodeURI().\r\n     * @param {FileUploadOptions} options  Optional parameters.\r\n     * @param {boolean} trustAllHosts  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful since Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\r\n     * @returns {Promise<FileUploadResult>} Returns a Promise that resolves to a FileUploadResult and rejects with FileTransferError.\r\n     */\r\n    upload(fileUrl: string, url: string, options?: FileUploadOptions, trustAllHosts?: boolean): Promise<FileUploadResult> {\r\n        let response: FileUploadResult;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Downloads a file from server.\r\n     *\r\n     * @param {string} source  URL of the server to download the file, as encoded by encodeURI().\r\n     * @param {string} target  Filesystem url representing the file on the device. For backwards compatibility, this can also be the full path of the file on the device.\r\n     * @param {boolean} trustAllHosts  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful because Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\r\n     * @param {object} Optional parameters, currently only supports headers (such as Authorization (Basic Authentication), etc).\r\n     * @returns {Promise<any>} Returns a Promise that resolves to a FileEntry object.\r\n     */\r\n    download(source: string, target: string, trustAllHosts?: boolean, options?: {\r\n        [s: string]: any;\r\n    }): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Registers a listener that gets called whenever a new chunk of data is transferred.\r\n     * @param listener {function} Listener that takes a progress event.\r\n     */\r\n    onProgress(listener: (event: ProgressEvent) => any): void {};\r\n    /**\r\n     * Aborts an in-progress transfer. The onerror callback is passed a FileTransferError\r\n     * object which has an error code of FileTransferError.ABORT_ERR.\r\n     */\r\n    abort(): void {};\r\n}\r\n"]}