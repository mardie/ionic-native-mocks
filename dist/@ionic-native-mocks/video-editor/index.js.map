{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/video-editor/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,4BAA4B,CAAC;AA+EzD;IAAqC,mCAAW;IAAhD;;IAuDA,CAAC;IA5CG;;;;OAIG;IACH,wCAAc,GAAd,UAAe,OAAyB;QACpC,IAAI,QAAQ,GAAW,EAAE,CAAC;QAC1B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,8BAAI,GAAJ,UAAK,OAAoB;QACrB,IAAI,QAAQ,GAAW,EAAE,CAAC;QAC1B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,yCAAe,GAAf,UAAgB,OAA+B;QAC3C,IAAI,QAAQ,GAAW,EAAE,CAAC;QAC1B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,sCAAY,GAAZ,UAAa,OAA4B;QACrC,IAAI,QAAmB,CAAC;QACxB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,sBAAC;AAAD,CAvDA,AAuDC,CAvDoC,WAAW,GAuD/C","file":"index.js","sourceRoot":"","sourcesContent":["import { VideoEditor } from '@ionic-native/video-editor';\r\n\r\nexport interface TranscodeOptions {\r\n    /** The path to the video on the device. */\r\n    fileUri: string;\r\n    /** The file name for the transcoded video */\r\n    outputFileName: string;\r\n    /** Instructions on how to encode the video. Android is always mp4 */\r\n    outputFileType?: number;\r\n    /** Should the video be processed with quailty or speed in mind. iOS only */\r\n    optimizeForNetworkUse?: number;\r\n    /** Save the new video the library. Not supported in windows. Defaults to true */\r\n    saveToLibrary?: boolean;\r\n    /** Delete the original video. Android only. Defaults to false */\r\n    deleteInputFile?: boolean;\r\n    /** iOS only. Defaults to true */\r\n    maintainAspectRatio?: boolean;\r\n    /** Width of the result */\r\n    width?: number;\r\n    /** Height of the result */\r\n    height?: number;\r\n    /** Bitrate in bits. Defaults to 1 megabit (1000000). */\r\n    videoBitrate?: number;\r\n    /** Frames per second of the result. Android only. Defaults to 24. */\r\n    fps?: number;\r\n    /** Number of audio channels. iOS only. Defaults to 2. */\r\n    audioChannels?: number;\r\n    /** Sample rate for the audio. iOS only. Defaults to 44100*/\r\n    audioSampleRate?: number;\r\n    /** Sample rate for the audio. iOS only. Defaults to 128 kilobits (128000). */\r\n    audioBitrate?: number;\r\n    /** Not supported in windows, progress on the transcode. info will be a number from 0 to 100 */\r\n    progress?: (info: number) => void;\r\n}\r\nexport interface TrimOptions {\r\n    /** Path to input video. */\r\n    fileUri: string;\r\n    /** Time to start trimming in seconds */\r\n    trimStart: number;\r\n    /** Time to end trimming in seconds */\r\n    trimEnd: number;\r\n    /** Output file name */\r\n    outputFileName: string;\r\n    /** Progress on transcode. info will be a number from 0 to 100 */\r\n    progress?: (info: any) => void;\r\n}\r\nexport interface CreateThumbnailOptions {\r\n    /** The path to the video on the device */\r\n    fileUri: string;\r\n    /** The file name for the JPEG image */\r\n    outputFileName: string;\r\n    /** Location in the video to create the thumbnail (in seconds) */\r\n    atTime?: number;\r\n    /** Width of the thumbnail. */\r\n    width?: number;\r\n    /** Height of the thumbnail. */\r\n    height?: number;\r\n    /** Quality of the thumbnail (between 1 and 100). */\r\n    quality?: number;\r\n}\r\nexport interface GetVideoInfoOptions {\r\n    /** The path to the video on the device. */\r\n    fileUri: string;\r\n}\r\nexport interface VideoInfo {\r\n    /** Width of the video in pixels. */\r\n    width: number;\r\n    /** Height of the video in pixels. */\r\n    height: number;\r\n    /** Orientation of the video. Will be either portrait or landscape. */\r\n    orientation: 'portrait' | 'landscape';\r\n    /** Duration of the video in seconds. */\r\n    duration: number;\r\n    /** Size of the video in bytes. */\r\n    size: number;\r\n    /** Bitrate of the video in bits per second. */\r\n    bitrate: number;\r\n}\r\n\r\nexport class VideoEditorMock extends VideoEditor {\r\n    OptimizeForNetworkUse: {\r\n        NO: number;\r\n        YES: number;\r\n    };\r\n    OutputFileType: {\r\n        M4V: number;\r\n        MPEG4: number;\r\n        M4A: number;\r\n        QUICK_TIME: number;\r\n    };\r\n    /**\r\n     * Transcode a video\r\n     * @param options {TranscodeOptions} Options\r\n     * @returns {Promise<string>} Returns a promise that resolves to the path of the transcoded video\r\n     */\r\n    transcodeVideo(options: TranscodeOptions): Promise<string> {\r\n        let response: string = '';\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Trim a video\r\n     * @param options {TrimOptions} Options\r\n     * @returns {Promise<string>} Returns a promise that resolves to the path of the trimmed video\r\n     */\r\n    trim(options: TrimOptions): Promise<string> {\r\n        let response: string = '';\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Create a JPEG thumbnail from a video\r\n     * @param options {CreateThumbnailOptions} Options\r\n     * @returns {Promise<string>} Returns a promise that resolves to the path to the jpeg image on the device\r\n     */\r\n    createThumbnail(options: CreateThumbnailOptions): Promise<string> {\r\n        let response: string = '';\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Get info on a video (width, height, orientation, duration, size, & bitrate)\r\n     * @param options {GetVideoInfoOptions} Options\r\n     * @returns {Promise<VideoInfo>} Returns a promise that resolves to an object containing info on the video\r\n     */\r\n    getVideoInfo(options: GetVideoInfoOptions): Promise<VideoInfo> {\r\n        let response: VideoInfo;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n}\r\n"]}