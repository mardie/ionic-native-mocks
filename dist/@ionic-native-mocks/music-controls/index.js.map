{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/music-controls/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,8BAA8B,CAAC;AAC7D,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAkB7C;IAAwC,sCAAa;IAArD;;IAqDA,CAAC;IApDG;;;;OAIG;IACH,mCAAM,GAAN,UAAO,OAA6B;QAChC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,oCAAO,GAAP;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,sCAAS,GAAT;QACI,IAAI,QAAa,CAAC;QAClB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;OAEG;IACH,mCAAM,GAAN,cAAiB,CAAC;IAAA,CAAC;IACnB;;;OAGG;IACH,4CAAe,GAAf,UAAgB,SAAkB,IAAU,CAAC;IAAA,CAAC;IAC9C;;;MAGE;IACF,0CAAa,GAAb,UAAc,IAGb,IAAU,CAAC;IAAA,CAAC;IACb;;;OAGG;IACH,8CAAiB,GAAjB,UAAkB,WAAoB,IAAU,CAAC;IAAA,CAAC;IACtD,yBAAC;AAAD,CArDA,AAqDC,CArDuC,aAAa,GAqDpD","file":"index.js","sourceRoot":"","sourcesContent":["import { MusicControls } from '@ionic-native/music-controls';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport interface MusicControlsOptions {\r\n    track: string;\r\n    artist: string;\r\n    cover: string;\r\n    isPlaying: boolean;\r\n    dismissable: boolean;\r\n    hasPrev: boolean;\r\n    hasNext: boolean;\r\n    hasClose: boolean;\r\n    album: string;\r\n    duration: number;\r\n    elapsed: number;\r\n    ticker: string;\r\n}\r\n\r\nexport class MusicControlsMocks extends MusicControls {\r\n    /**\r\n     * Create the media controls\r\n     * @param options {MusicControlsOptions}\r\n     * @returns {Promise<any>}\r\n     */\r\n    create(options: MusicControlsOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Destroy the media controller\r\n     * @returns {Promise<any>}\r\n     */\r\n    destroy(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Subscribe to the events of the media controller\r\n     * @returns {Observable<any>}\r\n     */\r\n    subscribe(): Observable<any> {\r\n        let response: any;\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next(response);\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Start listening for events, this enables the Observable from the subscribe method\r\n     */\r\n    listen(): void { };\r\n    /**\r\n     * Toggle play/pause:\r\n     * @param isPlaying {boolean}\r\n     */\r\n    updateIsPlaying(isPlaying: boolean): void { };\r\n    /**\r\n    * Update elapsed time, optionally toggle play/pause:\r\n    * @param args {Object}\r\n    */\r\n    updateElapsed(args: {\r\n        elapsed: string;\r\n        isPlaying: boolean;\r\n    }): void { };\r\n    /**\r\n     * Toggle dismissable:\r\n     * @param dismissable {boolean}\r\n     */\r\n    updateDismissable(dismissable: boolean): void { };\r\n}\r\n"]}