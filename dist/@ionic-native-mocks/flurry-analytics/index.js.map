{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/flurry-analytics/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,eAAe,EAAE,qBAAqB,EAAE,MAAM,gCAAgC,CAAC;AAuExF;;EAEE;AACF;IAA+C,6CAAqB;IAChE,2BAA2B;IAC3B,mCAAY,eAAoB;eAC5B,kBAAM,eAAe,CAAC;IAC1B,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,4CAAQ,GAAR,UAAS,SAAiB,EAAE,MAAY;QACpC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,mDAAe,GAAf,UAAgB,SAAiB,EAAE,MAAe;QAC9C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,iDAAa,GAAb,UAAc,SAAiB,EAAE,MAAe;QAC5C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,4CAAQ,GAAR,UAAS,IAAS,EAAE,OAAY;QAC5B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,+CAAW,GAAX;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,+CAAW,GAAX,UAAY,QAAiC,EAAE,OAAe;QAC1D,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,gDAAY,GAAZ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,8CAAU,GAAV;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,gCAAC;AAAD,CA1FA,AA0FC,CA1F8C,qBAAqB,GA0FnE;;AAED;IAA0C,wCAAe;IAAzD;;IAUA,CAAC;IATG;;;;OAIG;IACH,qCAAM,GAAN,UAAO,OAA+B;QAClC,IAAI,QAA+B,CAAC;QACpC,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACN,2BAAC;AAAD,CAVA,AAUC,CAVyC,eAAe,GAUxD","file":"index.js","sourceRoot":"","sourcesContent":["import { FlurryAnalytics, FlurryAnalyticsObject } from '@ionic-native/flurry-analytics';\r\n\r\nexport interface FlurryAnalyticsOptions {\r\n    /** Flurry API key is required */\r\n    appKey: string;\r\n    /**\r\n     * Overrides the version of the app\r\n     */\r\n    version?: string;\r\n    /**\r\n     * How long can the app be paused before a new session is created,\r\n     * must be less than or equal to five for Android devices\r\n     */\r\n    continueSessionSeconds?: number;\r\n    /**\r\n     * Set id of the user\r\n     */\r\n    userId?: string;\r\n    /**\r\n     * Set gender of the user\r\n     * Valid values are \"m\", \"M\", \"f\" and \"F\"\r\n     */\r\n    gender?: string;\r\n    /**\r\n     * Set age of the user\r\n     */\r\n    age?: number;\r\n    /**\r\n     * Set error for log\r\n     * Values: VERBOSE, DEBUG, INFO, WARN, ERROR\r\n     */\r\n    logLevel?: string;\r\n    /**\r\n     * Defaults to false\r\n     */\r\n    enableLogging?: boolean;\r\n    /**\r\n     * Should every event show up the app's log, defaults to true\r\n     */\r\n    enableEventLogging?: boolean;\r\n    /**\r\n     * Should app crashes be recorded in flurry, defaults to false, iOS only\r\n     */\r\n    enableCrashReporting?: boolean;\r\n    /**\r\n     * Should the session continue when the app is the background, defaults to false, iOS only\r\n     */\r\n    enableBackgroundSessions?: boolean;\r\n    /**\r\n     * Should data be pushed to flurry when the app closes, defaults to true, iOS only\r\n     */\r\n    reportSessionsOnClose?: boolean;\r\n    /**\r\n     * Should data be pushed to flurry when the app is paused, defaults to true, iOS only\r\n     */\r\n    reportSessionsOnPause?: boolean;\r\n}\r\nexport interface FlurryAnalyticsLocation {\r\n    latitude: number;\r\n    longitude: number;\r\n    /**\r\n     * Set altitude\r\n     * It is optional and use only for iOS\r\n     */\r\n    verticalAccuracy?: number;\r\n    /**\r\n     * Set radius about 2d point\r\n     * It is optional and use only for iOS\r\n     */\r\n    horizontalAccuracy?: number;\r\n}\r\n/**\r\n* @hidden\r\n*/\r\nexport class FlurryAnalyticsObjectMock extends FlurryAnalyticsObject {\r\n    // private _objectInstance;\r\n    constructor(_objectInstance: any) {\r\n        super(_objectInstance);\r\n    };\r\n    /**\r\n     * This function set the Event\r\n     * @param eventName {string} Name of the event\r\n     * @param [params] {Object} Optional params\r\n     * @return {Promise<any>} Returns a promise that resolves when event is sent\r\n     */\r\n    logEvent(eventName: string, params?: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Start a timed event\r\n     * @param eventName {string} Name of the event\r\n     * @param [params] {Object} Optional params\r\n     * @return {Promise<any>} Returns a promise that resolves when timed event is started tracking\r\n     */\r\n    startTimedEvent(eventName: string, params?: Object): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Complete a timed event\r\n     * @param eventName {string} Name of the event\r\n     * @param [params] {Object} Optional params\r\n     * @return {Promise<any>} Returns a promise that resolves when timed event is ended tracking\r\n     */\r\n    endTimedEvent(eventName: string, params?: Object): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * This function log an error\r\n     * @param code\r\n     * @param message\r\n     * @return {Promise<any>}\r\n     */\r\n    logError(code: any, message: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * This function log a page view\r\n     * @return {Promise<any>}\r\n     */\r\n    logPageView(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * This function set the location for the event\r\n     * (this is will only be used for very course grained statistics like city)\r\n     * @param location {FlurryAnalyticsLocation}\r\n     * @param message {string}\r\n     * @return {Promise<any>}\r\n     */\r\n    setLocation(location: FlurryAnalyticsLocation, message: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * This function start the session\r\n     * Only needed for older versions of Android\r\n     * @return {Promise<any>}\r\n     */\r\n    startSession(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * This function end the session\r\n     * Only needed for older versions of Android\r\n     * @return {Promise<any>}\r\n     */\r\n    endSession(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n\r\nexport class FlurryAnalyticsMocks extends FlurryAnalytics {\r\n    /**\r\n     * Creates a new instance of FlurryAnalyticsObject\r\n     * @param options {FlurryAnalyticsOptions} options\r\n     * @return {FlurryAnalyticsObject}\r\n     */\r\n    create(options: FlurryAnalyticsOptions): FlurryAnalyticsObject {\r\n        let response: FlurryAnalyticsObject;\r\n        return response;\r\n    };\r\n}\r\n"]}