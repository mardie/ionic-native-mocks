{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/web-intent/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AACrD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAG7C;IAAmC,iCAAS;IAA5C;;IA+JA,CAAC;IA5GG;;;;OAIG;IACH,qCAAa,GAAb,UAAc,OAIb;QACG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,8CAAsB,GAAtB,UAAuB,OAItB;QACG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,gCAAQ,GAAR,UAAS,KAAa;QAClB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,gCAAQ,GAAR,UAAS,KAAa;QAClB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,8BAAM,GAAN;QACI,IAAI,QAAQ,GAAW,EAAE,CAAC;QAC1B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;OAEG;IACH,mCAAW,GAAX;QACI,IAAI,QAAQ,GAAW,EAAE,CAAC;QAC1B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,qCAAa,GAAb,UAAc,OAKb;QACG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,iDAAyB,GAAzB,UAA0B,OAAY,IAAU,CAAC;IAAA,CAAC;IAClD;;OAEG;IACH,mDAA2B,GAA3B,cAAsC,CAAC;IAAA,CAAC;IACxC;;MAEE;IACF,gCAAQ,GAAR,cAAmB,CAAC;IAAA,CAAC;IACrB;;MAEE;IACF,wCAAgB,GAAhB,cAA2B,CAAC;IAAA,CAAC;IAC7B;;OAEG;IACH,iCAAS,GAAT;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,oBAAC;AAAD,CA/JA,AA+JC,CA/JkC,SAAS,GA+J3C","file":"index.js","sourceRoot":"","sourcesContent":["import { WebIntent } from '@ionic-native/web-intent';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport class WebIntentMock extends WebIntent {\r\n    /**\r\n     * Convenience constant for actions\r\n     * @type {string}\r\n     */\r\n    ACTION_SEND: string;\r\n    /**\r\n     * Convenience constant for actions\r\n     * @type {string}\r\n     */\r\n    ACTION_VIEW: string;\r\n    /**\r\n     * Convenience constant for extras\r\n     * @type {string}\r\n     */\r\n    EXTRA_TEXT: string;\r\n    /**\r\n     * Convenience constant for extras\r\n     * @type {string}\r\n     */\r\n    EXTRA_SUBJECT: string;\r\n    /**\r\n     * Convenience constant for extras\r\n     * @type {string}\r\n     */\r\n    EXTRA_STREAM: string;\r\n    /**\r\n     * Convenience constant for extras\r\n     * @type {string}\r\n     */\r\n    EXTRA_EMAIL: string;\r\n    /**\r\n     * Convenience constant for actions\r\n     * @type {string}\r\n     */\r\n    ACTION_CALL: string;\r\n    /**\r\n     * Convenience constant for actions\r\n     * @type {string}\r\n     */\r\n    ACTION_SENDTO: string;\r\n    /**\r\n     * Convenience constant for actions\r\n     * @type {string}\r\n     */\r\n    ACTION_GET_CONTENT: string;\r\n    /**\r\n     * Convenience constant for actions\r\n     * @type {string}\r\n     */\r\n    ACTION_PICK: string;\r\n    /**\r\n     * Launches an Android intent\r\n     * @param options {Object} { action: any, url: string, type?: string }\r\n     * @returns {Promise<any>}\r\n     */\r\n    startActivity(options: {\r\n        action: any;\r\n        url: string;\r\n        type?: string;\r\n    }): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Starts a new activity and return the result to the application\r\n     * @param options {Object} { action: any, url: string, type?: string }\r\n     * @returns {Promise<any>}\r\n     */\r\n    startActivityForResult(options: {\r\n        action: any;\r\n        url: string;\r\n        type?: string;\r\n    }): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Checks if this app was invoked with specified extra\r\n     * @param extra {string}\r\n     * @returns {Promise<any>}\r\n     */\r\n    hasExtra(extra: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Gets the extra that this app was invoked with\r\n     * @param extra {string}\r\n     * @returns {Promise<any>}\r\n     */\r\n    getExtra(extra: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Gets the Uri the app was invoked with\r\n     * @returns {Promise<any>}\r\n     */\r\n    getUri(): Promise<string> {\r\n        let response: string = '';\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * @returns {Observable<string>}\r\n     */\r\n    onNewIntent(): Observable<string> {\r\n        let response: string = '';\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next(response);\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Sends a custom intent passing optional extras\r\n     * @param options {Object} { action: string, extras?: { option: boolean } }\r\n     * @returns {Promise<any>}\r\n     */\r\n    sendBroadcast(options: {\r\n        action: string;\r\n        extras?: {\r\n            option: boolean;\r\n        };\r\n    }): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Registers a broadcast receiver for the specified filters\r\n     * @param filters {any}\r\n     */\r\n    registerBroadcastReceiver(filters: any): void { };\r\n    /**\r\n     * Unregisters a broadcast receiver\r\n     */\r\n    unregisterBroadcastReceiver(): void { };\r\n    /**\r\n    * Returns the content of the intent used whenever the application activity is launched\r\n    */\r\n    onIntent(): void { };\r\n    /**\r\n    *\r\n    */\r\n    onActivityResult(): void { };\r\n    /**\r\n     * @returns {Promise<any>}\r\n     */\r\n    getIntent(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}