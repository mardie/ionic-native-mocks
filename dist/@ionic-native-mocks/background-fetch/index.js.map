{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/background-fetch/index.ts"],"names":[],"mappings":";;;;;;;;;;AACA,OAAO,EAAE,eAAe,EAAE,MAAM,gCAAgC,CAAC;AAQjE;IAAyC,uCAAe;IAAxD;;IA4CA,CAAC;IA3CG;;;;;OAKG;IACH,uCAAS,GAAT,UAAU,MAA6B;QACnC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,mCAAK,GAAL;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,kCAAI,GAAJ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;OAEG;IACH,oCAAM,GAAN,cAAgB,CAAC;IAAA,CAAC;IAClB;;;OAGG;IACH,oCAAM,GAAN;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,0BAAC;AAAD,CA5CA,AA4CC,CA5CwC,eAAe,GA4CvD","file":"index.js","sourceRoot":"","sourcesContent":["\r\nimport { BackgroundFetch } from '@ionic-native/background-fetch';\r\nexport interface BackgroundFetchConfig {\r\n    /**\r\n     * Set true to cease background-fetch from operating after user \"closes\" the app. Defaults to true.\r\n     */\r\n    stopOnTerminate?: boolean;\r\n}\r\n\r\nexport class BackgroundFetchMock extends BackgroundFetch {\r\n    /**\r\n     * Configures the plugin's fetch callbackFn\r\n     *\r\n     * @param {BackgroundFetchConfig} config Configuration for plugin\r\n     * @return {Promise<any>}\r\n     */\r\n    configure(config: BackgroundFetchConfig): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Start the background-fetch API.\r\n     * Your callbackFn provided to #configure will be executed each time a background-fetch event occurs. NOTE the #configure method automatically calls #start. You do not have to call this method after you #configure the plugin\r\n     * @returns {Promise<any>}\r\n     */\r\n    start(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Stop the background-fetch API from firing fetch events. Your callbackFn provided to #configure will no longer be executed.\r\n     * @returns {Promise<any>}\r\n     */\r\n    stop(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * You MUST call this method in your fetch callbackFn provided to #configure in order to signal to iOS that your fetch action is complete. iOS provides only 30s of background-time for a fetch-event -- if you exceed this 30s, iOS will kill your app.\r\n     */\r\n    finish(): void {};\r\n    /**\r\n     * Return the status of the background-fetch\r\n     * @returns {Promise<any>}\r\n     */\r\n    status(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}