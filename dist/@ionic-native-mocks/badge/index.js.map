{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/badge/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAE5C;IAA+B,6BAAK;IAApC;;IAmEA,CAAC;IAlEG;;;OAGG;IACH,yBAAK,GAAL;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,uBAAG,GAAH,UAAI,WAAmB;QACnB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,uBAAG,GAAH;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,4BAAQ,GAAR,UAAS,UAAkB;QACvB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,4BAAQ,GAAR,UAAS,UAAkB;QACvB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,iCAAa,GAAb;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,sCAAkB,GAAlB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,gBAAC;AAAD,CAnEA,AAmEC,CAnE8B,KAAK,GAmEnC","file":"index.js","sourceRoot":"","sourcesContent":["import { Badge } from '@ionic-native/badge';\r\n\r\nexport class BadgeMOck extends Badge {\r\n    /**\r\n     * Clear the badge of the app icon.\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    clear(): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(true);\r\n        });\r\n    };\r\n    /**\r\n     * Set the badge of the app icon.\r\n     * @param {number} badgeNumber  The new badge number.\r\n     * @returns {Promise<any>}\r\n     */\r\n    set(badgeNumber: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get the badge of the app icon.\r\n     * @returns {Promise<any>}\r\n     */\r\n    get(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Increase the badge number.\r\n     * @param {number} increaseBy  Count to add to the current badge number\r\n     * @returns {Promise<any>}\r\n     */\r\n    increase(increaseBy: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Decrease the badge number.\r\n     * @param {number} decreaseBy  Count to subtract from the current badge number\r\n     * @returns {Promise<any>}\r\n     */\r\n    decrease(decreaseBy: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Determine if the app has permission to show badges.\r\n     * @returns {Promise<any>}\r\n     */\r\n    hasPermission(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Register permission to set badge notifications\r\n     * @returns {Promise<any>}\r\n     */\r\n    registerPermission(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}