{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/nfc/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,mBAAmB,CAAC;AACxC,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAG7C;IAA6B,2BAAG;IAAhC;;IAqKA,CAAC;IApKG;;;;;OAKG;IACH,iCAAe,GAAf,UAAgB,SAAoB,EAAE,SAAoB;QACtD,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,0CAAwB,GAAxB,UAAyB,SAAoB,EAAE,SAAoB;QAC/D,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,qCAAmB,GAAnB,UAAoB,QAAgB,EAAE,SAAoB,EAAE,SAAoB;QAC5E,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,2CAAyB,GAAzB,UAA0B,SAAoB,EAAE,SAAoB;QAChE,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,uBAAK,GAAL,UAAM,OAAc;QAChB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,+BAAa,GAAb;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,uBAAK,GAAL,UAAM,OAAc;QAChB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,yBAAO,GAAP;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;OAEG;IACH,uBAAK,GAAL;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,0BAAQ,GAAR,UAAS,IAAc;QACnB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,8BAAY,GAAZ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,8BAAY,GAAZ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,yBAAO,GAAP;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;MAGE;IACF;;;;OAIG;IACH,+BAAa,GAAb,UAAc,KAAe;QACzB,IAAI,QAAQ,GAAW,EAAE,CAAC;QAC1B,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,+BAAa,GAAb,UAAc,GAAW;QACrB,IAAI,QAAQ,GAAkB,EAAE,CAAC;QACjC,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,kCAAgB,GAAhB,UAAiB,KAAe;QAC5B,IAAI,QAAQ,GAAW,EAAE,CAAC;QAC1B,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACN,cAAC;AAAD,CArKA,AAqKC,CArK4B,GAAG,GAqK/B;;AACD;;GAEG;AACH;IAAA;IAKA,CAAC;IAJG,wBAAS,GAAT,UAAU,GAAW,IAAS,MAAM,CAAC,CAAC,CAAC;IAAA,CAAC;IACxC,yBAAU,GAAV,UAAW,IAAY,IAAS,MAAM,CAAC,CAAC,CAAC;IAAA,CAAC;IAC1C,8BAAe,GAAf,UAAgB,QAAgB,EAAE,OAAe,IAAS,MAAM,CAAC,CAAC,CAAC;IAAA,CAAC;IACpE,uCAAwB,GAAxB,UAAyB,WAAmB,IAAS,MAAM,CAAC,CAAC,CAAC;IAAA,CAAC;IACnE,WAAC;AAAD,CALA,AAKC,IAAA","file":"index.js","sourceRoot":"","sourcesContent":["import { NFC } from '@ionic-native/nfc';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport class NFCMock extends NFC {\r\n    /**\r\n     * Registers an event listener for any NDEF tag.\r\n     * @param onSuccess\r\n     * @param onFailure\r\n     * @returns {Observable<any>}\r\n     */\r\n    addNdefListener(onSuccess?: Function, onFailure?: Function): Observable<any> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Registers an event listener for tags matching any tag type.\r\n     * @param onSuccess\r\n     * @param onFailure\r\n     * @returns {Observable<any>}\r\n     */\r\n    addTagDiscoveredListener(onSuccess?: Function, onFailure?: Function): Observable<any> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Registers an event listener for NDEF tags matching a specified MIME type.\r\n     * @param mimeType\r\n     * @param onSuccess\r\n     * @param onFailure\r\n     * @returns {Observable<any>}\r\n     */\r\n    addMimeTypeListener(mimeType: string, onSuccess?: Function, onFailure?: Function): Observable<any> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Registers an event listener for formatable NDEF tags.\r\n     * @param onSuccess\r\n     * @param onFailure\r\n     * @returns {Observable<any>}\r\n     */\r\n    addNdefFormatableListener(onSuccess?: Function, onFailure?: Function): Observable<any> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Writes an NdefMessage(array of ndef records) to a NFC tag.\r\n     * @param message {any[]}\r\n     * @returns {Promise<any>}\r\n     */\r\n    write(message: any[]): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Makes a NFC tag read only. **Warning** this is permanent.\r\n     * @returns {Promise<any>}\r\n     */\r\n    makeReadyOnly(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Shares an NDEF Message(array of ndef records) via peer-to-peer.\r\n     * @param message An array of NDEF Records.\r\n     * @returns {Promise<any>}\r\n     */\r\n    share(message: any[]): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Stop sharing NDEF data via peer-to-peer.\r\n     * @returns {Promise<any>}\r\n     */\r\n    unshare(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Erase a NDEF tag\r\n     */\r\n    erase(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Send a file to another device via NFC handover.\r\n     * @param uris A URI as a String, or an array of URIs.\r\n     * @returns {Promise<any>}\r\n     */\r\n    handover(uris: string[]): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Stop sharing NDEF data via NFC handover.\r\n     * @returns {Promise<any>}\r\n     */\r\n    stopHandover(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Opens the device's NFC settings.\r\n     * @returns {Promise<any>}\r\n     */\r\n    showSettings(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Check if NFC is available and enabled on this device.\r\n     * @returns {Promise<any>}\r\n     */\r\n    enabled(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n    * @{ NFC } class utility methods\r\n    * for use with\r\n    */\r\n    /**\r\n     * Convert byte array to string\r\n     * @param bytes {number[]}\r\n     * @returns {string}\r\n     */\r\n    bytesToString(bytes: number[]): string {\r\n        let response: string = '';\r\n        return response;\r\n    };\r\n    /**\r\n     * Convert string to byte array.\r\n     * @param str {string}\r\n     * @returns {number[]}\r\n     */\r\n    stringToBytes(str: string): number[] {\r\n        let response: Array<number> = [];\r\n        return response;\r\n    };\r\n    /**\r\n     * Convert byte array to hex string\r\n     *\r\n     * @param bytes {number[]}\r\n     * @returns {string}\r\n     */\r\n    bytesToHexString(bytes: number[]): string {\r\n        let response: string = '';\r\n        return response;\r\n    };\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport class Ndef {\r\n    uriRecord(uri: string): any { return; };\r\n    textRecord(text: string): any { return; };\r\n    mimeMediaRecord(mimeType: string, payload: string): any { return; };\r\n    androidApplicationRecord(packageName: string): any { return; };\r\n}\r\n"]}