{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/gyroscope/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAiC7C;IAAmC,iCAAS;IAA5C;;IAwBA,CAAC;IAvBG;;;;OAIG;IACH,6BAAK,GAAL,UAAM,OAA0B;QAC5B,IAAI,QAA8B,CAAC;QACnC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,kCAAU,GAAV,UAAW,OAA0B;QACjC,IAAI,QAA8B,CAAC;QACnC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,oBAAC;AAAD,CAxBA,AAwBC,CAxBkC,SAAS,GAwB3C","file":"index.js","sourceRoot":"","sourcesContent":["import { Gyroscope } from '@ionic-native/gyroscope';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n/**\r\n *  @hidden\r\n */\r\nexport interface GyroscopeOrientation {\r\n    /**\r\n     *  Represent x-axis\r\n     */\r\n    x: number;\r\n    /**\r\n     *  Represent y-axis\r\n     */\r\n    y: number;\r\n    /**\r\n     *  Represent z-axis\r\n     */\r\n    z: number;\r\n    /**\r\n     *  Represent timestamp of sensor read. Default is 10000ms\r\n     */\r\n    timestamp: number;\r\n}\r\n/**\r\n *  @hidden\r\n */\r\nexport interface GyroscopeOptions {\r\n    /**\r\n     *  Represent how often (in milliseconds) sensor should be read.  Default is 10000 ms\r\n     */\r\n    frequency: number;\r\n}\r\n\r\nexport class GyroscopeMock extends Gyroscope {\r\n    /**\r\n     * Watching for gyroscope sensor changes\r\n     * @param {GyroscopeOptions} [options]\r\n     * @return {Observable<GyroscopeOrientation>} Returns an Observable that resolves GyroscopeOrientation\r\n     */\r\n    watch(options?: GyroscopeOptions): Observable<GyroscopeOrientation> {\r\n        let response: GyroscopeOrientation;\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next(response);\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Get current data from gyroscope sensor\r\n     * @param {GyroscopeOptions} [options]\r\n     * @return {Promise<GyroscopeOrientation>} Returns a promise that resolves GyroscopeOrientation\r\n     */\r\n    getCurrent(options?: GyroscopeOptions): Promise<GyroscopeOrientation> {\r\n        let response: GyroscopeOrientation;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n}\r\n"]}