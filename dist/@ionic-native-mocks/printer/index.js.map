{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/printer/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAkChD;IAAiC,+BAAO;IAAxC;;IAwCA,CAAC;IAvCG;;;OAGG;IACH,iCAAW,GAAX;QACI,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC5B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,2BAAK,GAAL;QACK,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,0BAAI,GAAJ;QACK,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,2BAAK,GAAL,UAAM,OAA6B,EAAE,OAAsB;QACtD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,kBAAC;AAAD,CAxCA,AAwCC,CAxCgC,OAAO,GAwCvC","file":"index.js","sourceRoot":"","sourcesContent":["import { Printer } from '@ionic-native/printer';\r\nexport interface PrintOptions {\r\n    /**\r\n     * The name of the print job and the document\r\n     */\r\n    name?: string;\r\n    /**\r\n     * The network URL of the printer.\r\n     * Only supported on iOS.\r\n     */\r\n    printerId?: string;\r\n    /**\r\n     * Specifies the duplex mode to use for the print job.\r\n     * Either double-sided (duplex:true) or single-sided (duplex:false).\r\n     * Double-sided by default.\r\n     * Only supported on iOS\r\n     */\r\n    duplex?: boolean;\r\n    /**\r\n     * The orientation of the printed content, portrait or landscape\r\n     * Portrait by default.\r\n     */\r\n    landscape?: boolean;\r\n    /**\r\n     * If your application only prints black text, setting this property to true can result in better performance in many cases.\r\n     * False by default.\r\n     */\r\n    grayscale?: boolean;\r\n    /**\r\n     * The Size and position of the print view\r\n     */\r\n    bounds?: number[] | any;\r\n}\r\n\r\nexport class PrinterMock extends Printer {\r\n    /**\r\n     * Checks whether the device is capable of printing (uses `check()` internally)\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    isAvailable(): Promise<boolean> {\r\n        let response: boolean = true;\r\n         return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Checks if the printer service is available (iOS) or if printer services are installed and enabled (Android).\r\n     * @return {Promise<any>} returns a promise that resolve with an object indicating whether printing is available, and providing the number of printers available\r\n     */\r\n    check(): Promise<any> {\r\n         return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Displays a system interface allowing the user to select an available printer. To speak with a printer directly you need to know the network address by picking them before via `printer.pick`.\r\n     * @returns {Promise<any>}\r\n     */\r\n    pick(): Promise<any> {\r\n         return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Sends content to the printer.\r\n     * @param content {string | HTMLElement} The content to print. Can be a URL or an HTML string. If a HTML DOM Object is provided, its innerHtml property value will be used.\r\n     * @param options {PrintOptions} optional. The options to pass to the printer\r\n     * @returns {Promise<any>}\r\n     */\r\n    print(content: string | HTMLElement, options?: PrintOptions): Promise<any> {\r\n         return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}