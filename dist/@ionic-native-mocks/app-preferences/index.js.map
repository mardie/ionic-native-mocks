{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/app-preferences/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAC/D,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAG7C;IAAwC,sCAAc;IAAtD;;IA+FA,CAAC;IA9FG;;;;;;OAMG;IACH,kCAAK,GAAL,UAAM,IAAY,EAAE,GAAY;QAC5B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;OAOG;IACH,kCAAK,GAAL,UAAM,IAAY,EAAE,GAAW,EAAE,KAAW;QACxC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;;;OAMG;IACH,mCAAM,GAAN,UAAO,IAAY,EAAE,GAAY;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,qCAAQ,GAAR;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,iCAAI,GAAJ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,kCAAK,GAAL,UAAM,SAAkB;QACpB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,kCAAK,GAAL,UAAM,SAAiB,IAAQ,CAAC;IAAA,CAAC;IACjC,qCAAQ,GAAR,UAAS,SAAiB,IAAQ,CAAC;IAAA,CAAC;IACpC;;;;OAIG;IACH,sCAAS,GAAT;QACI,MAAM,CAAC,IAAI,MAAM,CAAC;IACtB,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,qCAAQ,GAAR;QACI,MAAM,CAAC,IAAI,MAAM,CAAC;IACtB,CAAC;IAAA,CAAC;IACN,yBAAC;AAAD,CA/FA,AA+FC,CA/FuC,cAAc,GA+FrD","file":"index.js","sourceRoot":"","sourcesContent":["import { AppPreferences } from '@ionic-native/app-preferences';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport class AppPreferencesMock extends AppPreferences {\r\n    /**\r\n     * Get a preference value\r\n     *\r\n     * @param {string} dict Dictionary for key (OPTIONAL)\r\n     * @param {string} key Key\r\n     * @return {Promise<any>} Returns a promise\r\n     */\r\n    fetch(dict: string, key?: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Set a preference value\r\n     *\r\n     * @param {string} dict Dictionary for key (OPTIONAL)\r\n     * @param {string} key Key\r\n     * @param {any} value Value\r\n     * @return {Promise<any>} Returns a promise\r\n     */\r\n    store(dict: string, key: string, value?: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Remove value from preferences\r\n     *\r\n     * @param {string} dict Dictionary for key (OPTIONAL)\r\n     * @param {string} key Key\r\n     * @return {Promise<any>} Returns a promise\r\n     */\r\n    remove(dict: string, key?: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Clear preferences\r\n     *\r\n     * @return {Promise<any>} Returns a promise\r\n     */\r\n    clearAll(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Show native preferences interface\r\n     *\r\n     * @return {Promise<any>} Returns a promise\r\n     */\r\n    show(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Show native preferences interface\r\n     *\r\n     * @param {boolean} subscribe true value to subscribe, false - unsubscribe\r\n     * @return {Observable<any>} Returns an observable\r\n     */\r\n    watch(subscribe: boolean): Observable<any> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Return named configuration context\r\n     * In iOS you'll get a suite configuration, on Android â€” named file\r\n     * Supports: Android, iOS\r\n     * @param {string} suiteName suite name\r\n     * @returns {Object} Custom object, bound to that suite\r\n     */\r\n    suite(suiteName: string): any {};\r\n    iosSuite(suiteName: string): any {};\r\n    /**\r\n     * Return cloud synchronized configuration context\r\n     * Currently supports Windows and iOS/macOS\r\n     * @returns {Object} Custom object, bound to that suite\r\n     */\r\n    cloudSync(): Object {\r\n        return new Object;\r\n    };\r\n    /**\r\n     * Return default configuration context\r\n     * Currently supports Windows and iOS/macOS\r\n     * @returns {Object} Custom Object, bound to that suite\r\n     */\r\n    defaults(): Object {\r\n        return new Object;\r\n    };\r\n}\r\n"]}