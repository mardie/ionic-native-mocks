{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/ftp/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,mBAAmB,CAAC;AAExC;IAA6B,2BAAG;IAAhC;;IAqHA,CAAC;IApHG;;;;;;;;MAQE;IACF,yBAAO,GAAP,UAAQ,QAAgB,EAAE,QAAgB,EAAE,QAAgB;QACxD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;;;;;;;OAaG;IACH,oBAAE,GAAF,UAAG,IAAY;QACX,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,uBAAK,GAAL,UAAM,IAAY;QACd,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;OAOG;IACH,uBAAK,GAAL,UAAM,IAAY;QACd,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,oBAAE,GAAF,UAAG,IAAY;QACX,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;;OAQG;IACH,wBAAM,GAAN,UAAO,SAAiB,EAAE,UAAkB;QACxC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;;OAQG;IACH,0BAAQ,GAAR,UAAS,SAAiB,EAAE,UAAkB;QAC1C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,wBAAM,GAAN;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,4BAAU,GAAV;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,cAAC;AAAD,CArHA,AAqHC,CArH4B,GAAG,GAqH/B","file":"index.js","sourceRoot":"","sourcesContent":["import { FTP } from '@ionic-native/ftp';\r\n\r\nexport class FTPMock extends FTP {\r\n    /**\r\n    * Connect to one ftp server.\r\n    *\r\n    * Just need to init the connection once. If success, you can do any ftp actions later.\r\n    * @param hostname {string} The ftp server url. Like ip without protocol prefix, e.g. \"192.168.1.1\".\r\n    * @param username {string} The ftp login username. If it and `password` are all blank/undefined, the default username \"anonymous\" is used.\r\n    * @param password {string} The ftp login password. If it and `username` are all blank/undefined, the default password \"anonymous@\" is used.\r\n    * @return {Promise<any>} The success callback. Notice: For iOS, if triggered, means `init` success, but NOT means the later action, e.g. `ls`... `download` will success!\r\n    */\r\n    connect(hostname: string, username: string, password: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * List files (with info of `name`, `type`, `link`, `size`, `modifiedDate`) under one directory on the ftp server.\r\n     * You can get one file's name using `fileList[x].name` (`x` is the location in array).\r\n     *\r\n     * Explain key:\r\n     * - name: file name (utf-8).\r\n     * - type: file type. number `0` means regular file, `1` means directory, `2` means symbolic link, `-1` means unknown type (maybe block dev, char dev...).\r\n     * - link: if the file is a symbolic link, then this field store symbolic link information (utf-8), else it's a blank string.\r\n     * - size: file size in bytes.\r\n     * - modifiedDate: modified date of this file. date format is `yyyy-MM-dd HH:mm:ss zzz`, e.g \"2015-12-01 20:45:00 GMT+8\".\r\n     *\r\n     * @param path {string} The path on the ftp server. e.g. \"/adf/123/\".\r\n     * @return {Promise<any>} Returns a promise\r\n     */\r\n    ls(path: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Create one directory on the ftp server.\r\n     *\r\n     * @param path {string} The path on the ftp server. e.g. \"/adf/123/\".\r\n     * @return {Promise<any>} Returns a promise\r\n     */\r\n    mkdir(path: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Delete one directory on the ftp server.\r\n     *\r\n     * Tip: As many ftp server could not rm dir when it's not empty, so rm all files under the dir at first is recommended.\r\n     *\r\n     * @param path {string} The file (with full path) you want to delete. e.g. \"/adf/123/newDir/myFile\".\r\n     * @return {Promise<any>} Returns a promise\r\n     */\r\n    rmdir(path: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Delete one file on the ftp server.\r\n     *\r\n     * @param file {string} The file (with full path) you want to delete. e.g. \"/adf/123/newDir/myFile\".\r\n     * @return {Promise<any>} Returns a promise\r\n     */\r\n    rm(file: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Upload one local file to the ftp server.\r\n     *\r\n     * @param localFile {string} The file (with full path) you want to upload. e.g. \"/local/path/to/localFile\".\r\n     * @param remoteFile {string} The file (with full path) you want to located on the ftp server. e.g. \"/adf/123/newDir/remoteFile\".\r\n     * @return {Promise<any>} Returns a promise.\r\n     *                        It will be triggered many times according the file's size.\r\n     *                        The arg `0`, `0.1xx`, `0.2xx` ... `1` means the upload percent. When it reach `1`, means success.\r\n     */\r\n    upload(localFile: string, remoteFile: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Download one remote file on the ftp server to local path.\r\n     *\r\n     * @param localFile {string} The file (with full path) you want to upload. e.g. \"/local/path/to/localFile\".\r\n     * @param remoteFile {string} The file (with full path) you want to located on the ftp server. e.g. \"/adf/123/newDir/remoteFile\".\r\n     * @return {Promise<any>} Returns a promise.\r\n     *                        It will be triggered many times according the file's size.\r\n     *                        The arg `0`, `0.1xx`, `0.2xx` ... `1` means the upload percent. When it reach `1`, means success.\r\n     */\r\n    download(localFile: string, remoteFile: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Cancel all requests. Always success.\r\n     *\r\n     * @return {Promise<any>} Returns a promise\r\n     */\r\n    cancel(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Disconnect from ftp server.\r\n     *\r\n     * @return {Promise<any>} Returns a promise\r\n     */\r\n    disconnect(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}