{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/geolocation/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AACxD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AA2F7C;IAAqC,mCAAW;IAAhD;;IAyCA,CAAC;IAxCG;;;;;OAKG;IACH,4CAAkB,GAAlB,UAAmB,OAA4B;QAC3C,IAAI,SAAsB,CAAC;QAC3B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,SAAS,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;;;;;;;;;;;OAiBG;IACH,uCAAa,GAAb,UAAc,OAA4B;QACtC,IAAI,OAAoB,CAAC;QAEzB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACvB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IAGP,CAAC;IAAA,CAAC;IACN,sBAAC;AAAD,CAzCA,AAyCC,CAzCoC,WAAW,GAyC/C","file":"index.js","sourceRoot":"","sourcesContent":["import { Geolocation } from '@ionic-native/geolocation';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport interface Coordinates {\r\n    /**\r\n     * a double representing the position's latitude in decimal degrees.\r\n     */\r\n    latitude: number;\r\n    /**\r\n     * A double representing the position's longitude in decimal degrees.\r\n     */\r\n    longitude: number;\r\n    /**\r\n     * A double representing the accuracy of the latitude and longitude properties,\r\n     * expressed in meters.\r\n     */\r\n    accuracy: number;\r\n    /**\r\n     * A double representing the position's altitude in metres, relative to sea\r\n     * level. This value can be null if the implementation cannot provide the data.\r\n     */\r\n    altitude: number;\r\n    /**\r\n     * A double representing the accuracy of the altitude expressed in meters.\r\n     * This value can be null.\r\n     */\r\n    altitudeAccuracy: number;\r\n    /**\r\n     * A double representing the direction in which the device is traveling. This\r\n     * value, specified in degrees, indicates how far off from heading true north\r\n     * the device is. 0 degrees represents true north, and the direction is\r\n     * determined clockwise (which means that east is 90 degrees and west is 270\r\n     * degrees). If speed is 0, heading is NaN. If the device is unable to provide\r\n     * heading information, this value is null.\r\n     */\r\n    heading: number;\r\n    /**\r\n     * A double representing the velocity of the device in meters per second.\r\n     * This value can be null.\r\n     */\r\n    speed: number;\r\n}\r\nexport interface Geoposition {\r\n    /**\r\n     * A Coordinates object defining the current location\r\n     */\r\n    coords: Coordinates;\r\n    /**\r\n     * A timestamp representing the time at which the location was retrieved.\r\n     */\r\n    timestamp: number;\r\n}\r\nexport interface PositionError {\r\n    /**\r\n     * A code that indicates the error that occurred\r\n     */\r\n    code: number;\r\n    /**\r\n     * A message that can describe the error that occurred\r\n     */\r\n    message: string;\r\n}\r\nexport interface GeolocationOptions {\r\n    /**\r\n     * Is a positive long value indicating the maximum age in milliseconds of a\r\n     * possible cached position that is acceptable to return. If set to 0, it\r\n     * means that the device cannot use a cached position and must attempt to\r\n     * retrieve the real current position. If set to Infinity the device must\r\n     * return a cached position regardless of its age. Default: 0.\r\n     */\r\n    maximumAge?: number;\r\n    /**\r\n     * Is a positive long value representing the maximum length of time\r\n     * (in milliseconds) the device is allowed to take in order to return a\r\n     * position. The default value is Infinity, meaning that getCurrentPosition()\r\n     * won't return until the position is available.\r\n     */\r\n    timeout?: number;\r\n    /**\r\n     * Indicates the application would like to receive the best possible results.\r\n     * If true and if the device is able to provide a more accurate position, it\r\n     * will do so. Note that this can result in slower response times or increased\r\n     * power consumption (with a GPS chip on a mobile device for example). On the\r\n     * other hand, if false, the device can take the liberty to save resources by\r\n     * responding more quickly and/or using less power. Default: false.\r\n     * @type {boolean}\r\n     */\r\n    enableHighAccuracy?: boolean;\r\n}\r\n\r\n\r\nexport class GeolocationMock extends Geolocation {\r\n    /**\r\n     * Get the device's current position.\r\n     *\r\n     * @param {GeolocationOptions} options  The [geolocation options](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions).\r\n     * @returns {Promise<Geoposition>} Returns a Promise that resolves with the [position](https://developer.mozilla.org/en-US/docs/Web/API/Position) of the device, or rejects with an error.\r\n     */\r\n    getCurrentPosition(options?: GeolocationOptions): Promise<Geoposition> {\r\n        let theResult: Geoposition;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(theResult);\r\n        });\r\n    };\r\n    /**\r\n     * Watch the current device's position.  Clear the watch by unsubscribing from\r\n     * Observable changes.\r\n     *\r\n     * ```typescript\r\n     * const subscription = this.geolocation.watchPosition()\r\n     *                               .filter((p) => p.coords !== undefined) //Filter Out Errors\r\n     *                               .subscribe(position => {\r\n     *   console.log(position.coords.longitude + ' ' + position.coords.latitude);\r\n     * });\r\n     *\r\n     * // To stop notifications\r\n     * subscription.unsubscribe();\r\n     * ```\r\n     *\r\n     * @param {GeolocationOptions} options  The [geolocation options](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions).\r\n     * @returns {Observable<Geoposition>} Returns an Observable that notifies with the [position](https://developer.mozilla.org/en-US/docs/Web/API/Position) of the device, or errors.\r\n     */\r\n    watchPosition(options?: GeolocationOptions): Observable<Geoposition> {\r\n        let theData: Geoposition;\r\n\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next(theData);\r\n            observer.complete();\r\n        });\r\n\r\n\r\n    };\r\n}\r\n"]}