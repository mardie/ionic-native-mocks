{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/health-kit/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { HealthKit } from '@ionic-native/health-kit';\r\n\r\nexport interface HealthKitOptions {\r\n    /**\r\n    * HKWorkoutActivityType constant\r\n    * Read more here: https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HKWorkout_Class/#//apple_ref/c/tdef/HKWorkoutActivityType\r\n    */\r\n    activityType?: string;\r\n    /**\r\n    * 'hour', 'week', 'year' or 'day', default 'day'\r\n    */\r\n    aggregation?: string;\r\n    /**\r\n    *\r\n    */\r\n    amount?: number;\r\n    /**\r\n    *\r\n    */\r\n    correlationType?: string;\r\n    /**\r\n    *\r\n    */\r\n    date?: any;\r\n    /**\r\n    *\r\n    */\r\n    distance?: number;\r\n    /**\r\n    * probably useful with the former param\r\n    */\r\n    distanceUnit?: string;\r\n    /**\r\n    * in seconds, optional, use either this or endDate\r\n    */\r\n    duration?: number;\r\n    /**\r\n    *\r\n    */\r\n    endDate?: any;\r\n    /**\r\n    *\r\n    */\r\n    energy?: number;\r\n    /**\r\n    * J|cal|kcal\r\n    */\r\n    energyUnit?: string;\r\n    /**\r\n    *\r\n    */\r\n    extraData?: any;\r\n    /**\r\n    *\r\n    */\r\n    metadata?: any;\r\n    /**\r\n    *\r\n    */\r\n    quantityType?: string;\r\n    /**\r\n    *\r\n    */\r\n    readTypes?: any;\r\n    /**\r\n    *\r\n    */\r\n    requestWritePermission?: boolean;\r\n    /**\r\n    *\r\n    */\r\n    samples?: any;\r\n    /**\r\n    *\r\n    */\r\n    sampleType?: string;\r\n    /**\r\n    *\r\n    */\r\n    startDate?: any;\r\n    /**\r\n    * m|cm|mm|in|ft\r\n    */\r\n    unit?: string;\r\n    /**\r\n    *\r\n    */\r\n    requestReadPermission?: boolean;\r\n    /**\r\n    *\r\n    */\r\n    writeTypes?: any;\r\n}\r\n\r\nexport class HealthKitMock extends HealthKit {\r\n    /**\r\n   * Check if HealthKit is supported (iOS8+, not on iPad)\r\n   * @returns {Promise<any>}\r\n   */\r\n    available(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   * Pass in a type and get back on of undetermined | denied | authorized\r\n   * @param options {HealthKitOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n    checkAuthStatus(options: HealthKitOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   * Ask some or all permissions up front\r\n   * @param options {HealthKitOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n    requestAuthorization(options: HealthKitOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   * Formatted as yyyy-MM-dd\r\n   * @returns {Promise<any>}\r\n   */\r\n    readDateOfBirth(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   * Output = male|female|other|unknown\r\n   * @returns {Promise<any>}\r\n   */\r\n    readGender(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   * Output = A+|A-|B+|B-|AB+|AB-|O+|O-|unknown\r\n   * @returns {Promise<any>}\r\n   */\r\n    readBloodType(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   * Output = I|II|III|IV|V|VI|unknown\r\n   * @returns {Promise<any>}\r\n   */\r\n    readFitzpatrickSkinType(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   * Pass in unit (g=gram, kg=kilogram, oz=ounce, lb=pound, st=stone) and amount\r\n   * @param options {HealthKitOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n    saveWeight(options: HealthKitOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   * Pass in unit (g=gram, kg=kilogram, oz=ounce, lb=pound, st=stone)\r\n   * @param options {HealthKitOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n    readWeight(options: HealthKitOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   * Pass in unit (mm=millimeter, cm=centimeter, m=meter, in=inch, ft=foot) and amount\r\n   * @param options {HealthKitOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n    saveHeight(options: HealthKitOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   * Pass in unit (mm=millimeter, cm=centimeter, m=meter, in=inch, ft=foot)\r\n   * @param options {HealthKitOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n    readHeight(options: HealthKitOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   * no params yet, so this will return all workouts ever of any type\r\n   * @returns {Promise<any>}\r\n   */\r\n    findWorkouts(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   *\r\n   * @param options {HealthKitOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n    saveWorkout(options: HealthKitOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   *\r\n   * @param options {HealthKitOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n    querySampleType(options: HealthKitOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   *\r\n   * @param options {HealthKitOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n    querySampleTypeAggregated(options: HealthKitOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   *\r\n   * @param options {HealthKitOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n    deleteSamples(options: HealthKitOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   *\r\n   * @param options {HealthKitOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n    monitorSampleType(options: HealthKitOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   *\r\n   * @param options {HealthKitOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n    sumQuantityType(options: HealthKitOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   *\r\n   * @param options {HealthKitOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n    saveQuantitySample(options: HealthKitOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   *\r\n   * @param options {HealthKitOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n    saveCorrelation(options: HealthKitOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n   *\r\n   * @param options {HealthKitOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n    queryCorrelationType(options: HealthKitOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}