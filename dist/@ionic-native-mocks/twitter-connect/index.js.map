{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/twitter-connect/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAoB/D;IAAwC,sCAAc;IAAtD;;IA6BA,CAAC;IA5BG;;;OAGG;IACH,kCAAK,GAAL;QACI,IAAI,QAAgC,CAAC;QACrC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,mCAAM,GAAN;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,qCAAQ,GAAR;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,yBAAC;AAAD,CA7BA,AA6BC,CA7BuC,cAAc,GA6BrD","file":"index.js","sourceRoot":"","sourcesContent":["import { TwitterConnect } from '@ionic-native/twitter-connect';\r\nexport interface TwitterConnectResponse {\r\n    /**\r\n     * Twitter Username\r\n     */\r\n    userName: string;\r\n    /**\r\n     * Twitter User ID\r\n     */\r\n    userId: string;\r\n    /**\r\n     * Twitter OAuth Secret\r\n     */\r\n    secret: string;\r\n    /**\r\n     * Twitter OAuth Token\r\n     */\r\n    token: string;\r\n}\r\n\r\nexport class TwitterConnectMock extends TwitterConnect {\r\n    /**\r\n     * Logs in\r\n     * @returns {Promise<TwitterConnectResponse>} returns a promise that resolves if logged in and rejects if failed to login\r\n     */\r\n    login(): Promise<TwitterConnectResponse> {\r\n        let response: TwitterConnectResponse;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Logs out\r\n     * @returns {Promise<any>} returns a promise that resolves if logged out and rejects if failed to logout\r\n     */\r\n    logout(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Returns user's profile information\r\n     * @returns {Promise<any>} returns a promise that resolves if user profile is successfully retrieved and rejects if request fails\r\n     */\r\n    showUser(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}