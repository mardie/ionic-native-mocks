{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/location-accuracy/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,iCAAiC,CAAC;AAEnE;IAA0C,wCAAgB;IAA1D;;IAgGA,CAAC;IA/FG;;;OAGG;IACH,yCAAU,GAAV;QACI,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,2CAAY,GAAZ;QACI,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,sCAAO,GAAP,UAAQ,QAAgB;QACpB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IAkEN,2BAAC;AAAD,CAhGA,AAgGC,CAhGyC,gBAAgB,GAgGzD","file":"index.js","sourceRoot":"","sourcesContent":["import { LocationAccuracy } from '@ionic-native/location-accuracy';\r\n\r\nexport class LocationAccuracyMock extends LocationAccuracy {\r\n    /**\r\n     * Indicates if you can request accurate location\r\n     * @returns {Promise<boolean>} Returns a promise that resovles with a boolean that indicates if you can request accurate location\r\n     */\r\n    canRequest(): Promise<boolean> {\r\n        let response: boolean = true;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Indicates if a request is currently in progress\r\n     * @returns {Promise<boolean>} Returns a promise that resolves with a boolean that indicates if a request is currently in progress\r\n     */\r\n    isRequesting(): Promise<boolean> {\r\n        let response: boolean = true;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Requests accurate location\r\n     * @param accuracy {number} Accuracy, from 0 to 4. You can use the static properties of this class that start with REQUEST_PRIORITY_\r\n     * @returns {Promise<any>} Returns a promise that resolves on success and rejects if an error occurred\r\n     */\r\n    request(accuracy: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Convenience constant\r\n     * @type {number}\r\n     */\r\n    REQUEST_PRIORITY_NO_POWER: number;\r\n    /**\r\n     * Convenience constant\r\n     * @type {number}\r\n     */\r\n    REQUEST_PRIORITY_LOW_POWER: number;\r\n    /**\r\n     * Convenience constant\r\n     * @type {number}\r\n     */\r\n    REQUEST_PRIORITY_BALANCED_POWER_ACCURACY: number;\r\n    /**\r\n     * Convenience constant\r\n     * @type {number}\r\n     */\r\n    REQUEST_PRIORITY_HIGH_ACCURACY: number;\r\n    /**\r\n     * Convenience constant\r\n     * @type {number}\r\n     */\r\n    SUCCESS_SETTINGS_SATISFIED: number;\r\n    /**\r\n     * Convenience constant\r\n     * @type {number}\r\n     */\r\n    SUCCESS_USER_AGREED: number;\r\n    /**\r\n     * Convenience constant\r\n     * @type {number}\r\n     */\r\n    ERROR_ALREADY_REQUESTING: number;\r\n    /**\r\n     * Convenience constant\r\n     * @type {number}\r\n     */\r\n    ERROR_INVALID_ACTION: number;\r\n    /**\r\n     * Convenience constant\r\n     * @type {number}\r\n     */\r\n    ERROR_INVALID_ACCURACY: number;\r\n    /**\r\n     * Convenience constant\r\n     * @type {number}\r\n     */\r\n    ERROR_EXCEPTION: number;\r\n    /**\r\n     * Convenience constant\r\n     * @type {number}\r\n     */\r\n    ERROR_CANNOT_CHANGE_ACCURACY: number;\r\n    /**\r\n     * Convenience constant\r\n     * @type {number}\r\n     */\r\n    ERROR_USER_DISAGREED: number;\r\n    /**\r\n     * Convenience constant\r\n     * @type {number}\r\n     */\r\n    ERROR_GOOGLE_API_CONNECTION_FAILED: number;\r\n}\r\n"]}