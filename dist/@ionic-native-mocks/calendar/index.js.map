{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/calendar/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAyClD;IAAkC,gCAAQ;IAA1C;;IA6RA,CAAC;IA5RG,6CAAsB,GAAtB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;OAGG;IACH,wCAAiB,GAAjB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;OAGG;IACH,yCAAkB,GAAlB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;OAGG;IACH,6CAAsB,GAAtB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;OAGG;IACH,4CAAqB,GAArB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;OAGG;IACH,iDAA0B,GAA1B;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;;OAKG;IACH,qCAAc,GAAd,UAAe,aAA2B;QACtC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;OAIG;IACH,qCAAc,GAAd,UAAe,IAAY;QACvB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;OAIG;IACH,yCAAkB,GAAlB;QACI,IAAI,eAAgC,CAAC;QACrC,MAAM,CAAC,eAAe,CAAC;IAC3B,CAAC;IACD;;;;;;;;OAQG;IACH,kCAAW,GAAX,UAAY,KAAc,EAAE,QAAiB,EAAE,KAAc,EAAE,SAAgB,EAAE,OAAc;QAC3F,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;;;;;;;OAUG;IACH,6CAAsB,GAAtB,UAAuB,KAAc,EAAE,QAAiB,EAAE,KAAc,EAAE,SAAgB,EAAE,OAAc,EAAE,OAAyB;QACjI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;;;;;;OASG;IACH,+CAAwB,GAAxB,UAAyB,KAAc,EAAE,QAAiB,EAAE,KAAc,EAAE,SAAgB,EAAE,OAAc;QACxG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;;;;;;;OAUG;IACH,0DAAmC,GAAnC,UAAoC,KAAc,EAAE,QAAiB,EAAE,KAAc,EAAE,SAAgB,EAAE,OAAc,EAAE,OAAyB;QAC9I,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;;;;;;OASG;IACH,gCAAS,GAAT,UAAU,KAAc,EAAE,QAAiB,EAAE,KAAc,EAAE,SAAgB,EAAE,OAAc;QACzF,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;;;;;;OASG;IACH,2CAAoB,GAApB,UAAqB,KAAc,EAAE,QAAiB,EAAE,KAAc,EAAE,SAAgB,EAAE,OAAc,EAAE,OAAyB;QAC/H,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;;;OAMG;IACH,wCAAiB,GAAjB,UAAkB,SAAe,EAAE,OAAa;QAC5C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;OAGG;IACH,oCAAa,GAAb;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;OAGG;IACH,mDAA4B,GAA5B,UAA6B,YAAoB;QAC7C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;;;;;;;;;;;OAcG;IACH,kCAAW,GAAX,UAAY,KAAc,EAAE,QAAiB,EAAE,KAAc,EAAE,SAAgB,EAAE,OAAc,EAAE,QAAiB,EAAE,WAAoB,EAAE,QAAiB,EAAE,YAAmB,EAAE,UAAiB;QAC/L,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;;;;;;;;;;;;;OAgBG;IACH,6CAAsB,GAAtB,UAAuB,KAAc,EAAE,QAAiB,EAAE,KAAc,EAAE,SAAgB,EAAE,OAAc,EAAE,QAAiB,EAAE,WAAoB,EAAE,QAAiB,EAAE,YAAmB,EAAE,UAAiB,EAAE,aAA+B,EAAE,UAA4B;QACzQ,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;;;;;;OASG;IACH,kCAAW,GAAX,UAAY,KAAc,EAAE,QAAiB,EAAE,KAAc,EAAE,SAAgB,EAAE,OAAc;QAC3F,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;;;;;;;OAUG;IACH,mDAA4B,GAA5B,UAA6B,KAAc,EAAE,QAAiB,EAAE,KAAc,EAAE,SAAgB,EAAE,OAAc,EAAE,YAAqB;QACnI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;OAIG;IACH,mCAAY,GAAZ,UAAa,IAAU;QACnB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACL,mBAAC;AAAD,CA7RA,AA6RC,CA7RiC,QAAQ,GA6RzC","file":"index.js","sourceRoot":"","sourcesContent":["import { Calendar } from '@ionic-native/calendar';\r\n\r\nexport interface CalendarOptions {\r\n    /**\r\n     * Id\r\n     */\r\n    id?: string;\r\n    /**\r\n     *\r\n     */\r\n    firstReminderMinutes?: number;\r\n    /**\r\n     *\r\n     */\r\n    secondReminderMinutes?: number;\r\n    /**\r\n     * Recurrence. Can be set to `daily`, `weekly`, `monthly` or `yearly`\r\n     */\r\n    recurrence?: string;\r\n    /**\r\n     * Recurrence interval. Valid only when `recurrence` option is set.\r\n     */\r\n    recurrenceInterval?: number;\r\n    /**\r\n     * Recurrence end date. Valid only when `recurrence` option is set.\r\n     */\r\n    recurrenceEndDate?: Date;\r\n    /**\r\n     * Calendar name. Ths is supported by `iOS` only.\r\n     */\r\n    calendarName?: string;\r\n    /**\r\n     * Calendar id\r\n     */\r\n    calendarId?: number;\r\n    /**\r\n     * URL\r\n     */\r\n    url?: string;\r\n}\r\n\r\nexport class CalendarMock extends Calendar {\r\n    hasReadWritePermission(): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(true);\r\n        });\r\n    }\r\n    /**\r\n     * Check if we have read permission\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    hasReadPermission(): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(true);\r\n        });\r\n    }\r\n    /**\r\n     * Check if we have write permission\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    hasWritePermission(): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(true);\r\n        });\r\n    }\r\n    /**\r\n     * Request write permission\r\n     * @returns {Promise<any>}\r\n     */\r\n    requestWritePermission(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Request read permission\r\n     * @returns {Promise<any>}\r\n     */\r\n    requestReadPermission(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Requests read/write permissions\r\n     * @returns {Promise<any>}\r\n     */\r\n    requestReadWritePermission(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Create a calendar. (iOS only)\r\n     *\r\n     * @param {string | Object} nameOrOptions  either a string name or a options object. If string, provide the calendar name. IF an object, provide a calendar name as a string and a calendar color in hex format as a string\r\n     * @returns {Promise<any>} Returns a Promise\r\n     */\r\n    createCalendar(nameOrOptions: string | any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Delete a calendar. (iOS only)\r\n     * @param {string} name  Name of the calendar to delete.\r\n     * @returns {Promise<any>} Returns a Promise\r\n     */\r\n    deleteCalendar(name: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Returns the default calendar options.\r\n     *\r\n     * @return {CalendarOptions} Returns an object with the default calendar options\r\n     */\r\n    getCalendarOptions(): CalendarOptions {\r\n        let calendarOptions: CalendarOptions;\r\n        return calendarOptions;\r\n    }\r\n    /**\r\n     * Silently create an event.\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @returns {Promise<any>} Returns a Promise\r\n     */\r\n    createEvent(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Silently create an event with additional options.\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`\r\n     * @returns {Promise<any>} Returns a Promise\r\n     */\r\n    createEventWithOptions(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, options?: CalendarOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Interactively create an event.\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @returns {Promise<any>} Returns a Promise\r\n     */\r\n    createEventInteractively(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Interactively create an event with additional options.\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`\r\n     * @returns {Promise<any>}\r\n     */\r\n    createEventInteractivelyWithOptions(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, options?: CalendarOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Find an event.\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @returns {Promise<any>}\r\n     */\r\n    findEvent(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Find an event with additional options.\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`\r\n     * @returns {Promise<any>} Returns a Promise that resolves with the event, or rejects with an error.\r\n     */\r\n    findEventWithOptions(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, options?: CalendarOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Find a list of events within the specified date range. (Android only)\r\n     *\r\n     * @param {Date} [startDate]  The start date\r\n     * @param {Date} [endDate]  The end date\r\n     * @returns {Promise<any>} Returns a Promise that resolves with the list of events, or rejects with an error.\r\n     */\r\n    listEventsInRange(startDate: Date, endDate: Date): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of all calendars.\r\n     * @returns {Promise<any>} A Promise that resolves with the list of calendars, or rejects with an error.\r\n     */\r\n    listCalendars(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of all future events in the specified calendar. (iOS only)\r\n     * @returns {Promise<any>} Returns a Promise that resolves with the list of events, or rejects with an error.\r\n     */\r\n    findAllEventsInNamedCalendar(calendarName: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Modify an event. (iOS only)\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @param {string} [newTitle]  The new event title\r\n     * @param {string} [newLocation]  The new event location\r\n     * @param {string} [newNotes]  The new event notes\r\n     * @param {Date} [newStartDate]  The new event start date\r\n     * @param {Date} [newEndDate]  The new event end date\r\n     * @return Returns a Promise\r\n     */\r\n    modifyEvent(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, newTitle?: string, newLocation?: string, newNotes?: string, newStartDate?: Date, newEndDate?: Date): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Modify an event with additional options. (iOS only)\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @param {string} [newTitle]  The new event title\r\n     * @param {string} [newLocation]  The new event location\r\n     * @param {string} [newNotes]  The new event notes\r\n     * @param {Date} [newStartDate]  The new event start date\r\n     * @param {Date} [newEndDate]  The new event end date\r\n     * @param {CalendarOptions} [filterOptions] Event Options, see `getCalendarOptions`\r\n     * @param {CalendarOptions} [newOptions]  New event options, see `getCalendarOptions`\r\n     * @return Returns a Promise\r\n     */\r\n    modifyEventWithOptions(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, newTitle?: string, newLocation?: string, newNotes?: string, newStartDate?: Date, newEndDate?: Date, filterOptions?: CalendarOptions, newOptions?: CalendarOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Delete an event.\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @return Returns a Promise\r\n     */\r\n    deleteEvent(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Delete an event from the specified Calendar. (iOS only)\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @param {string} calendarName\r\n     * @return Returns a Promise\r\n     */\r\n    deleteEventFromNamedCalendar(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, calendarName?: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Open the calendar at the specified date.\r\n     * @param {Date} date The date you want to open the calendar on\r\n     * @return {Promise<any>} Promise returns a promise\r\n     */\r\n    openCalendar(date: Date): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n}\r\n"]}