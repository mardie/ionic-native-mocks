{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/serial/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAC9C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAY7C;IAAgC,8BAAM;IAAtC;;IA4EA,CAAC;IA3EG;;;;;OAKG;IACH,sCAAiB,GAAjB,UAAkB,OAAiC;QAC/C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,yBAAI,GAAJ,UAAK,OAA0B;QAC3B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,0BAAK,GAAL,UAAM,IAAS;QACX,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,6BAAQ,GAAR,UAAS,IAAS;QACd,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,yBAAI,GAAJ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,yCAAoB,GAApB;QACI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,0BAAK,GAAL;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,iBAAC;AAAD,CA5EA,AA4EC,CA5E+B,MAAM,GA4ErC","file":"index.js","sourceRoot":"","sourcesContent":["import { Serial } from '@ionic-native/serial';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport interface SerialPermissionOptions {\r\n    vid: string;\r\n    pid: string;\r\n    driver: string;\r\n}\r\nexport interface SerialOpenOptions {\r\n    baudRate: number;\r\n}\r\n\r\nexport class SerialMock extends Serial {\r\n    /**\r\n     * Request permission to connect to a serial device\r\n     *\r\n     * @param options {SerialPermissionOptions} Options used to request serial permissions for an unknown device\r\n     * @return {Promise<any>} Returns a promise that resolves when permissions are granted\r\n     */\r\n    requestPermission(options?: SerialPermissionOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Open connection to a serial device\r\n     *\r\n     * @param options {SerialOpenOptions} Options used to open serial connection\r\n     * @return {Promise<any>} Returns a promise that resolves when the serial connection is opened\r\n     */\r\n    open(options: SerialOpenOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Write to a serial connection\r\n     *\r\n     * @param data {any} data to write to the serial connection\r\n     * @return {Promise<any>} Returns a promise that resolves when the write is complete\r\n     */\r\n    write(data: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Write hex to a serial connection\r\n     *\r\n     * @param data {any} data to write to the serial connection\r\n     * @return {Promise<any>} Returns a promise that resolves when the write is complete\r\n     */\r\n    writeHex(data: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Read from a serial connection\r\n     *\r\n     * @return {Promise<any>} Returns a promise that resolves with data read from the serial connection\r\n     */\r\n    read(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Watch the incoming data from the serial connection. Clear the watch by unsubscribing from the observable\r\n     *\r\n     * @returns {Observable<any>} Observable returns an observable that you can subscribe to\r\n     */\r\n    registerReadCallback(): Observable<any> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Close the serial connection\r\n     *\r\n     * @return {Promise<any>} Returns a promise that resolves when the serial connection is closed\r\n     */\r\n    close(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}