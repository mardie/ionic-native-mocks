{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/email-composer/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,8BAA8B,CAAC;AAa7D;IAAuC,qCAAa;IAApD;;IA+BA,CAAC;IA9BO;;;;;GAKD;IACH,uCAAW,GAAX,UAAY,GAAY;QACpB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,oCAAQ,GAAR,UAAS,KAAa,EAAE,WAAmB,IAAS,CAAC;IAAA,CAAC;IACtD;;;;;;OAMG;IACH,gCAAI,GAAJ,UAAK,OAA6B,EAAE,KAAW;QAC3C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,wBAAC;AAAD,CA/BA,AA+BC,CA/BsC,aAAa,GA+BnD","file":"index.js","sourceRoot":"","sourcesContent":["import { EmailComposer } from '@ionic-native/email-composer';\r\n\r\nexport interface EmailComposerOptions {\r\n    app?: string;\r\n    to?: string | Array<string>;\r\n    cc?: string | Array<string>;\r\n    bcc?: string | Array<string>;\r\n    attachments?: Array<any>;\r\n    subject?: string;\r\n    body?: string;\r\n    isHtml?: boolean;\r\n}\r\n\r\nexport class EmailComposerMock extends EmailComposer {\r\n        /**\r\n     * Verifies if sending emails is supported on the device.\r\n     *\r\n     * @param [app] {string} App id or uri scheme.\r\n     * @returns {Promise<any>} Resolves if available, rejects if not available\r\n     */\r\n    isAvailable(app?: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Adds a new mail app alias.\r\n     *\r\n     * @param alias {string} The alias name\r\n     * @param packageName {string} The package name\r\n     */\r\n    addAlias(alias: string, packageName: string): void {};\r\n    /**\r\n     * Displays the email composer pre-filled with data.\r\n     *\r\n     * @param options {EmailComposerOptions} Email\r\n     * @param [scope] {any} Scope for the promise\r\n     * @returns {Promise<any>} Resolves promise when the EmailComposer has been opened\r\n     */\r\n    open(options: EmailComposerOptions, scope?: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}