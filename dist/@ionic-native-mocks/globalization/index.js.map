{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/globalization/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Globalization } from '@ionic-native/globalization';\r\n\r\nexport class GlobalizationMock extends Globalization {\r\n\r\n    private static _defaultLanguage: string = 'en-EN';\r\n\r\n    /**\r\n    * Set default language on globalization plugin mock, otherwise default language is English.\r\n    * You should use this format to inject provider:\r\n    *\r\n    * GlobalizationMock.setDefaultLanguage('es-ES');\r\n    *\r\n    * ... providers :[\r\n    *      { provide: Globalization, useClass: GlobalizationMock },\r\n    * ]\r\n    */\r\n    static setDefaultLanguage(defaultLanguage: string) {\r\n        this._defaultLanguage = defaultLanguage || this._defaultLanguage;\r\n    }\r\n    /**\r\n    * Returns the BCP-47 compliant language identifier tag to the successCallback with a properties object as a parameter. That object should have a value property with a String value.\r\n    * @returns {Promise<{value: string}>}\r\n    */\r\n    getPreferredLanguage(): Promise<{ value: string; }> {\r\n        let theResult = {\r\n            value: GlobalizationMock._defaultLanguage\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(theResult);\r\n        });\r\n    };\r\n    /**\r\n     * Returns the BCP 47 compliant locale identifier string to the successCallback with a properties object as a parameter.\r\n     * @returns {Promise<{value: string}>}\r\n     */\r\n    getLocaleName(): Promise<{ value: string; }> {\r\n        let theResult = {\r\n            value: GlobalizationMock._defaultLanguage\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(theResult);\r\n        });\r\n    };\r\n    /**\r\n     * Converts date to string\r\n     * @param {Date} date Date you wish to convert\r\n     * @param options Options for the converted date. Length, selector.\r\n     * @returns {Promise<{value: string}>} Returns a promise when the date has been converted.\r\n     */\r\n    dateToString(date: Date, options: { formatLength: string; selector: string; }): Promise<{ value: string; }> {\r\n        let theResult = { value: '' };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(theResult);\r\n        });\r\n    };\r\n    /**\r\n     * Parses a date formatted as a string, according to the client's user preferences and calendar using the time zone of the client, and returns the corresponding date object.\r\n     * @param {string} dateString Date as a string to be converted\r\n     * @param options Options for the converted date. Length, selector.\r\n     * @returns {Promise<{ year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number }>} Returns a promise when the date has been converted.\r\n     */\r\n    stringToDate(dateString: string, options: {\r\n        formatLength: string;\r\n        selector: string;\r\n    }): Promise<{\r\n        year: number;\r\n        month: number;\r\n        day: number;\r\n        hour: number;\r\n        minute: number;\r\n        second: number;\r\n        millisecond: number;\r\n    }> {\r\n        let theResult = { year: 0, month: 0, day: 0, hour: 0, minute: 0, second: 0, millisecond: 0 };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(theResult);\r\n        });\r\n    };\r\n    /**\r\n     * Returns a pattern string to format and parse dates according to the client's user preferences.\r\n     * @param options Object with the format length and selector\r\n     * @returns {Promise<{ pattern: string, timezone: string, utf_offset: number, dst_offset: number }>} Returns a promise.\r\n     */\r\n    getDatePattern(options: {\r\n        formatLength: string;\r\n        selector: string;\r\n    }): Promise<{\r\n        pattern: string;\r\n        timezone: string;\r\n        utf_offset: number;\r\n        dst_offset: number;\r\n    }> {\r\n        let theResult = { pattern: '', timezone: '', utf_offset: 0, dst_offset: 0 };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(theResult);\r\n        });\r\n    };\r\n    /**\r\n     * Returns an array of the names of the months or days of the week, depending on the client's user preferences and calendar.\r\n     * @param options Object with type (narrow or wide) and item (month or days).\r\n     * @returns {Promise<{value: Array<string>}>} Returns a promise.\r\n     */\r\n    getDateNames(options: {\r\n        type: string;\r\n        item: string;\r\n    }): Promise<{\r\n        value: Array<string>;\r\n    }> {\r\n        let theResult = { value: [''] };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(theResult);\r\n        });\r\n    };\r\n    /**\r\n     * Indicates whether daylight savings time is in effect for a given date using the client's time zone and calendar.\r\n     * @param {data} date Date to process\r\n     * @returns {Promise<{dst: string}>} reutrns a promise with the value\r\n     */\r\n    isDayLightSavingsTime(date: Date): Promise<{\r\n        dst: string;\r\n    }> {\r\n        let theResult = { dst: '' };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(theResult);\r\n        });\r\n    };\r\n    /**\r\n     * Returns the first day of the week according to the client's user preferences and calendar.\r\n     * @returns {Promise<{value: string}>} returns a promise with the value\r\n     */\r\n    getFirstDayOfWeek(): Promise<{\r\n        value: string;\r\n    }> {\r\n        let theResult = { value: '' };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(theResult);\r\n        });\r\n    };\r\n    /**\r\n     * Returns a number formatted as a string according to the client's user preferences.\r\n     * @param numberToConvert {Number} The number to convert\r\n     * @param options {Object} Object with property `type` that can be set to: decimal, percent, or currency.\r\n     */\r\n    numberToString(numberToConvert: number, options: {\r\n        type: string;\r\n    }): Promise<{\r\n        value: string;\r\n    }> {\r\n        let theResult = { value: '' };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(theResult);\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} stringToConvert String you want to conver to a number\r\n     * @param options  The type of number you want to return. Can be decimal, percent, or currency.\r\n     * @returns {Promise<{ value: number | string }>} Returns a promise with the value.\r\n     */\r\n    stringToNumber(stringToConvert: string, options: {\r\n        type: string;\r\n    }): Promise<{\r\n        value: number | string;\r\n    }> {\r\n        let theResult = { value: '' };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(theResult);\r\n        });\r\n    };\r\n    /**\r\n     * Returns a pattern string to format and parse numbers according to the client's user preferences.\r\n     * @param options Can be decimal, percent, or currency.\r\n     * @returns {Promise<{ pattern: string, symbol: string, fraction: number, rounding: number, positive: string, negative: string, decimal: string, grouping: string }>}\r\n     */\r\n    getNumberPattern(options: {\r\n        type: string;\r\n    }): Promise<{\r\n        pattern: string;\r\n        symbol: string;\r\n        fraction: number;\r\n        rounding: number;\r\n        positive: string;\r\n        negative: string;\r\n        decimal: string;\r\n        grouping: string;\r\n    }> {\r\n        let theResult = { pattern: '', symbol: '', fraction: 0, rounding: 0, positive: '', negative: '', decimal: '', grouping: '' };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(theResult);\r\n        });\r\n    };\r\n    /**\r\n     * Returns a pattern string to format and parse currency values according to the client's user preferences and ISO 4217 currency code.\r\n     * @param {string} currencyCode Currency Code.A\r\n     * @returns {Promise<{ pattern: string, code: string, fraction: number, rounding: number, decimal: number, grouping: string }>}\r\n     */\r\n    getCurrencyPattern(currencyCode: string): Promise<{\r\n        pattern: string;\r\n        code: string;\r\n        fraction: number;\r\n        rounding: number;\r\n        decimal: number;\r\n        grouping: string;\r\n    }> {\r\n        let theResult = { pattern: '', code: '', fraction: 0, rounding: 0, decimal: 0, grouping: '' };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(theResult);\r\n        });\r\n    };\r\n}\r\n"]}