{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/qqsdk/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AA0C5C;IAA+B,6BAAK;IAApC;;IAiFA,CAAC;IAjEG;;;;OAIG;IACH,4BAAQ,GAAR,UAAS,OAAuB;QAC3B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF,0BAAM,GAAN;QACK,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,wCAAoB,GAApB,UAAqB,OAAuB;QACvC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,6BAAS,GAAT,UAAU,OAAuB;QAC5B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,8BAAU,GAAV,UAAW,OAAuB;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,6BAAS,GAAT,UAAU,OAAuB;QAC5B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,8BAAU,GAAV,UAAW,OAAuB;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,gBAAC;AAAD,CAjFA,AAiFC,CAjF8B,KAAK,GAiFnC","file":"index.js","sourceRoot":"","sourcesContent":["import { QQSDK } from '@ionic-native/qqsdk';\r\nexport interface QQShareOptions {\r\n    /**\r\n     * The clinet type, QQ or TIM\r\n     * Default is QQ\r\n     */\r\n    client?: number;\r\n    /**\r\n     * The Share Sence\r\n     * Default is QQ\r\n     */\r\n    scene?: number;\r\n    /**\r\n     * The text for shareText\r\n     */\r\n    text?: string;\r\n    /**\r\n     * The url for share news or audio\r\n     */\r\n    url?: string;\r\n    /**\r\n     * The title for share image,news or audio\r\n     */\r\n    title?: string;\r\n    /**\r\n     * The description for share image,news or audio\r\n     */\r\n    description?: string;\r\n    /**\r\n     * The image for share image,news or audio\r\n     * Image supports three types:\r\n     * 1. Network URL\r\n     * 2. Base64\r\n     * 3. Absolute file path\r\n     */\r\n    image?: string;\r\n    /**\r\n     *  The URL for audio\r\n     */\r\n    flashUrl?: string;\r\n}\r\n\r\nexport class QQSDKMock extends QQSDK {\r\n    /**\r\n     * QQ Share Scene\r\n     */\r\n    Scene: {\r\n        QQ: number;\r\n        QQZone: number;\r\n        Favorite: number;\r\n    };\r\n    /**\r\n     *  client type:  QQ application or TIM application\r\n     */\r\n    ClientType: {\r\n        QQ: number;\r\n        TIM: number;\r\n    };\r\n    /**\r\n     * open QQ or TIM client perform ssoLogin\r\n     * @param options\r\n     * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\r\n     */\r\n    ssoLogin(options: QQShareOptions): Promise<any> {\r\n         return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    logout(): Promise<any> {\r\n         return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Detect if the QQ application or TIM application is installed on the device.\r\n     *\r\n     * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\r\n     */\r\n    checkClientInstalled(options: QQShareOptions): Promise<any> {\r\n         return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * shareText\r\n     * @param options\r\n     * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\r\n     */\r\n    shareText(options: QQShareOptions): Promise<any> {\r\n         return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * shareImage\r\n     * @param options\r\n     * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\r\n     */\r\n    shareImage(options: QQShareOptions): Promise<any> {\r\n         return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * shareNews\r\n     * @param options\r\n     * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\r\n     */\r\n    shareNews(options: QQShareOptions): Promise<any> {\r\n         return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * shareAudio\r\n     * @param options\r\n     * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\r\n     */\r\n    shareAudio(options: QQShareOptions): Promise<any> {\r\n         return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}