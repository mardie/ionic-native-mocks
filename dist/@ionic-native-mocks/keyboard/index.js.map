{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/keyboard/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAG7C;IAAkC,gCAAQ;IAA1C;;IAuCA,CAAC;IAtCG;;;OAGG;IACH,+CAAwB,GAAxB,UAAyB,IAAa,IAAS,CAAC;IAAA,CAAC;IACjD;;OAEG;IACH,2BAAI,GAAJ,cAAc,CAAC;IAAA,CAAC;IAChB;;OAEG;IACH,4BAAK,GAAL,cAAe,CAAC;IAAA,CAAC;IACjB;;;OAGG;IACH,oCAAa,GAAb,UAAc,OAAgB,IAAS,CAAC;IAAA,CAAC;IACzC;;;OAGG;IACH,qCAAc,GAAd;QACI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,qCAAc,GAAd;QACI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,mBAAC;AAAD,CAvCA,AAuCC,CAvCiC,QAAQ,GAuCzC","file":"index.js","sourceRoot":"","sourcesContent":["import { Keyboard } from '@ionic-native/keyboard';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport class KeyboardMock extends Keyboard {\r\n    /**\r\n     * Hide the keyboard accessory bar with the next, previous and done buttons.\r\n     * @param hide {boolean}\r\n     */\r\n    hideKeyboardAccessoryBar(hide: boolean): void {};\r\n    /**\r\n     * Force keyboard to be shown.\r\n     */\r\n    show(): void {};\r\n    /**\r\n     * Close the keyboard if open.\r\n     */\r\n    close(): void {};\r\n    /**\r\n     * Prevents the native UIScrollView from moving when an input is focused.\r\n     * @param disable {boolean}\r\n     */\r\n    disableScroll(disable: boolean): void {};\r\n    /**\r\n     * Creates an observable that notifies you when the keyboard is shown. Unsubscribe to observable to cancel event watch.\r\n     * @returns {Observable<any>}\r\n     */\r\n    onKeyboardShow(): Observable<any> {\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Creates an observable that notifies you when the keyboard is hidden. Unsubscribe to observable to cancel event watch.\r\n     * @returns {Observable<any>}\r\n     */\r\n    onKeyboardHide(): Observable<any> {\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n}\r\n"]}