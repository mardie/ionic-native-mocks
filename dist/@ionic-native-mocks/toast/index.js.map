{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/toast/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAsC7C;IAA+B,6BAAK;IAApC;;IA2GA,CAAC;IA1GG;;;;;;;WAOO;IACP,wBAAI,GAAJ,UAAK,OAAe,EAAE,QAAgB,EAAE,QAAgB;QACpD,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,wBAAI,GAAJ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;;;;OAUG;IACH,mCAAe,GAAf,UAAgB,OAAqB;QACjC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,gCAAY,GAAZ,UAAa,OAAe;QACxB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,mCAAe,GAAf,UAAgB,OAAe;QAC3B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,mCAAe,GAAf,UAAgB,OAAe;QAC3B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,+BAAW,GAAX,UAAY,OAAe;QACvB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,kCAAc,GAAd,UAAe,OAAe;QAC1B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,kCAAc,GAAd,UAAe,OAAe;QAC1B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,gBAAC;AAAD,CA3GA,AA2GC,CA3G8B,KAAK,GA2GnC","file":"index.js","sourceRoot":"","sourcesContent":["import { Toast } from '@ionic-native/toast';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport interface ToastOptions {\r\n    /**\r\n     * Message to display\r\n     */\r\n    message?: string;\r\n    /**\r\n     * Duration in ms to show\r\n     */\r\n    duration?: number;\r\n    /**\r\n     * Position\r\n     */\r\n    position?: string;\r\n    /**\r\n     * Add negative value to move it up a bit\r\n     */\r\n    addPixelsY?: number;\r\n    /**\r\n     * Pass JSON object to be sent back in success callback\r\n     */\r\n    data?: any;\r\n    /**\r\n     * Styling\r\n     */\r\n    styling?: {\r\n        opacity?: number;\r\n        backgroundColor?: string;\r\n        textColor?: string;\r\n        cornerRadius?: number;\r\n        horizontalPadding?: number;\r\n        verticalPadding?: number;\r\n    };\r\n}\r\n\r\n\r\nexport class ToastMock extends Toast {\r\n    /**\r\n         * Show a native toast for the given duration at the specified position.\r\n         *\r\n         * @param {string} message  The message to display.\r\n         * @param {string} duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.\r\n         * @param {string} position  Where to position the toast, either 'top', 'center', or 'bottom'.\r\n         * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n         */\r\n    show(message: string, duration: string, position: string): Observable<any> {\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Manually hide any currently visible toast.\r\n     * @returns {Promise<any>} Returns a Promise that resolves on success.\r\n     */\r\n    hide(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Show a native toast with the given options.\r\n     *\r\n     * @param {Object} options  Options for showing a toast. Available options:\r\n     *   message  The message to display.\r\n     *   duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.\r\n     *   position  Where to position the toast, either 'top', 'center', or 'bottom'.\r\n     *   addPixelsY  Offset in pixels to move the toast up or down from its specified position.\r\n     *\r\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n     */\r\n    showWithOptions(options: ToastOptions): Observable<any> {\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Shorthand for `show(message, 'short', 'top')`.\r\n     * @param message {string}\r\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n     */\r\n    showShortTop(message: string): Observable<any> {\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Shorthand for `show(message, 'short', 'center')`.\r\n     * @param message {string}\r\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n     */\r\n    showShortCenter(message: string): Observable<any> {\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Shorthand for `show(message, 'short', 'bottom')`.\r\n     * @param message {string}\r\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n     */\r\n    showShortBottom(message: string): Observable<any> {\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Shorthand for `show(message, 'long', 'top')`.\r\n     * @param message {string}\r\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n     */\r\n    showLongTop(message: string): Observable<any> {\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Shorthand for `show(message, 'long', 'center')`.\r\n     * @param message {string}\r\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n     */\r\n    showLongCenter(message: string): Observable<any> {\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Shorthand for `show(message, 'long', 'bottom')`.\r\n     * @param message {string}\r\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\r\n     */\r\n    showLongBottom(message: string): Observable<any> {\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n}\r\n"]}