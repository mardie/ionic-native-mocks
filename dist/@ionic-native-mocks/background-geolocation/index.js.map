{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/background-geolocation/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { BackgroundGeolocation } from '@ionic-native/background-geolocation';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport interface BackgroundGeolocationResponse {\r\n    /**\r\n     * ID of location as stored in DB (or null)\r\n     */\r\n    locationId: number;\r\n    /**\r\n     * Service provider\r\n     */\r\n    serviceProvider: string;\r\n    /**\r\n     * true if location recorded as part of debug\r\n     */\r\n    debug: boolean;\r\n    /**\r\n     * UTC time of this fix, in milliseconds since January 1, 1970.\r\n     */\r\n    time: number;\r\n    /**\r\n     * latitude, in degrees.\r\n     */\r\n    latitude: number;\r\n    /**\r\n     * longitude, in degrees.\r\n     */\r\n    longitude: number;\r\n    /**\r\n     * estimated accuracy of this location, in meters.\r\n     */\r\n    accuracy: number;\r\n    /**\r\n     * speed if it is available, in meters/second over ground.\r\n     */\r\n    speed: number;\r\n    /**\r\n     * altitude if available, in meters above the WGS 84 reference ellipsoid.\r\n     */\r\n    altitude: number;\r\n    /**\r\n      * accuracy of the altitude if available.\r\n      */\r\n    altitudeAccuracy: number;\r\n    /**\r\n     * bearing, in degrees.\r\n     */\r\n    bearing: number;\r\n    /**\r\n     * A Coordinates object defining the current location\r\n     */\r\n    coords: Coordinates;\r\n    /**\r\n     * A timestamp representing the time at which the location was retrieved.\r\n     */\r\n    timestamp: number;\r\n}\r\nexport interface BackgroundGeolocationConfig {\r\n    /**\r\n     * Desired accuracy in meters. Possible values [0, 10, 100, 1000]. The lower\r\n     * the number, the more power devoted to GeoLocation resulting in higher\r\n     * accuracy readings. 1000 results in lowest power drain and least accurate\r\n     * readings. @see Apple docs (https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html#//apple_ref/occ/instp/CLLocationManager/desiredAccuracy)\r\n     */\r\n    desiredAccuracy: number;\r\n    /**\r\n     * Stationary radius in meters. When stopped, the minimum distance the device\r\n     * must move beyond the stationary location for aggressive background-tracking\r\n     * to engage.\r\n     */\r\n    stationaryRadius: number;\r\n    /**\r\n     * When enabled, the plugin will emit sounds for life-cycle events of\r\n     * background-geolocation! See debugging sounds table.\r\n     */\r\n    debug?: boolean;\r\n    /**\r\n     * The minimum distance (measured in meters) a device must move horizontally\r\n     * before an update event is generated. @see Apple docs. (https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html#//apple_ref/occ/instp/CLLocationManager/distanceFilter)\r\n     */\r\n    distanceFilter: number;\r\n    /**\r\n     * IOS, ANDROID ONLY\r\n     * Enable this in order to force a stop() when the application terminated\r\n     * (e.g. on iOS, double-tap home button, swipe away the app).o\r\n     *\r\n     * Defaults to true\r\n     */\r\n    stopOnTerminate?: boolean;\r\n    /**\r\n  \r\n     * ANDROID ONLY\r\n  \r\n     * Start background service on device boot.\r\n  \r\n     *\r\n     * Defaults to false\r\n  \r\n     */\r\n    startOnBoot?: boolean;\r\n    /**\r\n  \r\n     * ANDROID ONLY\r\n  \r\n     * If false location service will not be started in foreground and no notification will be shown.\r\n     *\r\n     * Defaults to true\r\n  \r\n     */\r\n    startForeground?: boolean;\r\n    /**\r\n     * ANDROID ONLY\r\n     * When using BackgroundGeolocation.LocationProvider.ANDROID_DISTANCE_FILTER_PROVIDER:\r\n     * The minimum time interval between location updates in milliseconds.\r\n     * @see Android docs (http://developer.android.com/reference/android/location/LocationManager.html#requestLocationUpdates(long,%20float,%20android.location.Criteria,%20android.app.PendingIntent))\r\n     * and the MS doc (http://msdn.microsoft.com/en-us/library/windows/apps/windows.devices.geolocation.geolocator.reportinterval)\r\n     * for more information\r\n     * When using BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER:\r\n     * Rate in milliseconds at which your app prefers to receive location updates.\r\n     * @see Android docs (https://developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#getInterval())\r\n     */\r\n    interval?: number;\r\n    /**\r\n     * ANDROID ONLY\r\n     * Custom notification title in the drawer.\r\n     */\r\n    notificationTitle?: string;\r\n    /**\r\n     * ANDROID ONLY\r\n     * Custom notification text in the drawer.\r\n     */\r\n    notificationText?: string;\r\n    /**\r\n     * ANDROID ONLY\r\n     * The accent color to use for notification. Eg. #4CAF50.\r\n     */\r\n    notificationIconColor?: string;\r\n    /**\r\n  \r\n     * ANDROID ONLY\r\n  \r\n     * The filename of a custom notification icon. See android quirks.\r\n  \r\n     * NOTE: Only available for API Level >=21.\r\n  \r\n     */\r\n    notificationIconLarge?: string;\r\n    /**\r\n  \r\n     * ANDROID ONLY\r\n  \r\n     * The filename of a custom notification icon. See android quirks.\r\n  \r\n     * NOTE: Only available for API Level >=21.\r\n  \r\n     */\r\n    notificationIconSmall?: string;\r\n    /**\r\n     * ANDROID ONLY\r\n     * Set location service provider @see wiki (https://github.com/mauron85/cordova-plugin-background-geolocation/wiki/Android-providers)\r\n     */\r\n    locationProvider?: number;\r\n    /**\r\n     * IOS ONLY\r\n     * [AutomotiveNavigation, OtherNavigation, Fitness, Other] Presumably,\r\n     * this affects iOS GPS algorithm. @see Apple docs for more information\r\n     * (https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html#//apple_ref/occ/instp/CLLocationManager/activityType)\r\n     */\r\n    activityType?: string;\r\n    /**\r\n  \r\n     * IOS ONLY\r\n  \r\n     * Pauses location updates when app is paused\r\n  \r\n     *\r\n     * Defaults to true\r\n  \r\n     */\r\n    pauseLocationUpdates?: boolean;\r\n    /**\r\n  \r\n     * Server url where to send HTTP POST with recorded locations\r\n  \r\n     * @see https://github.com/mauron85/cordova-plugin-background-geolocation#http-locations-posting\r\n  \r\n     */\r\n    url?: string;\r\n    /**\r\n  \r\n     * Server url where to send fail to post locations\r\n  \r\n     * @see https://github.com/mauron85/cordova-plugin-background-geolocation#http-locations-posting\r\n  \r\n     */\r\n    syncUrl?: string;\r\n    /**\r\n     * Specifies how many previously failed locations will be sent to server at once\r\n  \r\n     *\r\n     * Defaults to 100\r\n  \r\n     */\r\n    syncThreshold?: number;\r\n    /**\r\n  \r\n     * Optional HTTP headers sent along in HTTP request\r\n  \r\n     */\r\n    httpHeaders?: any;\r\n    /**\r\n     * IOS ONLY\r\n  \r\n     * Switch to less accurate significant changes and region monitory when in background (default)\r\n     *\r\n     * Defaults to 100\r\n  \r\n     */\r\n    saveBatteryOnBackground?: boolean;\r\n    /**\r\n  \r\n     * Limit maximum number of locations stored into db\r\n  \r\n     *\r\n     * Defaults to 10000\r\n  \r\n     */\r\n    maxLocations?: number;\r\n    /**\r\n     * ANDROID ONLY with BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER\r\n     *\r\n     * Fastest rate in milliseconds at which your app can handle location updates.\r\n     * @see Android docs (https://developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#getFastestInterval())\r\n     */\r\n    fastestInterval?: number;\r\n    /**\r\n     * ANDROID ONLY with BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER\r\n     *\r\n     * Rate in milliseconds at which activity recognition occurs. Larger values will result in fewer activity detections while improving battery life.\r\n     */\r\n    activitiesInterval?: number;\r\n    /**\r\n     * ANDROID ONLY with BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER\r\n     *\r\n     * stop() is forced, when the STILL activity is detected (default is true)\r\n     */\r\n    stopOnStillActivity?: boolean;\r\n}\r\n\r\nexport class BackgroundGeolocatioMock extends BackgroundGeolocation {\r\n    /**\r\n  \r\n     * Set location service provider @see https://github.com/mauron85/cordova-plugin-background-geolocation/wiki/Android-providers\r\n  \r\n     *\r\n     * Possible values:\r\n     *  ANDROID_DISTANCE_FILTER_PROVIDER: 0,\r\n  \r\n     *  ANDROID_ACTIVITY_PROVIDER: 1\r\n  \r\n     *\r\n     * @enum {number}\r\n  \r\n     */\r\n    LocationProvider: any;\r\n    /**\r\n     * Desired accuracy in meters. Possible values [0, 10, 100, 1000].\r\n  \r\n     * The lower the number, the more power devoted to GeoLocation resulting in higher accuracy readings.\r\n  \r\n     * 1000 results in lowest power drain and least accurate readings.\r\n  \r\n     *\r\n     * Possible values:\r\n     *  HIGH: 0\r\n  \r\n     *  MEDIUM: 10\r\n  \r\n     *  LOW: 100\r\n  \r\n     *  PASSIVE: 1000\r\n     *\r\n     * enum {number}\r\n  \r\n     */\r\n    Accuracy: any;\r\n    /**\r\n  \r\n     * Used in the switchMode function\r\n  \r\n     *\r\n     * Possible values:\r\n     *  BACKGROUND: 0\r\n     *  FOREGROUND: 1\r\n  \r\n     *\r\n     * @enum {number}\r\n  \r\n     */\r\n    Mode: any;\r\n    /**\r\n     * Configure the plugin.\r\n     *\r\n     * @param options {BackgroundGeolocationConfig} options An object of type Config\r\n     * @return {Observable<BackgroundGeolocationResponse>}\r\n     */\r\n    configure(options: BackgroundGeolocationConfig): Observable<BackgroundGeolocationResponse> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            let response: BackgroundGeolocationResponse;\r\n            observer.next( response  );\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Turn ON the background-geolocation system.\r\n     * The user will be tracked whenever they suspend the app.\r\n     * @returns {Promise<any>}\r\n     */\r\n    start(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Turn OFF background-tracking\r\n     * @returns {Promise<any>}\r\n     */\r\n    stop(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Inform the native plugin that you're finished, the background-task may be completed\r\n     * @returns {Promise<any>}\r\n     */\r\n    finish(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Force the plugin to enter \"moving\" or \"stationary\" state\r\n     * @param isMoving {boolean}\r\n     * @returns {Promise<any>}\r\n     */\r\n    changePace(isMoving: boolean): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Setup configuration\r\n     * @param options {BackgroundGeolocationConfig}\r\n     * @returns {Promise<any>}\r\n     */\r\n    setConfig(options: BackgroundGeolocationConfig): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Returns current stationaryLocation if available. null if not\r\n     * @returns {Promise<Location>}\r\n     */\r\n    getStationaryLocation(): Promise<BackgroundGeolocationResponse> {\r\n        let response: BackgroundGeolocationResponse;\r\n        return new Promise((resolve, reject) => {\r\n            resolve( response ) ;\r\n        });\r\n    };\r\n    /**\r\n     * Add a stationary-region listener. Whenever the devices enters \"stationary-mode\",\r\n     * your #success callback will be executed with #location param containing #radius of region\r\n     * @returns {Promise<any>}\r\n     */\r\n    onStationary(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Check if location is enabled on the device\r\n     * @returns {Promise<number>} Returns a promise with int argument that takes values 0, 1 (true).\r\n     */\r\n    isLocationEnabled(): Promise<number> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Display app settings to change permissions\r\n     */\r\n    showAppSettings(): void { };\r\n    /**\r\n     * Display device location settings\r\n     */\r\n    showLocationSettings(): void { };\r\n    /**\r\n     * Method can be used to detect user changes in location services settings.\r\n     * If user enable or disable location services then success callback will be executed.\r\n     * In case or error (SettingNotFoundException) fail callback will be executed.\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    watchLocationMode(): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Stop watching for location mode changes.\r\n     * @returns {Promise<any>}\r\n     */\r\n    stopWatchingLocationMode(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Method will return all stored locations.\r\n     * Locations are stored when:\r\n     *  - config.stopOnTerminate is false and main activity was killed\r\n     *    by the system\r\n     *  or\r\n     *  - option.debug is true\r\n     * @returns {Promise<any>}\r\n     */\r\n    getLocations(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n  \r\n     * Method will return locations, which has not been yet posted to server. NOTE: Locations does contain locationId.\r\n  \r\n     * @returns {Promise<any>}\r\n     */\r\n    getValidLocations(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Delete stored location by given locationId.\r\n     * @param locationId {number}\r\n     * @returns {Promise<any>}\r\n     */\r\n    deleteLocation(locationId: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Delete all stored locations.\r\n     * @returns {Promise<any>}\r\n     */\r\n    deleteAllLocations(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Normally plugin will handle switching between BACKGROUND and FOREGROUND mode itself.\r\n     * Calling switchMode you can override plugin behavior and force plugin to switch into other mode.\r\n     *\r\n     * In FOREGROUND mode plugin uses iOS local manager to receive locations and behavior is affected by option.desiredAccuracy and option.distanceFilter.\r\n     * In BACKGROUND mode plugin uses significant changes and region monitoring to receive locations and uses option.stationaryRadius only.\r\n  \r\n     *\r\n     * BackgroundGeolocation.Mode.FOREGROUND\r\n     * BackgroundGeolocation.Mode.BACKGROUND\r\n  \r\n     **\r\n     * @param modeId {number}\r\n     * @returns {Promise<any>}\r\n     */\r\n    switchMode(modeId: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n  \r\n     * Return all logged events. Useful for plugin debugging. Parameter limit limits number of returned entries.\r\n  \r\n     * @see https://github.com/mauron85/cordova-plugin-background-geolocation/tree/v2.2.1#debugging for more information.\r\n  \r\n     *\r\n     * @param limit {number} Limits the number of entries\r\n  \r\n     * @returns {Promise<any>}\r\n     */\r\n    getLogEntries(limit: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}