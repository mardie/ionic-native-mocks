{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/taptic-engine/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAE3D;IAAsC,oCAAY;IAAlD;;IAoCA,CAAC;IAnCG;;;OAGG;IACH,oCAAS,GAAT;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,uCAAY,GAAZ,UAAa,OAEZ;QACG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,iCAAM,GAAN,UAAO,OAEN;QACG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,uBAAC;AAAD,CApCA,AAoCC,CApCqC,YAAY,GAoCjD","file":"index.js","sourceRoot":"","sourcesContent":["import { TapticEngine } from '@ionic-native/taptic-engine';\r\n\r\nexport class TapticEngineMock extends TapticEngine {\r\n    /**\r\n     * Use selection feedback generators to indicate a change in selection.\r\n     * @returns {Promise<any>} Returns a promise that resolves on success and rejects on error\r\n     */\r\n    selection(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Use this to indicate success/failure/warning to the user.\r\n     * @param options {Object} should be of the type { type: 'success' } (or 'warning'/'error')\r\n     * @param options.type {string}\r\n     * @returns {Promise<any>} Returns a promise that resolves on success and rejects on error\r\n     */\r\n    notification(options: {\r\n        type: string;\r\n    }): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Use this to indicate success/failure/warning to the user.\r\n     * @param options {Object} should be of the type { style: 'light' } (or 'medium'/'heavy')\r\n     * @param options.type {string}\r\n     * @returns {Promise<any>} Returns a promise that resolves on success and rejects on error\r\n     */\r\n    impact(options: {\r\n        style: string;\r\n    }): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}