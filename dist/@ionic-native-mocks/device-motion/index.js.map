{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/device-motion/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAC3D,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AA6B7C;IAAsC,oCAAY;IAAlD;;IAqBA,CAAC;IApBI,iDAAsB,GAAtB;QACG,IAAI,IAAkC,CAAC;QACvC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IAEN,CAAC;IAAA,CAAC;IACH;;;;OAIG;IACH,4CAAiB,GAAjB,UAAmB,OAA0C;QACzD,IAAI,IAAkC,CAAC;QAEvC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,uBAAC;AAAD,CArBA,AAqBC,CArBqC,YAAY,GAqBjD","file":"index.js","sourceRoot":"","sourcesContent":["import { DeviceMotion } from '@ionic-native/device-motion';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport interface DeviceMotionAccelerationData {\r\n    /**\r\n     * Amount of acceleration on the x-axis. (in m/s^2)\r\n     */\r\n    x: number;\r\n    /**\r\n     * Amount of acceleration on the y-axis. (in m/s^2)\r\n     */\r\n    y: number;\r\n    /**\r\n     * Amount of acceleration on the z-axis. (in m/s^2)\r\n     */\r\n    z: number;\r\n    /**\r\n     * Creation timestamp in milliseconds.\r\n     */\r\n    timestamp: any;\r\n}\r\n\r\nexport interface DeviceMotionAccelerometerOptions {\r\n    /**\r\n     * Requested period of calls to accelerometerSuccess with acceleration data in Milliseconds. Default: 10000\r\n     */\r\n    frequency?: number;\r\n}\r\n\r\nexport class DeviceMotionMock extends DeviceMotion {\r\n     getCurrentAcceleration(): Promise<DeviceMotionAccelerationData> {\r\n        let data: DeviceMotionAccelerationData;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(data );\r\n        });\r\n\r\n     };\r\n    /**\r\n     * Watch the device acceleration. Clear the watch by unsubscribing from the observable.\r\n     * @param {AccelerometerOptions} options list of options for the accelerometer.\r\n     * @returns {Observable<DeviceMotionAccelerationData>} Observable returns an observable that you can subscribe to\r\n     */\r\n    watchAcceleration (options?: DeviceMotionAccelerometerOptions): Observable<DeviceMotionAccelerationData> {\r\n        let data: DeviceMotionAccelerationData;\r\n\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next(data);\r\n            observer.complete();\r\n        });\r\n    };\r\n}\r\n"]}