{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/in-app-purchase/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAC;AAE9D;IAAuC,qCAAa;IAApD;;IAmFA,CAAC;IAlFG;;;;OAIG;IACH,uCAAW,GAAX,UAAY,SAAmB;QAC3B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,+BAAG,GAAH,UAAI,SAAiB;QAMjB,IAAI,QAKH,CAAC;QACF,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,qCAAS,GAAT,UAAU,SAAiB;QAMvB,IAAI,QAKP,CAAC;QACE,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,mCAAO,GAAP,UAAQ,WAAmB,EAAE,OAAe,EAAE,SAAiB;QAC3D,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,4CAAgB,GAAhB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,sCAAU,GAAV;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,wBAAC;AAAD,CAnFA,AAmFC,CAnFsC,aAAa,GAmFnD","file":"index.js","sourceRoot":"","sourcesContent":["import { InAppPurchase } from '@ionic-native/in-app-purchase';\r\n\r\nexport class InAppPurchaseMock extends InAppPurchase {\r\n    /**\r\n     * Retrieves a list of full product data from Apple/Google. This method must be called before making purchases.\r\n     * @param {array<string>} productId an array of product ids.\r\n     * @returns {Promise<any>} Returns a Promise that resolves with an array of objects.\r\n     */\r\n    getProducts(productId: string[]): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Buy a product that matches the productId.\r\n     * @param {string} productId A string that matches the product you want to buy.\r\n     * @returns {Promise<{transactionId: string, receipt: string, signature: string, productType: string}>} Returns a Promise that resolves with the transaction details.\r\n     */\r\n    buy(productId: string): Promise<{\r\n        transactionId: string;\r\n        receipt: string;\r\n        signature: string;\r\n        productType: string;\r\n    }> {\r\n        let response: {\r\n            transactionId: string;\r\n            receipt: string;\r\n            signature: string;\r\n            productType: string;\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Same as buy, but for subscription based products.\r\n     * @param {string} productId A string that matches the product you want to subscribe to.\r\n     * @returns {Promise<{transactionId: string, receipt: string, signature: string, productType: string}>} Returns a Promise that resolves with the transaction details.\r\n     */\r\n    subscribe(productId: string): Promise<{\r\n        transactionId: string;\r\n        receipt: string;\r\n        signature: string;\r\n        productType: string;\r\n    }> {\r\n        let response: {\r\n        transactionId: string;\r\n        receipt: string;\r\n        signature: string;\r\n        productType: string;\r\n    };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Call this function after purchasing a \"consumable\" product to mark it as consumed. On Android, you must consume products that you want to let the user purchase multiple times. If you will not consume the product after a purchase, the next time you will attempt to purchase it you will get the error message:\r\n     * @param {string} productType\r\n     * @param {string} receipt\r\n     * @param {string} signature\r\n     * @returns {Promise<any>}\r\n     */\r\n    consume(productType: string, receipt: string, signature: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Restore all purchases from the store\r\n     * @returns {Promise<any>} Returns a promise with an array of purchases.\r\n     */\r\n    restorePurchases(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get the receipt.\r\n     * @returns {Promise<string>} Returns a promise that contains the string for the receipt\r\n     */\r\n    getReceipt(): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}