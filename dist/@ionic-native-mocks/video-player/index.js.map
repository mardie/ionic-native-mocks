{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/video-player/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,4BAA4B,CAAC;AAiBzD;IAAqC,mCAAW;IAAhD;;IAgBA,CAAC;IAfG;;;;;OAKG;IACH,8BAAI,GAAJ,UAAK,OAAe,EAAE,OAAsB;QACxC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;OAEG;IACH,+BAAK,GAAL,cAAe,CAAC;IAAA,CAAC;IACrB,sBAAC;AAAD,CAhBA,AAgBC,CAhBoC,WAAW,GAgB/C","file":"index.js","sourceRoot":"","sourcesContent":["import { VideoPlayer } from '@ionic-native/video-player';\r\n/**\r\n * Options for the video playback using the `play` function.\r\n */\r\nexport interface VideoOptions {\r\n    /**\r\n   * Set the initial volume of the video playback, where 0.0 is 0% volume and 1.0 is 100%.\r\n   * For example: for a volume of 30% set the value to 0.3.\r\n   */\r\n    volume?: number;\r\n    /**\r\n     * There are to options for the scaling mode. SCALE_TO_FIT which is default and SCALE_TO_FIT_WITH_CROPPING.\r\n     * These strings are the only ones which can be passed as option.\r\n     */\r\n    scalingMode?: number;\r\n}\r\n\r\nexport class VideoPlayerMock extends VideoPlayer {\r\n    /**\r\n     * Plays the video from the passed url.\r\n     * @param fileUrl {string} File url to the video.\r\n     * @param options {VideoOptions?} Optional video playback settings. See options above.\r\n     * @returns {Promise<any>} Resolves promise when the video was played successfully.\r\n     */\r\n    play(fileUrl: string, options?: VideoOptions): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Stops the video playback immediatly.\r\n     */\r\n    close(): void {};\r\n}\r\n"]}