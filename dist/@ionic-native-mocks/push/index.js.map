{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/push/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAuKtD;IAA8B,4BAAI;IAAlC;;IAoBA,CAAC;IAnBG;;;;OAIG;IACH,uBAAI,GAAJ,UAAK,OAAoB;QACrB,IAAI,QAAQ,GAAe,IAAI,UAAU,CAAE,OAAO,CAAE,CAAC;QACrD,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,gCAAa,GAAb;QACI,IAAI,QAAiB,CAAC;QACtB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,eAAC;AAAD,CApBA,AAoBC,CApB6B,IAAI,GAoBjC","file":"index.js","sourceRoot":"","sourcesContent":["import { Push, PushObject } from '@ionic-native/push';\r\n\r\nexport declare type EventResponse = RegistrationEventResponse & NotificationEventResponse & Error;\r\nexport interface RegistrationEventResponse {\r\n    /**\r\n     * The registration ID provided by the 3rd party remote push service.\r\n     */\r\n    registrationId: string;\r\n}\r\nexport interface NotificationEventResponse {\r\n    /**\r\n     * The text of the push message sent from the 3rd party service.\r\n     */\r\n    message: string;\r\n    /**\r\n     * The optional title of the push message sent from the 3rd party service.\r\n     */\r\n    title?: string;\r\n    /**\r\n     * The number of messages to be displayed in the badge iOS or message count in the notification shade in Android.\r\n     * For windows, it represents the value in the badge notification which could be a number or a status glyph.\r\n     */\r\n    count: string;\r\n    /**\r\n     * The name of the sound file to be played upon receipt of the notification.\r\n     */\r\n    sound: string;\r\n    /**\r\n     * The path of the image file to be displayed in the notification.\r\n     */\r\n    image: string;\r\n    /**\r\n     * An optional collection of data sent by the 3rd party push service that does not fit in the above properties.\r\n     */\r\n    additionalData: NotificationEventAdditionalData & any;\r\n}\r\n/**\r\n * Loosened up with a dictionary notation, but all non-defined properties need to use (map['prop']) notation\r\n *\r\n * Ideally the developer would overload (merged declaration) this or create a new interface that would extend this one\r\n * so that he could specify any custom code without having to use array notation (map['prop']) for all of them.\r\n */\r\nexport interface NotificationEventAdditionalData {\r\n    [name: string]: any;\r\n    /**\r\n     * Whether the notification was received while the app was in the foreground\r\n     */\r\n    foreground?: boolean;\r\n    collapse_key?: string;\r\n    coldstart?: boolean;\r\n    from?: string;\r\n    notId?: string;\r\n}\r\nexport interface IOSPushOptions {\r\n    /**\r\n     * Maps to the project number in the Google Developer Console. Setting this\r\n     * uses GCM for notifications instead of native.\r\n     */\r\n    senderID?: string;\r\n    /**\r\n     * Whether to use prod or sandbox GCM setting.\r\n     */\r\n    gcmSandbox?: boolean | string;\r\n    /**\r\n     * If true the device shows an alert on receipt of notification.\r\n     * **Note**: the value you set this option to the first time you call the init\r\n     * method will be how the application always acts. Once this is set\r\n     * programmatically in the init method it can only be changed manually by the\r\n     * user in Settings>Notifications>App Name. This is normal iOS behaviour.\r\n     */\r\n    alert?: boolean | string;\r\n    /**\r\n     * If true the device sets the badge number on receipt of notification.\r\n     * **Note**: the value you set this option to the first time you call the init\r\n     * method will be how the application always acts. Once this is set\r\n     * programmatically in the init method it can only be changed manually by the\r\n     * user in Settings>Notifications>App Name. This is normal iOS behaviour.\r\n     */\r\n    badge?: boolean | string;\r\n    /**\r\n     * If true the device plays a sound on receipt of notification.\r\n     * **Note**: the value you set this option to the first time you call the init\r\n     * method will be how the application always acts. Once this is set\r\n     * programmatically in the init method it can only be changed manually by the\r\n     * user in Settings>Notifications>App Name. This is normal iOS behaviour.\r\n     */\r\n    sound?: boolean | string;\r\n    /**\r\n     * If true the badge will be cleared on app startup.\r\n     */\r\n    clearBadge?: boolean | string;\r\n    /**\r\n     * If the array contains one or more strings each string will be used to\r\n     * subscribe to a GcmPubSub topic.\r\n     * **Note**: only usable in conjunction with `senderID`.\r\n     */\r\n    topics?: string[];\r\n    /**\r\n     * The data required in order to enable Action Buttons for iOS.\r\n     * Action Buttons on iOS - https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/PAYLOAD.md#action-buttons-1\r\n     */\r\n    categories?: CategoryArray;\r\n}\r\nexport interface CategoryArray {\r\n    [name: string]: CategoryAction;\r\n}\r\nexport interface CategoryAction {\r\n    yes?: CategoryActionData;\r\n    no?: CategoryActionData;\r\n    maybe?: CategoryActionData;\r\n}\r\nexport interface CategoryActionData {\r\n    callback: string;\r\n    title: string;\r\n    foreground: boolean;\r\n    destructive: boolean;\r\n}\r\nexport interface AndroidPushOptions {\r\n    /**\r\n     * Maps to the project number in the Google Developer Console.\r\n     */\r\n    senderID: string;\r\n    /**\r\n     * The name of a drawable resource to use as the small-icon. The name should\r\n     * not include the extension.\r\n     */\r\n    icon?: string;\r\n    /**\r\n     * Sets the background color of the small icon on Android 5.0 and greater.\r\n     * [Supported Formats](http://developer.android.com/intl/ru/reference/android/graphics/Color.html#parseColor(java.lang.String))\r\n     */\r\n    iconColor?: string;\r\n    /**\r\n     * If true it plays the sound specified in the push data or the default system\r\n     * sound.\r\n     */\r\n    sound?: boolean | string;\r\n    /**\r\n     * If true the device vibrates on receipt of notification.\r\n     */\r\n    vibrate?: boolean | string;\r\n    /**\r\n     * If true the icon badge will be cleared on init and before push messages are processed.\r\n     */\r\n    clearBadge?: boolean | string;\r\n    /**\r\n     * If true the app clears all pending notifications when it is closed.\r\n     */\r\n    clearNotifications?: boolean | string;\r\n    /**\r\n     * If true will always show a notification, even when the app is on the\r\n     * foreground.\r\n     */\r\n    forceShow?: boolean | string;\r\n    /**\r\n     * If the array contains one or more strings each string will be used to\r\n     * subscribe to a GcmPubSub topic.\r\n     */\r\n    topics?: string[];\r\n}\r\nexport interface PushOptions {\r\n    ios?: IOSPushOptions;\r\n    android?: AndroidPushOptions;\r\n    windows?: any;\r\n}\r\nexport declare type PushEvent = 'registration' | 'error' | 'notification';\r\n\r\nexport class PushMock extends Push {\r\n    /**\r\n     * Init push notifications\r\n     * @param options {PushOptions}\r\n     * @return {PushObject}\r\n     */\r\n    init(options: PushOptions): PushObject {\r\n        let response: PushObject = new PushObject( options );\r\n        return response;\r\n    };\r\n    /**\r\n     * Check whether the push notification permission has been granted.\r\n     * @return {Promise<{isEnabled: boolean}>} Returns a Promise that resolves with an object with one property: isEnabled, a boolean that indicates if permission has been granted.\r\n     */\r\n    hasPermission(): Promise<{ isEnabled: boolean; }> {\r\n        let response: Boolean;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n}\r\n"]}