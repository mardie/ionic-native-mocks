{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/speech-recognition/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,kCAAkC,CAAC;AACrE,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAqC7C;IAA2C,yCAAiB;IAA5D;;IA2DA,CAAC;IA1DG;;;OAGG;IACH,sDAAsB,GAAtB;QACI,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,8CAAc,GAAd,UAAe,OAA2C;QACtD,IAAI,QAAQ,GAAkB,EAAE,CAAC;QACjC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;OAEG;IACH,6CAAa,GAAb;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,qDAAqB,GAArB;QACI,IAAI,QAAQ,GAAkB,EAAE,CAAC;QACjC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,6CAAa,GAAb;QACI,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,iDAAiB,GAAjB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,4BAAC;AAAD,CA3DA,AA2DC,CA3D0C,iBAAiB,GA2D3D","file":"index.js","sourceRoot":"","sourcesContent":["import { SpeechRecognition } from '@ionic-native/speech-recognition';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport declare type SpeechRecognitionListeningOptions = SpeechRecognitionListeningOptionsIOS | SpeechRecognitionListeningOptionsAndroid;\r\nexport interface SpeechRecognitionListeningOptionsIOS {\r\n    /**\r\n     * used language for recognition (default `\"en-US\"`)\r\n     */\r\n    language?: string;\r\n    /**\r\n     * umber of return matches (default `5`)\r\n     */\r\n    matches?: number;\r\n    /**\r\n     * Allow partial results to be returned (default `false`)\r\n     */\r\n    showPartial?: boolean;\r\n}\r\nexport interface SpeechRecognitionListeningOptionsAndroid {\r\n    /**\r\n     * used language for recognition (default `\"en-US\"`)\r\n     */\r\n    language?: string;\r\n    /**\r\n     * number of return matches (maximum number of matches)\r\n     */\r\n    matches?: number;\r\n    /**\r\n     * displayed prompt of listener popup window\r\n     */\r\n    prompt?: string;\r\n    /**\r\n     * display listener popup window with prompt (default `true`)\r\n     */\r\n    showPopup?: boolean;\r\n}\r\n\r\nexport class SpeechRecognitionMock extends SpeechRecognition {\r\n    /**\r\n     * Check feature available\r\n     * @return {Promise<boolean>}\r\n     */\r\n    isRecognitionAvailable(): Promise<boolean> {\r\n        let response: boolean = true;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Start the recognition process\r\n     * @return {Promise< Array<string> >} list of recognized terms\r\n     */\r\n    startListening(options?: SpeechRecognitionListeningOptions): Observable<Array<string>> {\r\n        let response: Array<string> = [];\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next(response);\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Stop the recognition process\r\n     */\r\n    stopListening(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Get the list of supported languages\r\n     * @return {Promise< Array<string> >} list of languages\r\n     */\r\n    getSupportedLanguages(): Promise<Array<string>> {\r\n        let response: Array<string> = [];\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Check permission\r\n     * @return {Promise<boolean>} has permission\r\n     */\r\n    hasPermission(): Promise<boolean> {\r\n        let response: boolean = true;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Request permissions\r\n     * @return {Promise<void>}\r\n     */\r\n    requestPermission(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}