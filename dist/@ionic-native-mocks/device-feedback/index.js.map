{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/device-feedback/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAE/D;IAAwC,sCAAc;IAAtD;;IAuBA,CAAC;IAtBG;;OAEG;IACH,qCAAQ,GAAR,cAAmB,CAAC;IAAA,CAAC;IACrB;;;OAGG;IACH,mCAAM,GAAN,UAAO,IAAY,IAAU,CAAC;IAAA,CAAC;IAC/B;;;OAGG;IACH,8CAAiB,GAAjB;QAII,IAAI,QAAQ,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAChD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,yBAAC;AAAD,CAvBA,AAuBC,CAvBuC,cAAc,GAuBrD","file":"index.js","sourceRoot":"","sourcesContent":["import { DeviceFeedback } from '@ionic-native/device-feedback';\r\n\r\nexport class DeviceFeedbackMock extends DeviceFeedback {\r\n    /**\r\n     * Provide sound feedback to user, nevertheless respect user's settings and current active device profile as native feedback do.\r\n     */\r\n    acoustic(): void { };\r\n    /**\r\n     * Provide vibrate feedback to user, nevertheless respect user's tactile feedback setting as native feedback do.\r\n     * @param type {Number} Specify type of vibration feedback. 0 for long press, 1 for virtual key, or 3 for keyboard tap.\r\n     */\r\n    haptic(type: number): void { };\r\n    /**\r\n     * Check if haptic and acoustic feedback is enabled by user settings.\r\n     * @returns {Promise<any>}\r\n     */\r\n    isFeedbackEnabled(): Promise<{\r\n        haptic: boolean;\r\n        acoustic: boolean;\r\n    }> {\r\n        let response = { haptic: true, acoustic: true };\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n}\r\n"]}