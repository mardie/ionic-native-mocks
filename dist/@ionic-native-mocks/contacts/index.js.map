{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/contacts/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAiClD;;GAEG;AACH;IAiBI;IAAe,CAAC;IAAA,CAAC;IACjB,uBAAK,GAAL,cAAmB,MAAM,CAAC,IAAI,OAAO,EAAE,CAAC,CAAC,CAAC;IAAA,CAAC;IAC3C,wBAAM,GAAN;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAA,OAAO;YACtB,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF,sBAAI,GAAJ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAA,OAAO;YACtB,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACL,cAAC;AAAD,CA7BA,AA6BC,IAAA;;AAmJD;IAAkC,gCAAQ;IAA1C;;IAsCA,CAAC;IArCG;;;OAGG;IACH,6BAAM,GAAN;QACI,IAAI,UAAU,GAAY,IAAI,OAAO,EAAE,CAAC;QACxC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACxB,MAAM,CAAC,CAAC,UAAU,CAAC,CAAC;IACxB,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,2BAAI,GAAJ,UAAK,MAA0B,EAAE,OAA6B;QAE1D,IAAI,UAAU,GAAY,IAAI,OAAO,EAAE,CAAC;QAExC,UAAU,CAAC,WAAW,GAAG,WAAW,CAAC;QAErC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;OAGG;IACH,kCAAW,GAAX;QACI,IAAI,UAAU,GAAY,IAAI,OAAO,EAAE,CAAC;QACxC,UAAU,CAAC,WAAW,GAAG,WAAW,CAAC;QAErC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,UAAU,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IACL,mBAAC;AAAD,CAtCA,AAsCC,CAtCiC,QAAQ,GAsCzC","file":"index.js","sourceRoot":"","sourcesContent":["import { Contacts } from '@ionic-native/contacts';\r\n\r\nexport declare type ContactFieldType = '*' | 'addresses' | 'birthday' | 'categories' | 'country' | 'department' | 'displayName' | 'emails' | 'familyName' | 'formatted' | 'givenName' | 'honorificPrefix' | 'honorificSuffix' | 'id' | 'ims' | 'locality' | 'middleName' | 'name' | 'nickname' | 'note' | 'organizations' | 'phoneNumbers' | 'photos' | 'postalCode' | 'region' | 'streetAddress' | 'title' | 'urls';\r\nexport interface IContactProperties {\r\n    /** A globally unique identifier. */\r\n    id?: string;\r\n    /** The name of this Contact, suitable for display to end users. */\r\n    displayName?: string;\r\n    /** An object containing all components of a persons name. */\r\n    name?: IContactName;\r\n    /** A casual name by which to address the contact. */\r\n    nickname?: string;\r\n    /** An array of all the contact's phone numbers. */\r\n    phoneNumbers?: IContactField[];\r\n    /** An array of all the contact's email addresses. */\r\n    emails?: IContactField[];\r\n    /** An array of all the contact's addresses. */\r\n    addresses?: IContactAddress[];\r\n    /** An array of all the contact's IM addresses. */\r\n    ims?: IContactField[];\r\n    /** An array of all the contact's organizations. */\r\n    organizations?: IContactOrganization[];\r\n    /** The birthday of the contact. */\r\n    birthday?: Date;\r\n    /** A note about the contact. */\r\n    note?: string;\r\n    /** An array of the contact's photos. */\r\n    photos?: IContactField[];\r\n    /** An array of all the user-defined categories associated with the contact. */\r\n    categories?: IContactField[];\r\n    /** An array of web pages associated with the contact. */\r\n    urls?: IContactField[];\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport class Contact implements IContactProperties {\r\n    // private _objectInstance: any;\r\n    id: string;\r\n    displayName: string;\r\n    name: IContactName;\r\n    nickname: string;\r\n    phoneNumbers: IContactField[];\r\n    emails: IContactField[];\r\n    addresses: IContactAddress[];\r\n    ims: IContactField[];\r\n    organizations: IContactOrganization[];\r\n    birthday: Date;\r\n    note: string;\r\n    photos: IContactField[];\r\n    categories: IContactField[];\r\n    urls: IContactField[];\r\n    [key: string]: any;\r\n    constructor() {};\r\n    clone(): Contact { return new Contact(); };\r\n    remove(): Promise<any> {\r\n        return new Promise(resolve => {\r\n            resolve();\r\n        });\r\n    };\r\n    save(): Promise<any> {\r\n        return new Promise(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport interface IContactError {\r\n    /** Error code */\r\n    code: number;\r\n    /** Error message */\r\n    message: string;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport declare const ContactError: {\r\n    new (code: number): IContactError;\r\n    UNKNOWN_ERROR: number;\r\n    INVALID_ARGUMENT_ERROR: number;\r\n    TIMEOUT_ERROR: number;\r\n    PENDING_OPERATION_ERROR: number;\r\n    IO_ERROR: number;\r\n    NOT_SUPPORTED_ERROR: number;\r\n    PERMISSION_DENIED_ERROR: number;\r\n};\r\nexport interface IContactName {\r\n    /** The complete name of the contact. */\r\n    formatted?: string;\r\n    /** The contact's family name. */\r\n    familyName?: string;\r\n    /** The contact's given name. */\r\n    givenName?: string;\r\n    /** The contact's middle name. */\r\n    middleName?: string;\r\n    /** The contact's prefix (example Mr. or Dr.) */\r\n    honorificPrefix?: string;\r\n    /** The contact's suffix (example Esq.). */\r\n    honorificSuffix?: string;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport declare class ContactName implements IContactName {\r\n    formatted: string;\r\n    familyName: string;\r\n    givenName: string;\r\n    middleName: string;\r\n    honorificPrefix: string;\r\n    honorificSuffix: string;\r\n    constructor(formatted?: string, familyName?: string, givenName?: string, middleName?: string, honorificPrefix?: string, honorificSuffix?: string);\r\n}\r\nexport interface IContactField {\r\n    /** A string that indicates what type of field this is, home for example. */\r\n    type?: string;\r\n    /** The value of the field, such as a phone number or email address. */\r\n    value?: string;\r\n    /** Set to true if this ContactField contains the user's preferred value. */\r\n    pref?: boolean;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport declare class ContactField implements IContactField {\r\n    type: string;\r\n    value: string;\r\n    pref: boolean;\r\n    constructor(type?: string, value?: string, pref?: boolean);\r\n}\r\nexport interface IContactAddress {\r\n    /** Set to true if this ContactAddress contains the user's preferred value. */\r\n    pref?: boolean;\r\n    /** A string indicating what type of field this is, home for example. */\r\n    type?: string;\r\n    /** The full address formatted for display. */\r\n    formatted?: string;\r\n    /** The full street address. */\r\n    streetAddress?: string;\r\n    /** The city or locality. */\r\n    locality?: string;\r\n    /** The state or region. */\r\n    region?: string;\r\n    /** The zip code or postal code. */\r\n    postalCode?: string;\r\n    /** The country name. */\r\n    country?: string;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport declare class ContactAddress implements IContactAddress {\r\n    pref: boolean;\r\n    type: string;\r\n    formatted: string;\r\n    streetAddress: string;\r\n    locality: string;\r\n    region: string;\r\n    postalCode: string;\r\n    country: string;\r\n    constructor(pref?: boolean, type?: string, formatted?: string, streetAddress?: string, locality?: string, region?: string, postalCode?: string, country?: string);\r\n}\r\nexport interface IContactOrganization {\r\n    /** Set to true if this ContactOrganization contains the user's preferred value. */\r\n    pref?: boolean;\r\n    /** A string that indicates what type of field this is, home for example. */\r\n    type?: string;\r\n    /** The name of the organization. */\r\n    name?: string;\r\n    /** The department the contract works for. */\r\n    department?: string;\r\n    /** The contact's title at the organization. */\r\n    title?: string;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport declare class ContactOrganization implements IContactOrganization {\r\n    type: string;\r\n    name: string;\r\n    department: string;\r\n    title: string;\r\n    pref: boolean;\r\n    constructor(type?: string, name?: string, department?: string, title?: string, pref?: boolean);\r\n}\r\n/** Search options to filter navigator.contacts.  */\r\nexport interface IContactFindOptions {\r\n    /** The search string used to find navigator.contacts. */\r\n    filter?: string;\r\n    /** Determines if the find operation returns multiple navigator.contacts. Defaults to false. */\r\n    multiple?: boolean;\r\n    /** Contact fields to be returned back. If specified, the resulting Contact object only features values for these fields. */\r\n    desiredFields?: string[];\r\n    /**\r\n     * (Android only): Filters the search to only return contacts with a phone number informed.\r\n     */\r\n    hasPhoneNumber?: boolean;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport declare class ContactFindOptions implements IContactFindOptions {\r\n    filter: string;\r\n    multiple: boolean;\r\n    desiredFields: string[];\r\n    hasPhoneNumber: boolean;\r\n    constructor(filter?: string, multiple?: boolean, desiredFields?: string[], hasPhoneNumber?: boolean);\r\n}\r\n\r\nexport class ContactsMock extends Contacts {\r\n    /**\r\n     * Create a single contact.\r\n     * @returns {Contact} Returns a Contact object\r\n     */\r\n    create(): any {\r\n        let newContact: Contact = new Contact();\r\n        console.log(newContact);\r\n        return (newContact);\r\n    };\r\n    /**\r\n     * Search for contacts in the Contacts list.\r\n     * @param fields {ContactFieldType[]}  Contact fields to be used as a search qualifier\r\n     * @param options {IContactFindOptions} Optional options for the query\r\n     * @returns {Promise<Contact[]>} Returns a Promise that resolves with the search results (an array of Contact objects)\r\n     */\r\n    find(fields: ContactFieldType[], options?: IContactFindOptions): Promise<any[]> {\r\n\r\n        let theContact: Contact = new Contact();\r\n\r\n        theContact.displayName = 'Max Lynch';\r\n\r\n        return new Promise((resolve, reject) => {\r\n            resolve([theContact]);\r\n        });\r\n    }\r\n    /**\r\n     * Select a single Contact.\r\n     * @returns {Promise<Contact>} Returns a Promise that resolves with the selected Contact\r\n     */\r\n    pickContact(): Promise<any> {\r\n        let theContact: Contact = new Contact();\r\n        theContact.displayName = 'Max Lynch';\r\n\r\n        return new Promise((resolve, reject) => {\r\n            resolve(theContact);\r\n        });\r\n    }\r\n}\r\n"]}