{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/db-meter/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,wBAAwB,CAAC;AACjD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAG7C;IAAiC,+BAAO;IAAxC;;IAkCA,CAAC;IAjCG,2BAAK,GAAL;QACI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,0BAAI,GAAJ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,iCAAW,GAAX;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,4BAAM,GAAN;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,kBAAC;AAAD,CAlCA,AAkCC,CAlCgC,OAAO,GAkCvC","file":"index.js","sourceRoot":"","sourcesContent":["import { DBMeter } from '@ionic-native/db-meter';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport class DBMeterMock extends DBMeter {\r\n    start(): Observable<any> {\r\n        return Observable.create( (observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Stops listening\r\n     * @hidden\r\n     */\r\n    stop(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Check if the DB Meter is listening\r\n     * @returns {Promise<boolean>} Returns a promise that resolves with a boolean that tells us whether the DB meter is listening\r\n     */\r\n    isListening(): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(true);\r\n        });\r\n    };\r\n    /**\r\n     * Delete the DB Meter instance\r\n     * @returns {Promise<any>} Returns a promise that will resolve if the instance has been deleted, and rejects if errors occur.\r\n     */\r\n    delete(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}